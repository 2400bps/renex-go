{"version":3,"sources":["lib/wallets/web3browser.ts","actions/popup/popupActions.ts","components/popups/LedgerPopup.tsx","lib/wallets/ledger.tsx","lib/wallets/mockWallet.ts","lib/wallets/privateKey.tsx","lib/wallets/trezor.tsx","lib/wallets/wallet.ts","components/Loading.tsx","lib/network.ts","lib/wallets/keystore.tsx","components/popups/KeystorePopup.tsx","lib/web3.ts","lib/history.ts","actions/alert/alertActions.ts","components/Alerts.tsx","lib/market.ts","actions/inputs/inputsActions.ts","components/BalanceBanner.tsx","lib/conversion.ts","components/Heading.tsx","components/BalanceHistory.tsx","lib/record.ts","reducers/types.ts","actions/alert/pendingAlertActions.ts","components/popups/ApprovalPopup.tsx","reducers/typesSdk.ts","actions/trader/balanceActions.ts","actions/balances/balancesActions.ts","actions/orderbook/traderBookActions.ts","actions/trader/walletActions.ts","actions/trader/accountActions.ts","components/Blocky.tsx","components/Header.tsx","components/SelectMarket.tsx","components/ManageBalances.tsx","components/MarketBanner.tsx","components/popups/SigningPopup.tsx","actions/settlement/atomicActions.tsx","components/AtomicNotice.tsx","components/InfoLabel.tsx","components/ViewAtomicBalances.tsx","components/ViewBalances.tsx","components/pages/Balances.tsx","components/Console.tsx","components/TradeTokenBanner.tsx","components/popups/OpenOrderPopup.tsx","actions/trader/orderActions.ts","components/SubmittedTrades.tsx","components/ExecutedTrades.tsx","lib/globals.ts","actions/orderbook/hiddenBookActions.ts","components/HiddenOrderbook.tsx","reducers/orderbook/hiddenBookReducer.ts","lib/balances.ts","components/NewOrderInputField.tsx","components/NewOrderInputForm.tsx","components/NewOrderInputs.tsx","components/WrapBitcoin.tsx","components/NewOrder.tsx","components/pages/Exchange.tsx","actions/trader/termsActions.ts","components/popups/TermsPopup.tsx","components/popups/SelectWeb3Account.tsx","components/popups/VerificationPopup.tsx","components/WalletItem.tsx","components/Wallets.tsx","components/pages/Home.tsx","components/pages/LoggingOut.tsx","components/pages/Orders.tsx","components/Popup.tsx","actions/market/marketActions.ts","actions/sdk/sdkActions.ts","components/App.tsx","reducers/rootReducer.ts","reducers/alert/alertReducer.ts","reducers/balances/balancesReducer.ts","reducers/inputs/inputsReducer.ts","reducers/market/marketReducer.ts","reducers/popup/popupReducer.ts","reducers/orderbook/traderBookReducer.ts","reducers/trader/traderReducer.ts","reducers/sdk/sdkReducer.ts","store/persistConfig.ts","store/configureStore.ts","index.tsx","tokens/btc.svg","tokens/dgx.svg","tokens/eth.svg","tokens/omg.svg","tokens/ren.svg","tokens/tusd.svg","tokens/wbtc.png","tokens/wbtc.svg","tokens/zrx.svg","tokens sync /^/.//.*$"],"names":["MetaMask","name","slug","description","enabled","getWeb3Provider","_getWeb3Provider","Object","_Users_jaz_go_src_github_com_republicprotocol_renex_go_modules_renex_js_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","_Users_jaz_go_src_github_com_republicprotocol_renex_go_modules_renex_js_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","mark","_callee","provider","wrap","_context","prev","next","getInjectedWeb3Provider","sent","abrupt","stop","this","apply","arguments","_ref","_callee2","_context2","window","ethereum","enable","t0","Error","web3","currentProvider","__webpack_require__","d","__webpack_exports__","setPopup","clearPopup","typesafe_actions__WEBPACK_IMPORTED_MODULE_0__","createStandardAction","derivationRegex","RegExp","options","value","label","LedgerPopup","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","validatePath","arg","test","handleChange","derivation","setState","handleUnlock","asyncToGenerator","regenerator_default","e","_this$props","checkConnection","resolve","preventDefault","state","loading","t1","t2","message","match","error","_x","_this$state","react","className","onSubmit","react_select_es","onChange","isValidNewOption","type","Loading","React","createProvider","engine","ProviderEngine","slice","ledger","createLedgerSubprovider","TransportU2F","create","networkId","networkData","ethNetworkId","accountsLength","path","addProvider","NonceSubprovider","FetchSubprovider","rpcUrl","INFURA_URL","start","args","accounts","getAccounts","Web3","length","Ledger","_callee3","address","_context3","PopupPromise","_ref2","reject","store","dispatch","popup","popups_LedgerPopup","onCancel","ErrorCanceledByUser","_x3","_x4","_x2","MockWallet","FakeProvider","PrivateKey","getReadOnlyProvider","Trezor","ErrorVerificationFailed","Wallet","WalletList","wallet_getReadOnlyProvider","WalletDetails","List","Keystore","fn","Promise","reason","Map","set","alt","react__WEBPACK_IMPORTED_MODULE_5__","concat","NETWORK","infura","INFURA_KEY","keystore","password","version","wallet","privateKey","walletProvider","_ref3","innerResolve","react__WEBPACK_IMPORTED_MODULE_3__","_components_popups_KeystorePopup__WEBPACK_IMPORTED_MODULE_8__","Crypto","crypto","parseInt","ethereumjsWallet","Buffer","console","getAddressesString","getAddress","toString","WalletSubprovider","KeystorePopup","_Users_jaz_go_src_github_com_republicprotocol_renex_go_modules_renex_js_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__","_Users_jaz_go_src_github_com_republicprotocol_renex_go_modules_renex_js_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__","_Users_jaz_go_src_github_com_republicprotocol_renex_go_modules_renex_js_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__","handleInput","event","element","target","current","_Users_jaz_go_src_github_com_republicprotocol_renex_go_modules_renex_js_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__","_Users_jaz_go_src_github_com_republicprotocol_renex_go_modules_renex_js_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","handleUpload","files","f","reader","FileReader","onload","eInner","key","JSON","parse","result","err","readAsText","undefined","react__WEBPACK_IMPORTED_MODULE_7__","placeholder","_components_Loading__WEBPACK_IMPORTED_MODULE_8__","eth","getNetwork","net","getNetworkType","includesAddress","then","map","acc","toLowerCase","includes","createBrowserHistory","setAlert","clearAlert","Alerts","context","alertInterval","handleClose","bind","assertThisInitialized","nextProps","_this2","alert","clearTimeout","setTimeout","actions","alertType","role","onClick","clearInterval","connect","Pair","bindActionCreators","setMarket","setOrder","setBalance","Pairs","OrderedMap","BTC_ETH","code","orderSettlement","OrderSettlement","RenExAtomic","quoteToken","Token","BTC","baseToken","ETH","category","BTC_WBTC","WBTC","fixedPrice","BigNumber","ETH_DGX","RenEx","DGX","ETH_TUSD","TUSD","ETH_REN","REN","ETH_ZRX","ZRX","ETH_OMG","OMG","TokenDetails","UnknownToken","symbol","icon","pairs","digits","cmcID","coingeckoID","settlements","offChain","getPrice","_getPrice","quoteCode","baseCode","quoteDetails","baseDetails","url","response","data","price","percentChange","get","fetch","json","market_data","current_price","price_change_percentage_24h_in_currency","tokens","RenExTokens","filter","token","indexOf","toList","RenExAtomicTokens","BalanceBanner","sdk","market","usableBalances","usableAtomicBalances","supportedTokens","supportedAtomicTokens","atomic","atomicTokens","atom","isConnected","listBalances","toArray","balances","list","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","balance","balanceText","toFixed","_TokenDetails$get","image","require","push","Link","to","handleClick","src","return","currency","_this$props$balanceIn","balanceInputs","depositAmount","withdrawAmount","TimeMagnitude","inputs","trader","Heading","title","naturalTime","expiry","diff","days","countDown","moment","duration","unix","asDays","hours","asHours","minutes","asMinutes","seconds","asSeconds","suffix","Math","round","showingSeconds","floor","sleep","ms","getTimeMagnitude","isBefore","Day","Hour","Minute","Second","getStep","step","isZero","log10","_significantDigits","n","simplify","roundDown","isEqualTo","c","exp","toNumber","pow","exponentiatedBy","div","ceil","significantDigits","slicedToArray","times","getPriceStep","getVolumeStep","volume","BalanceHistory","timeout","rerender","highlightLatest","receivedBalances","balanceHistory","size","_this3","relevantRows","magnitude","time","reduce","val","min","forceUpdate","generateRows","components_Heading","colSpan","rows","reverse","balanceAction","TX_URL","etherscan","txHash","readableAmount","amount","status","TransactionStatus","Pending","href","rel","Failed","Replaced","format","action","charAt","toUpperCase","updateIndex","Record","_Immutable$Record","_class","inner","Immutable","inherits","createClass","esm_get","prototype","InputsData","_Record","orderInputs","side","OrderSide","BUY","pricepoint","minVolume","HiddenBookData","_Record2","hiddenOrders","TraderBookData","_Record3","traderOrders","cancelling","_Record4","TraderData","_Record5","stringify","agreedToTerms","str","Sentry","atomicBalances","atomicAddresses","atomConnectionStatus","AtomicConnectionStatus","NotConnected","accountBalances","RenExSDK","providers","HttpProvider","AlertType","LabelType","SDKData","_Record6","supportedMarkets","minEthTradeVolume","darknodeFeePercent","wrappingFeePercent","UnknownMarketPrice","MarketPriceData","_Record7","marketPrices","Alert","_Record8","Warning","AlertData","_Record9","pendingAlerts","PopupData","_Record10","dismissible","addPendingAlert","removePendingAlerts","ApprovalPopup","logCount","catch","closePopup","newApprovalPopup","onCancelAction","ApprovalPopup_ApprovalPopup","OrderInputsAllRecord","OrderType","LIMIT","nonce","BN","MatchDetailsRecord","orderID","matchedID","receivedVolume","spentVolume","fee","receivedToken","spentToken","ComputedOrderDetailsRecord","spendToken","receiveToken","receiveVolume","spendVolume","date","feeAmount","feeToken","TraderOrderRecord","id","OrderStatus","NOT_SUBMITTED","matchDetails","computedOrderDetails","transactionHash","BalanceActionRecord","BalanceActionType","Withdraw","traderOrderToRecord","traderOrder","updateBalance","updateBalances","updateUsableBalances","updateUsableBalance","updateAccountBalance","updateAccountBalances","updateAtomicBalances","updateAtomicAddresses","updateUsableAtomicBalances","deposit","currencyCode","amountBigNumber","transactionCall","parseFloat","lte","awaitConfirmation","depositResult","balanceActionRecord","storeBalanceActions","getBalances","withdraw","_callee4","_context4","gt","_ref4","withdrawResult","updateBalancesHistory","checkAll","balanceActionStatus","fetchBalanceActionStatus","Done","tokenDetails","Deposit","Success","method","allTokenBalances","fetchSupportedTokens","fetchBalances","forEach","free","total","nondeposited","tokenBalance","used","plus","ids","keySeq","pendingAlert","getAtomicBalances","_ref5","_callee5","_context5","fetchSupportedAtomicTokens","all","fetchAddresses","atomicTokenAddresses","index","tokenBalancesMap","totalBalance","addOrders","updateOrderStatus","updateOrderCancelling","defaultOrderFilter","checkAllOrders","order","OPEN","CONFIRMED","checkOrderStatuses","toCheck","_loop","_ret","orderStatus","v","fetchOrderStatus","SETTLED","fetchMatchDetails","t3","t4","delegateYield","finish","storeWallet","storeAddress","storeURL","login","web3Provider","ethNetwork","logout","reload","updateProvider","setAddress","fetchTraderOrders","fetchBalanceActions","balanceActions","redirect","history","location","replace","lookForLogout","getWeb3","join","blockies","randSeed","Array","rand","t","createColor","buildOpts","opts","newOpts","scale","seed","random","color","bgColor","spotColor","i","charCodeAt","seedRand","renderIcon","canvas","imageData","width","height","dataWidth","mirrorWidth","y","row","x","r","createImageData","sqrt","cc","getContext","fillStyle","fillRect","col","document","createElement","render","Blocky","blocky","getOpts","data-tip","ref","Header","copied","dropdownVisible","showDropdown","hideDropdown","copyToClipboard","handleLogOut","withMenu","pathname","split","loggedIn","onMouseEnter","onMouseLeave","Blocky_Blocky","data-addr","substring","currentTarget","childNodes","getAttribute","dummy","body","appendChild","setAttribute","select","execCommand","removeChild","withRouter","CustomValue","filename","CustomOption","handleMouseDown","stopPropagation","onSelect","option","handleMouseEnter","onFocus","handleMouseMove","isFocused","onMouseDown","onMouseMove","children","SelectMarket","fstCode","sndCode","marketDetails","_this$state2","leftCurrencies","listCurrencies","valueComponent","optionComponent","clearable","backspaceRemoves","deleteRemoves","disabled","listPairs","objectSpread","defineProperty","field","from","Set","first","pair","pairDetails","_TokenDetails$get2","ManageBalances","balanceHistorySize","pendingWithdrawal","fillDeposit","fillWithdraw","handleBlur","item","parsedDepositAmount","parsedWithdrawAmount","depositable","withdrawable","disableDeposit","disableWithdraw","onBlur","minus","lt","selected","_this$state5","maximum","_this$props5","input","traderBook","MarketBanner","marketPrice","fstDetails","sndDetails","updateMarket","SigningPopup","callSign","sign","signing","updateAtomConnectionStatus","refreshAtomConnectionStatus","refreshStatus","authorizeSwapper","_atomConnectedAddress","authorize","popups_SigningPopup","InnerAtomicNotice","handleLinkAtom","atomAction","linkError","linkPending","reconnect","resetStatus","NotAuthorized","AtomNotAuthorized","ChangedSwapper","InvalidSwapper","AtomicNotice","InfoLabel","_React$Component","top","left","iconType","Info","style","_event$currentTarget$","getBoundingClientRect","ViewAtomicBalances","atomConnected","InfoLabel_InfoLabel","ConnectedLocked","ConnectedUnlocked","balanceReadable","usable","usableReadable","ViewBalances","link","usableBalance","accountBalance","readableBalanceText","readableUsableBalanceText","readableAccountBalanceText","TOKEN_URL","Balances","components_MarketBanner","components_Header","components_BalanceBanner","components_ManageBalances","components_ViewBalances","components_ViewAtomicBalances","components_BalanceHistory","OFFSET","Console","bottomElement","scrollToBottom","scrollIntoView","behavior","onClickHandler","level","logs","TradeTokenBanner","leftArrow","spendTokenIcon","receiveTokenIcon","InnerOpenOrderPopup","consoleBottom","renderConfirm","feePercent","_symbol$split","_symbol$split2","spendTokenDetails","receiveTokenDetails","baseTokenDetails","quoteTokenDetails","baseVolume","minBaseVolume","quoteVolume","feeVolume","feeTokenDetails","TradeTokenBanner_TradeTokenBanner","onConfirm","renderOpening","Console_Console","simpleConsole","confirmed","log","skipConfirm","OpenOrderPopup","newOpenOrderPopup","openOrder","minimumVolume","orderType","onSuccess","onError","marketPair","pricepointBN","volumeBN","minimumVolumeBN","openOrderCall","onDismiss","openOrderResult","cancelOrder","_callee7","_context7","close","orderCancelling","cancelOrderCall","_callee6","_ref6","promiEvent","_context6","on","CANCELED","_ref8","SubmittedTrades","receivedOrders","recent","_this4","_this$props2","spendDetails","receiveDetails","fstSymbol","SELL","sndSymbol","receive","spend","renderOrderStatus","handleCancel","FAILED_TO_SETTLE","SLASHED","ExecutedTrades","executedOrders","receivedTokenDetails","spentTokenDetails","receiveAmountReadable","paidAmountReadable","HiddenOrderStatusDisplay","_HiddenOrderStatusDis","setHiddenOrders","getHiddenOrders","fetchOrderbook","limit","HiddenOrderbook","hiddenBook","removeExcessDigits","readable","integerValue","ROUND_FLOOR","readableToBalance","balanceBN","balanceToReadable","NewOrderInputField","_this$props$form","form","errors","dirty","hint","notice","_this$props$field","objectWithoutProperties","react_default","assign","calculateStep","stepFunction","Component","NewOrderInputForm","values","settlementType","nonPriorityVolume","priorityVolume","fillVolume","priorityToken","nonPriorityToken","setAndUpdateValues","_e$target","_e$target2","_this$props3","setValues","calculateNewState","_this$props4","allOrNothing","initialMarketPrice","validateForm","marketChanged","initialMarketPriceChanged","pricepointBigNumber","absoluteMinVolume","calculateAbsoluteMinTradeVolume","_this$props6","isSubmitting","isValid","_this$props7","priorityTokenDetails","nonPriorityTokenDetails","prioritySymbol","nonPrioritySymbol","sellAmount","buyAmount","formik_esm","NewOrderInputField_NewOrderInputField","Fragment","oldState","valueIn","newState","_newState","_this$props8","_sdk$utils","utils","normalizePrice","normalizeVolume","volumeBigNumber","minVolumeBigNumber","max","blur","_this$props9","coerceValues","OuterForm","handleSubmit","formikBag","setSubmitting","resetForm","immediateOrCancel","fillOrKill","LIMIT_IOC","validate","minEthereumTradeVolume","sellToken","whichVolume","sellBalance","sellVolume","sellTokenDetails","priorityVolumeBigNumber","nonPriorityDetails","volumeString","handleMoreOptions","checked","dividedBy","showMoreOptions","_this$state3","defaultMarketPrice","initialValues","components_NewOrderInputForm","NewOrderInputs","InnerWrapBitcoin","checkDisable","inputValue","swap","unwrap","res","btcTokenDetails","wbtcTokenDetails","isNaN","isFinite","spendBalance","WrapBitcoin","NewOrder","mounted","newOrder","settlement","components_SelectMarket","Exchange","params","components_NewOrder","components_SubmittedTrades","components_ExecutedTrades","components_HiddenOrderbook","agreeToTerms","TermsPopup","scrollBottom","handleScroll","handleAgreement","onScroll","scrollHeight","scrollTop","clientHeight","TermsPopupConnect","SelectWeb3Account","referrer","attemptVerification","onSelectAccount","selectedAccountIndex","axios","post","ingress","verified","account","data-item","VerificationPopup","handler","openWyreHandler","open","Wyre","Widget","accountId","WYRE_KEY","auth","operation","onExit","callbackURL","protocol","host","KYBER_KEY","WalletItem","handleSelectWallet","walletDetails","providerAccounts","cancel","canceled","popups_VerificationPopup","ethNetworkLabel","popups_SelectWeb3Account","getParameterByName","Wallets","listWallets","components_WalletItem","popups_TermsPopup","Home","checkingVerification","kyberVerification","kyberUID","handleForwardLogin","components_Wallets","authCode","redirectURL","request","grant_type","redirect_uri","client_id","uid","lowerCaseAddresses","active_wallets","kyc_status","results","exec","decodeURIComponent","LoggingOut","Orders","Popup","_this$props$popup","updatePrices","storeSDK","storeSDKData","ScrollToTop","ScrollToTopWithoutRouter","prevProps","scrollTo","App","setupLoopsTimeout","callGetBalancesTimeout","callHiddenOrdersTimeout","callUpdatePricesTimeout","callLookForLogoutTimeout","callConnectToAtomTimeout","callUpdateAtomStatusTimeout","callGetAtomicBalancesTimeout","callCheckOrderStatusesTimeout","callCheckRenExExecutionTimeout","callUpdateBalancesHistoryTimeout","checkingReLogin","handleReLogin","setupLoops","callLookForLogout","_this2$props","callGetBalances","_this2$props2","callUpdateAtomStatus","callGetAtomicBalances","callHiddenOrders","callUpdateBalancesHistory","count","_this2$props3","callUpdatePrices","_ref7","_callee8","_context8","callCheckOrderStatuses","_callee9","_this2$props4","_context9","component","pages_LoggingOut","Redirect","Router","Route","exact","withAccount","components_Alerts","components_Popup","fetchDarknodeFeePercent","fetchWrappingFeePercent","fetchMinEthTradeVolume","fetchMarkets","_ref11","_ref12","rootReducer","combineReducers","getType","alertActions","payload","pendingAlertActions","_action$payload","alertID","delete","balancesActions","hiddenBookActions","inputsActions","marketActions","popupActions","documentElement","classList","add","remove","traderBookActions","toAdd","accountActions","atomicActions","termsActions","walletActions","sdkActions","assert","traderTransform","createTransform","inboundState","serialize","outboundState","deserialize","whitelist","persistConfig","storage","transforms","middlewares","thunk","config","reducer","persistedReducer","persistReducer","src_store","src_persistor","createStore","applyMiddleware","persistor","persistStore","configureStore","dsn","SENTRY_DSN","environment","network","ReactDOM","es","integration_react","components_App","getElementById","module","exports","p","./btc.svg","./dgx.svg","./eth.svg","./omg.svg","./ren.svg","./tusd.svg","./wbtc.png","./wbtc.svg","./zrx.svg","webpackContext","req","webpackContextResolve","keys"],"mappings":"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","file":"static/js/main.55a86ba2.chunk.js","sourcesContent":["import { Provider } from \"web3/providers\";\n\nimport { WalletDetail } from \"../../lib/wallets/wallet\";\n\nexport const ErrorNoMetaMask = \"Please ensure you have MetaMask installed\";\nexport const ErrorMetaMaskLocked = \"Please unlock your MetaMask wallet\";\nexport const ErrorMetaMaskAccessRejected = \"Please allow RenEx to access your MetaMask wallet\";\n\nexport const MetaMask: WalletDetail = {\n    name: \"MetaMask\",\n    slug: \"metamask\",\n    description: \"Sign in using the MetaMask extension or a Web3 browser\",\n    enabled: true,\n    getWeb3Provider: async (): Promise<[Provider, string[] | null]> => {\n        const provider = await getInjectedWeb3Provider();\n        return [provider, null];\n    },\n};\n\nexport const getInjectedWeb3Provider = async (): Promise<Provider> => {\n    if (window.ethereum) {\n        try {\n            await window.ethereum.enable();\n            return window.ethereum;\n        } catch (error) {\n            throw new Error(ErrorMetaMaskAccessRejected);\n        }\n    }\n    else if (window.web3) {\n        return window.web3.currentProvider;\n    }\n    throw new Error(ErrorNoMetaMask);\n};\n","import { createStandardAction } from \"typesafe-actions\";\n\nexport interface SetPopupPayload { popup: JSX.Element; dismissible?: boolean; onCancel(): void; }\nexport type SetPopupAction = (payload: SetPopupPayload) => void;\nexport const setPopup = createStandardAction(\"SET_POPUP\")<SetPopupPayload>();\n\nexport type ClearPopupAction = () => void;\nexport const clearPopup = createStandardAction(\"CLEAR_POPUP\")();\n","import * as React from \"react\";\n\nimport { Creatable, Option } from \"react-select\";\nimport { Provider } from \"web3/providers\";\n\nimport Loading from \"../../components/Loading\";\n\ninterface LedgerPopupProps {\n    address?: string;\n    checkConnection(args: { derivation: string }): Promise<[Provider, string[]]>;\n    resolve(args: [Provider, string[] | null]): void;\n    reject(reason: Error): void;\n}\n\ninterface LedgerPopupState {\n    loading: boolean;\n    error: string | null;\n    // tslint:disable-next-line:no-any\n    derivation: Option<string>;\n}\n\n// \"44'/1'\", \"44'/60'\", \"44'/61'\"\nconst derivationRegex = new RegExp(/^m\\/(44'\\/(?:0?1|60|61)')(\\/\\d\\d?'?)*$/);\n\nconst options: Array<Option<string>> = [\n    { value: \"m/44'/60'/0'/0\", label: \"Default Derivation - m/44'/60'/0'/0\" },\n    // { value: \"m/44'/60'/0'/0/0\", label: \"Ledger Live App - m/44'/60'/0'/0/0\" },\n    { value: \"m/44'/1'/0'/0\", label: \"Testnet - m/44'/1'/0'/0\" },\n];\n\n/**\n * LedgerPopup is a popup component that prompts a user for a JSON file and a\n * password\n */\nclass LedgerPopup extends React.Component<LedgerPopupProps, LedgerPopupState> {\n    constructor(props: LedgerPopupProps) {\n        super(props);\n        this.state = {\n            loading: false,\n            error: null,\n            derivation: options[0],\n        };\n    }\n\n    public componentDidMount() {\n        //\n    }\n\n    public render(): JSX.Element {\n        const { error, loading } = this.state;\n        // const { address } = this.props;\n\n        return (\n            <div className=\"popup ledger\">\n                <div>\n                    <h2>Connect to Ledger Wallet</h2>\n\n                    <div className=\"ledger--instructions\">\n                        <p>Before connecting to your Ledger, make sure you have:</p>\n                        <ol>\n                            <li>Connected and unlocked your Ledger</li>\n                            <li>Opened the Ethereum app on the device</li>\n                            <li>Enabled browser and data support</li>\n                        </ol>\n                    </div>\n\n                    {error !== null ? <p className=\"red\">{error}</p> : null}\n                    <form onSubmit={this.handleUnlock}>\n\n                        <Creatable value={this.state.derivation}\n                            onChange={this.handleChange}\n                            options={options}\n                            isValidNewOption={this.validatePath}\n                        />\n\n                        <button type=\"submit\">{loading === true ? <Loading /> : \"Connect\"}</button>\n                    </form>\n                </div>\n            </div>\n        );\n    }\n\n    private validatePath = (arg: { label: string }): boolean => {\n        return derivationRegex.test(arg.label);\n    }\n\n    // tslint:disable-next-line:no-any\n    private handleChange = (derivation: any) => {\n        this.setState({ derivation });\n    }\n\n    // private handleInput = (event: React.FormEvent<HTMLInputElement>): void => {\n    //     const element = (event.target as HTMLInputElement);\n    //     this.setState((current) => ({ ...current, [element.name]: element.value }));\n    // }\n\n    // private handleUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    //     if (event.target.files === null || event.target.files.length === 0) {\n    //         return;\n    //     }\n    //     const f = event.target.files[0];\n\n    //     const reader = new FileReader();\n\n    //     // Closure to capture the file information.\n    //     reader.onload = ((file) => {\n    //         // tslint:disable-next-line:no-any\n    //         return (eInner: any) => {\n    //             // tslint:disable-next-line:no-any\n    //             let key: any | null;\n    //             try {\n    //                 key = JSON.parse(eInner.target.result);\n    //             } catch (err) {\n    //                 this.setState({ error: \"Please select a valid Ledger file\" });\n    //                 return;\n    //             }\n    //             this.setState({ error: null, Ledger: key });\n    //         };\n    //     })(f);\n\n    //     // Read in the image file as a data URL.\n    //     reader.readAsText(f);\n    // }\n\n    private handleUnlock = async (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n\n        const { checkConnection, resolve } = this.props;\n        const { derivation } = this.state;\n\n        this.setState({ loading: true });\n\n        try {\n            const value = derivation.value;\n            if (!value) {\n                throw new Error(\"Invalid derivation\");\n            }\n            resolve(await checkConnection({ derivation: value }));\n        } catch (error) {\n            if (error.message.match(/invalid transport instance/)) {\n                error = new Error(\"Unable to connect to Ledger.\");\n            } else {\n                error = new Error(error ? error.message || error : \"Unable to connect to Ledger.\");\n            }\n            this.setState({ loading: false, error: error.message });\n            return;\n        }\n    }\n}\n\nexport default LedgerPopup;\n","import * as React from \"react\";\n\nimport Web3 from \"web3\";\n\nimport TransportU2F from \"@ledgerhq/hw-transport-u2f\";\nimport createLedgerSubprovider from \"@ledgerhq/web3-subprovider\";\nimport ProviderEngine from \"web3-provider-engine\";\nimport FetchSubprovider from \"web3-provider-engine/subproviders/fetch\";\nimport NonceSubprovider from \"web3-provider-engine/subproviders/nonce-tracker\";\n\nimport { HttpProvider, Provider } from \"web3/providers\";\n\nimport LedgerPopup from \"../../components/popups/LedgerPopup\";\n\nimport { setPopup } from \"../../actions/popup/popupActions\";\nimport { store } from \"../../index\";\nimport { INFURA_URL, networkData } from \"../../lib/network\";\nimport { ErrorCanceledByUser, PopupPromise, WalletDetail } from \"../../lib/wallets/wallet\";\nimport { getAccounts } from \"../../lib/web3\";\n\nexport const ErrorNoLedger = \"Ledger not detected\";\n\ninterface ProviderEngine extends HttpProvider {\n    start(): void;\n    stop(): void;\n}\n\nconst createProvider = (derivation: string): ProviderEngine => {\n    const engine = new ProviderEngine();\n    const getTransport = () => TransportU2F.create();\n\n    // Remove m/ from start\n    if (derivation.slice(0, 2) === \"m/\") {\n        derivation = derivation.slice(2);\n    }\n\n    const ledger = createLedgerSubprovider(getTransport, {\n        networkId: networkData.ethNetworkId,\n        accountsLength: 5,\n        path: derivation,\n    });\n    engine.addProvider(ledger);\n    engine.addProvider(new NonceSubprovider());\n    engine.addProvider(new FetchSubprovider({ rpcUrl: INFURA_URL }));\n    engine.start();\n    return engine;\n};\n\nconst checkConnection = async (args: { derivation: string }): Promise<[ProviderEngine, string[]]> => {\n    const engine = createProvider(args.derivation);\n    const accounts = await getAccounts(await new Web3(engine));\n    if (!accounts || accounts.length === 0) {\n        throw new Error(\"Unable to read accounts.\");\n    }\n    return [engine, accounts];\n};\n\nexport const Ledger: WalletDetail = {\n    name: \"Ledger\",\n    slug: \"ledger\",\n    description: \"Sign in using your Ledger hardware wallet\",\n    enabled: true,\n    // create a web3 with the ledger device\n    getWeb3Provider: async (address?: string) => PopupPromise<[Provider, string[] | null]>(async (resolve, reject) => {\n\n        store.dispatch(setPopup(\n            {\n                popup: <LedgerPopup resolve={resolve} reject={reject} address={address} checkConnection={checkConnection} />,\n                onCancel: () => { reject(new Error(ErrorCanceledByUser)); }\n            }\n        ));\n    }),\n};\n","import { WalletDetail } from \"../../lib/wallets/wallet\";\n\nimport FakeProvider from \"web3-fake-provider\";\n\nexport const MockAccount = \"0x47D33b27Bb249a2DBab4C0612BF9CaF4C1950855\";\nexport const MockBalance = 0;\nexport const MockSignature =\n    \"0x30755ed65396facf86c53e6217c52b4daebe72aa4941d89635409de4c9c7f9466d4e9aaec7977f05e923889b33c0d0dd27d7226b6e6f56ce737465c5cfd04be400\";\nexport const MockSignature64 = \"MHVe1lOW+s+GxT5iF8UrTa6+cqpJQdiWNUCd5MnH+UZtTpqux5d/BekjiJszwNDdJ9cia25vVs5zdGXFz9BL5AA=\";\n\nexport const MockWallet: WalletDetail = {\n    name: \"MockWallet\",\n    slug: \"mock\",\n    description: \"Mock wallet for testing purposes\",\n    enabled: true,\n    getWeb3Provider: async () => new FakeProvider(),\n};\n","import { getReadOnlyProvider, WalletDetail } from \"../../lib/wallets/wallet\";\n\nexport const PrivateKey: WalletDetail = {\n    name: \"Private Key\",\n    slug: \"key\",\n    description: \"\",\n    enabled: false,\n    getWeb3Provider: () => [getReadOnlyProvider(), null],\n};\n","import { getReadOnlyProvider, WalletDetail } from \"../../lib/wallets/wallet\";\n\n// Unimplemented\nexport const Trezor: WalletDetail = {\n    name: \"Trezor\",\n    slug: \"trezor\",\n    description: \"Sign using your hardware wallet\",\n    enabled: false,\n    getWeb3Provider: () => [getReadOnlyProvider(), null],\n};\n","import Web3 from \"web3\";\nimport ProviderEngine from \"web3-provider-engine\";\nimport FetchSubprovider from \"web3-provider-engine/subproviders/fetch\";\n\nimport { List, Map } from \"immutable\";\nimport { Provider } from \"web3/providers\";\n\nimport { clearPopup } from \"../../actions/popup/popupActions\";\nimport { store } from \"../../index\";\nimport { INFURA_URL } from \"../../lib/network\";\nimport { Keystore } from \"../../lib/wallets/keystore\";\nimport { Ledger } from \"../../lib/wallets/ledger\";\nimport { MockWallet } from \"../../lib/wallets/mockWallet\";\nimport { PrivateKey } from \"../../lib/wallets/privateKey\";\nimport { Trezor } from \"../../lib/wallets/trezor\";\nimport { MetaMask } from \"../../lib/wallets/web3browser\";\n\nexport const ErrorCanceledByUser = \"Transaction canceled\";\nexport const ErrorVerificationFailed = \"Trader verification failed\";\n\nexport enum Wallet {\n    MetaMask,\n    Ledger,\n    Trezor,\n    Keystore,\n    PrivateKey,\n    MockWallet\n}\n\n// This defines the order in which the wallets are rendered\nexport const WalletList = List([Wallet.MetaMask, Wallet.Ledger, Wallet.Keystore, Wallet.Trezor, Wallet.PrivateKey]);\n\nexport interface WalletDetail {\n    name: string;\n    slug: string; // Slug is used as class name for specifying icons in _wallets.scss\n    description: string;\n    enabled: boolean;\n    getWeb3Provider(address?: string): Promise<[Provider, string[] | null]> | [Provider, string[] | null];\n}\n\n\nexport const getReadOnlyWeb3 = (): Web3 => new Web3(getReadOnlyProvider());\n\nexport const getReadOnlyProvider = (): Provider => {\n    const engine = new ProviderEngine();\n    engine.addProvider(new FetchSubprovider({ rpcUrl: INFURA_URL }));\n    engine.start();\n    return engine;\n};\n\nexport function PopupPromise<T>(fn: (resolve: (value?: T | PromiseLike<T>) => void, reject: (reason?: Error) => void) => void): Promise<T> {\n    return new Promise((resolve, reject) => {\n\n        const innerReject: (reason?: Error) => void = (reason) => {\n            store.dispatch(clearPopup());\n            reject(reason);\n        };\n        const innerResolve: (value?: T | PromiseLike<T>) => void = (reason) => {\n            store.dispatch(clearPopup());\n            resolve(reason);\n        };\n        fn(innerResolve, innerReject);\n    });\n}\n\nexport const WalletDetails: Map<Wallet, WalletDetail> = Map<Wallet, WalletDetail>()\n    .set(Wallet.MetaMask, MetaMask)\n    .set(Wallet.Ledger, Ledger)\n    .set(Wallet.Keystore, Keystore)\n    .set(Wallet.Trezor, Trezor)\n    .set(Wallet.MockWallet, MockWallet)\n    .set(Wallet.PrivateKey, PrivateKey);\n","import * as React from \"react\";\n\ninterface LoadingProps {\n    alt?: boolean;\n}\n\ninterface LoadingState {\n}\n\n/**\n * Loading is a visual component that renders a spinning animation\n */\nclass Loading extends React.Component<LoadingProps, LoadingState> {\n    public render(): JSX.Element {\n        const { alt } = this.props;\n        return (\n            <div className={`loading lds-dual-ring ${alt ? \"alt\" : \"\"}`} />\n        );\n    }\n}\n\nexport default Loading;\n","import { NetworkData } from \"@renex/renex\";\n\nexport const networkData: NetworkData = window.NETWORK;\n\nexport const INFURA_URL = `${networkData.infura}/${window.INFURA_KEY}`;\n","import * as ethereumjsWallet from \"ethereumjs-wallet\";\nimport * as React from \"react\";\n\nimport WalletSubprovider from \"ethereumjs-wallet/provider-engine\";\nimport ProviderEngine from \"web3-provider-engine\";\nimport FetchSubprovider from \"web3-provider-engine/subproviders/fetch\";\nimport NonceSubprovider from \"web3-provider-engine/subproviders/nonce-tracker\";\n\nimport { Provider } from \"web3/providers\";\n\nimport KeystorePopup from \"../../components/popups/KeystorePopup\";\n\nimport { setPopup } from \"../../actions/popup/popupActions\";\nimport { store } from \"../../index\";\nimport { INFURA_URL } from \"../../lib/network\";\nimport { ErrorCanceledByUser, PopupPromise, WalletDetail } from \"../../lib/wallets/wallet\";\n\nconst KeystoreUnlockError = \"Unable to retrieve account from keystore\";\nconst UnsupportedKeystoreError = \"Unsupported keystore format\";\nconst KeystorePasswordError = \"Unable to unlock keystore - the password may be wrong\";\n\nexport const Keystore: WalletDetail = {\n    name: \"Keystore File\",\n    slug: \"keystore\",\n    description: \"Sign in using a Keystore JSON file\",\n    enabled: true,\n    // create a web3 with the ledger device\n    getWeb3Provider: async (address?: string) => PopupPromise<[Provider, string[] | null]>(async (resolve, reject) => {\n\n        // tslint:disable-next-line:no-any\n        const { keystore, password } = await new Promise(async (innerResolve: (value: { keystore: any; password: string }) => void) => {\n            store.dispatch(setPopup(\n                {\n                    popup: <KeystorePopup resolve={innerResolve} reject={reject} address={address} />,\n                    onCancel: () => { reject(new Error(ErrorCanceledByUser)); }\n                }\n            ));\n        });\n\n        if (keystore.Crypto && !keystore.crypto) {\n            keystore.crypto = keystore.Crypto;\n        }\n\n        const version = parseInt(keystore.version, 10);\n\n        // tslint:disable-next-line:no-any\n        let wallet: any;\n        try {\n            if (version === 1) {\n                wallet = ethereumjsWallet.fromV1(keystore, password);\n            } else if (version === 3) {\n                wallet = ethereumjsWallet.fromV3(keystore, password);\n            } else if (keystore.privateKey) {\n                let privateKey = keystore.privateKey;\n                if (privateKey.slice(0, 2) === \"0x\") {\n                    privateKey = privateKey.slice(2);\n                }\n                wallet = ethereumjsWallet.fromPrivateKey(new Buffer(privateKey, \"hex\"));\n            } else {\n                throw new Error(UnsupportedKeystoreError);\n            }\n\n            if (!wallet) {\n                throw new Error(KeystoreUnlockError);\n            }\n        } catch (err) {\n            console.error(err);\n            if (err.message === \"Not a V3 wallet\" ||\n                err.message === \"Not a V1 wallet\") {\n                reject(new Error(UnsupportedKeystoreError));\n            } else if (err.message === UnsupportedKeystoreError) {\n                reject(err);\n            } else if (err.message === KeystoreUnlockError) {\n                reject(err);\n            } else {\n                reject(new Error(KeystorePasswordError));\n            }\n            return;\n        }\n\n        wallet.getAddressesString = (() => `0x${wallet.getAddress().toString(\"hex\")}`);\n\n        const walletProvider = new WalletSubprovider(wallet, {});\n\n        const engine = new ProviderEngine();\n        engine.addProvider(walletProvider);\n        engine.addProvider(new NonceSubprovider());\n        engine.addProvider(new FetchSubprovider({ rpcUrl: INFURA_URL }));\n        engine.start();\n        resolve([engine, null]);\n    }),\n};\n","import * as React from \"react\";\n\nimport Loading from \"../../components/Loading\";\n\ninterface KeystorePopupProps {\n    address?: string;\n    resolve(value: { keystore: object; password: string }): void;\n    reject(reason: Error): void;\n}\n\ninterface KeystorePopupState {\n    error: string | null;\n    // tslint:disable-next-line:no-any\n    keystore: any | null;\n    loading: boolean;\n    password: string | undefined;\n}\n\n/**\n * KeystorePopup is a popup component that prompts a user for a JSON file and a\n * password\n */\nclass KeystorePopup extends React.Component<KeystorePopupProps, KeystorePopupState> {\n    constructor(props: KeystorePopupProps) {\n        super(props);\n        this.state = {\n            error: null,\n            keystore: null,\n            loading: false,\n            password: \"\",\n        };\n    }\n\n    public componentDidMount() {\n        //\n    }\n\n    public render(): JSX.Element {\n        const { error, password, loading } = this.state;\n        const { address } = this.props;\n\n        return (\n            <div className=\"popup keystore\">\n                <div>\n                    <h2>\n                        {address ?\n                            `Log in to ${address}` :\n                            \"Select an account:\"\n                        }\n                    </h2>\n                    <form onSubmit={this.handleUnlock}>\n                        <input type=\"file\" name=\"files[]\" onChange={this.handleUpload} />\n                        <input\n                            type=\"password\" name=\"password\" placeholder=\"Password (optional)\" value={password} onChange={this.handleInput}\n                        />\n                        <button type=\"submit\">{loading === true ? <Loading /> : \"Unlock\"}</button>\n                    </form>\n                    {error !== null ? <p className=\"red\">{error}</p> : null}\n                </div>\n            </div>\n        );\n    }\n\n    private handleInput = (event: React.FormEvent<HTMLInputElement>): void => {\n        const element = (event.target as HTMLInputElement);\n        this.setState((current) => ({ ...current, [element.name]: element.value }));\n    }\n\n    private handleUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n        if (event.target.files === null || event.target.files.length === 0) {\n            return;\n        }\n        const f = event.target.files[0];\n\n        const reader = new FileReader();\n\n        // Closure to capture the file information.\n        reader.onload = ((file) => {\n            // tslint:disable-next-line:no-any\n            return (eInner: any) => {\n                // tslint:disable-next-line:no-any\n                let key: any | null;\n                try {\n                    key = JSON.parse(eInner.target.result);\n                } catch (err) {\n                    this.setState({ error: \"Please select a valid Keystore file\" });\n                    return;\n                }\n                this.setState({ error: null, keystore: key });\n            };\n        })(f);\n\n        // Read in the image file as a data URL.\n        reader.readAsText(f);\n    }\n\n    private handleUnlock = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        if (!this.state.keystore) {\n            console.error(\"Invalid keystore\");\n            return;\n        }\n        this.setState({ loading: true });\n\n        const keystore = this.state.keystore;\n        const password: string = (this.state.password === undefined) ?\n            \"\" :\n            this.state.password;\n\n        this.props.resolve({\n            keystore,\n            password,\n        });\n    }\n}\n\nexport default KeystorePopup;\n","import BN from \"bn.js\";\nimport Web3 from \"web3\";\n\nimport { Transaction } from \"@renex/renex\";\nimport PromiEvent from \"web3/promiEvent\";\n\nexport function getAccounts(web3: Web3): Promise<string[]> {\n    return web3.eth.getAccounts();\n}\n\nexport function getNetwork(web3: Web3): Promise<string> {\n    // tslint:disable-next-line:no-any\n    return (web3.eth.net as any).getNetworkType();\n}\n\nexport function getBalance(web3: Web3, address: string): Promise<BN> {\n    return web3.eth.getBalance(address);\n}\n\nexport function includesAddress(web3: Web3, address: string): Promise<boolean> {\n    return getAccounts(web3).then((accounts: string[]) => {\n        return accounts.map(acc => acc.toLowerCase()).includes(address.toLowerCase());\n    });\n}\n","import { createBrowserHistory } from \"history\";\n\nexport default createBrowserHistory();\n","import { createStandardAction } from \"typesafe-actions\";\n\nimport { Alert } from \"../../reducers/types\";\n\n/**\n * Adds a new alert to the alert stack\n * @param {{ alert: Alert }} payload - the alert to be added to the stack\n */\ninterface SetAlertPayload { alert: Alert; }\nexport type SetAlertAction = (payload: SetAlertPayload) => void;\nexport const setAlert = createStandardAction(\"SET_ALERT\")<SetAlertPayload>();\n\n/**\n * Remove the top alert from the alert stack\n */\nexport type ClearAlertAction = () => void;\nexport const clearAlert = createStandardAction(\"CLEAR_ALERT\")();\n","import * as React from \"react\";\n\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { bindActionCreators } from \"redux\";\n\nimport { clearAlert, ClearAlertAction } from \"../actions/alert/alertActions\";\nimport { Alert, ApplicationData } from \"../reducers/types\";\n\ninterface AlertsProps {\n    alert: Alert;\n    actions: {\n        clearAlert: ClearAlertAction;\n    };\n}\n\ninterface AlertsState {\n}\n\n/**\n * Alerts is a visual component for displaying general alert messages.\n * Alerts can represent an Error, a Warning or a Success event.\n */\nclass Alerts extends React.Component<AlertsProps, AlertsState> {\n    private alertInterval: NodeJS.Timer | undefined;\n\n    public constructor(props: AlertsProps, context: object) {\n        super(props, context);\n        this.handleClose = this.handleClose.bind(this);\n    }\n\n    public componentWillReceiveProps(nextProps: AlertsProps): void {\n        const { message } = nextProps.alert;\n        if (message === null || message === this.props.alert.message) {\n            return;\n        }\n\n        // Hide alert after 10 seconds.\n        if (this.alertInterval) { clearTimeout(this.alertInterval); }\n        this.alertInterval = setTimeout(() => {\n            this.props.actions.clearAlert();\n        }, 10 * 1000);\n    }\n\n    public render(): JSX.Element | null {\n        const { message } = this.props.alert;\n        const { alertType } = this.props.alert;\n        if (message === \"\") {\n            return null;\n        }\n        return (\n            <div role=\"alert\" className={`alert ${alertType}`}>\n                <span className=\"alert--message\">{message}</span>\n                <span role=\"button\" className=\"alert--cross\" onClick={this.handleClose}>&#x00D7;</span>\n            </div>\n        );\n    }\n\n    private handleClose(): void {\n        if (this.alertInterval) { clearInterval(this.alertInterval); }\n        this.props.actions.clearAlert();\n    }\n}\n\nfunction mapStateToProps(state: ApplicationData) {\n    return {\n        alert: state.alert.alert\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch): { actions: AlertsProps[\"actions\"] } {\n    return {\n        actions: bindActionCreators({\n            clearAlert,\n        }, dispatch)\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Alerts);\n","import BigNumber from \"bignumber.js\";\n\nimport { List, Map, OrderedMap } from \"immutable\";\n\nimport { OrderSettlement, Token, TokenCode } from \"@renex/renex\";\n\nimport { networkData } from \"./network\";\n\nexport interface PairDetails {\n    code: Pair;\n    orderSettlement: OrderSettlement;\n    quoteToken: TokenCode;\n    baseToken: TokenCode;\n    category?: TokenCode; // Force the pair to be shown under a specific token\n    fixedPrice?: BigNumber;\n}\n\nexport enum Pair {\n    BTC_WBTC = 0x0000000000000002,\n    BTC_ETH = 0x0000000000000001,\n    ETH_DGX = 0x0000000100000100,\n    ETH_TUSD = 0x0000000100000101,\n    ETH_REN = 0x0000000100010000,\n    ETH_ZRX = 0x0000000100010001,\n    ETH_OMG = 0x0000000100010002,\n}\n\nexport const Pairs: OrderedMap<Pair, PairDetails> = OrderedMap<Pair, PairDetails>()\n    // RenExAtomic:\n    .set(Pair.BTC_ETH, {\n        code: Pair.BTC_ETH,\n        orderSettlement: OrderSettlement.RenExAtomic,\n        quoteToken: Token.BTC,\n        baseToken: Token.ETH,\n        category: Token.BTC,\n    })\n    .set(Pair.BTC_WBTC, {\n        code: Pair.BTC_WBTC,\n        orderSettlement: OrderSettlement.RenExAtomic,\n        quoteToken: Token.BTC,\n        baseToken: Token.WBTC,\n        category: Token.BTC,\n        fixedPrice: new BigNumber(1),\n    })\n    // RenEx:\n    .set(Pair.ETH_DGX, {\n        code: Pair.ETH_DGX,\n        orderSettlement: OrderSettlement.RenEx,\n        quoteToken: Token.ETH,\n        baseToken: Token.DGX,\n    })\n    .set(Pair.ETH_TUSD, {\n        code: Pair.ETH_TUSD,\n        orderSettlement: OrderSettlement.RenEx,\n        quoteToken: Token.ETH,\n        baseToken: Token.TUSD,\n    })\n    .set(Pair.ETH_REN, {\n        code: Pair.ETH_REN,\n        orderSettlement: OrderSettlement.RenEx,\n        quoteToken: Token.ETH,\n        baseToken: Token.REN,\n    })\n    .set(Pair.ETH_ZRX, {\n        code: Pair.ETH_ZRX,\n        orderSettlement: OrderSettlement.RenEx,\n        quoteToken: Token.ETH,\n        baseToken: Token.ZRX,\n    })\n    .set(Pair.ETH_OMG, {\n        code: Pair.ETH_OMG,\n        orderSettlement: OrderSettlement.RenEx,\n        quoteToken: Token.ETH,\n        baseToken: Token.OMG,\n    });\n\nexport interface TokenDetail {\n    name: string;\n    symbol: string;\n    icon: string;\n    address: string;\n    pairs: OrderedMap<TokenCode, Pair>;\n    digits: number;\n    cmcID: number; // CoinMarketCap ID\n    coingeckoID: string; // CoinCap ID\n    settlements: OrderSettlement[];\n    offChain?: boolean; // Off-chain implies that fees must be paid in the other token\n}\n\nexport let TokenDetails: Map<TokenCode, TokenDetail> = Map();\n\nexport const UnknownToken: TokenDetail = {\n    name: \"Unknown\",\n    symbol: \"???\",\n    icon: \"\",\n    address: \"0x0000000000000000000000000000000000000000\",\n    pairs: OrderedMap(),\n    digits: 0,\n    cmcID: 0,\n    coingeckoID: \"\",\n    settlements: [],\n    offChain: false,\n};\n\nTokenDetails = TokenDetails.set(Token.BTC, {\n    name: \"Bitcoin\",\n    symbol: \"BTC\",\n    icon: \"btc.svg\",\n    address: \"\",\n    pairs: OrderedMap<Token, Pair>()\n        .set(Token.ETH, Pair.BTC_ETH)\n        .set(Token.WBTC, Pair.BTC_WBTC),\n    digits: 8,\n    cmcID: 1,\n    coingeckoID: \"bitcoin\",\n    settlements: [OrderSettlement.RenExAtomic],\n    offChain: true,\n});\n\nTokenDetails = TokenDetails.set(Token.ETH, {\n    name: \"Ethereum\",\n    symbol: \"ETH\",\n    icon: \"eth.svg\",\n    address: \"0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\",\n    pairs: OrderedMap<TokenCode, Pair>()\n        .set(Token.DGX, Pair.ETH_DGX)\n        .set(Token.TUSD, Pair.ETH_TUSD)\n        .set(Token.REN, Pair.ETH_REN)\n        .set(Token.OMG, Pair.ETH_OMG)\n        .set(Token.ZRX, Pair.ETH_ZRX)\n    ,\n    digits: 18,\n    cmcID: 1027,\n    coingeckoID: \"ethereum\",\n    settlements: [OrderSettlement.RenEx, OrderSettlement.RenExAtomic],\n});\n\nTokenDetails = TokenDetails.set(Token.WBTC, {\n    name: \"Wrapped Bitcoin\",\n    symbol: \"WBTC\",\n    icon: \"wbtc.svg\",\n    address: \"\",\n    pairs: OrderedMap<Token, Pair>(),\n    digits: 8,\n    cmcID: 1, // for now, we use bitcoin price because WBTC isn't tracked yet\n    coingeckoID: \"bitcoin\",\n    settlements: [OrderSettlement.RenExAtomic],\n    offChain: true,\n});\n\nTokenDetails = TokenDetails.set(Token.DGX, {\n    name: \"Digix Gold Token\",\n    symbol: \"DGX\",\n    icon: \"dgx.svg\",\n    address: networkData.tokens.DGX,\n    pairs: OrderedMap<TokenCode, Pair>(),\n    digits: 9,\n    cmcID: 2739,\n    coingeckoID: \"digix-gold\",\n    settlements: [OrderSettlement.RenEx],\n});\n\nTokenDetails = TokenDetails.set(Token.REN, {\n    name: \"Republic Protocol\",\n    symbol: \"REN\",\n    icon: \"ren.svg\",\n    address: networkData.tokens.REN,\n    pairs: OrderedMap<TokenCode, Pair>(),\n    digits: 18,\n    cmcID: 2539,\n    coingeckoID: \"republic-protocol\",\n    settlements: [OrderSettlement.RenEx],\n});\n\nTokenDetails = TokenDetails.set(Token.TUSD, {\n    name: \"TrueUSD\",\n    symbol: \"TUSD\",\n    icon: \"tusd.svg\",\n    address: networkData.tokens.TUSD,\n    pairs: OrderedMap<TokenCode, Pair>(),\n    digits: 18,\n    cmcID: 2563,\n    coingeckoID: \"true-usd\",\n    settlements: [OrderSettlement.RenEx],\n});\n\nTokenDetails = TokenDetails.set(Token.OMG, {\n    name: \"OmiseGo\",\n    symbol: \"OMG\",\n    icon: \"omg.svg\",\n    address: networkData.tokens.OMG,\n    pairs: OrderedMap<Token, Pair>(),\n    digits: 18,\n    cmcID: 1808,\n    coingeckoID: \"omisego\",\n    settlements: [OrderSettlement.RenEx],\n});\n\nTokenDetails = TokenDetails.set(Token.ZRX, {\n    name: \"0x\",\n    symbol: \"ZRX\",\n    icon: \"zrx.svg\",\n    address: networkData.tokens.ZRX,\n    pairs: OrderedMap<TokenCode, Pair>(),\n    digits: 18,\n    cmcID: 1896,\n    coingeckoID: \"0x\",\n    settlements: [OrderSettlement.RenEx],\n});\n\n/**\n * Retrieves the current pricepoint for two currencies.\n * @param fstCode The first currency.\n * @param sndCode The second currency.\n * @returns An array containing the price with respect to the currencies, and the 24 hour percent change.\n */\nexport async function getPrice(quoteCode: TokenCode, baseCode: TokenCode): Promise<[number, number]> {\n    const quoteDetails = TokenDetails.get(quoteCode, undefined);\n    const baseDetails = TokenDetails.get(baseCode, undefined);\n\n    if (quoteDetails === undefined || baseDetails === undefined) {\n        return [0, 0];\n    }\n\n    const url = `https://api.coingecko.com/api/v3/coins/${baseDetails.coingeckoID}?localization=false&tickers=false&market_data=true&community_data=false&developer_data=false&sparkline=false`;\n    const response = await fetch(url);\n    const data = await response.json();\n    let price: number | null = data.market_data.current_price[quoteDetails.symbol.toLowerCase()];\n    let percentChange: number | null = data.market_data.price_change_percentage_24h_in_currency[quoteDetails.symbol.toLowerCase()];\n    if (percentChange === null) {\n        percentChange = 0;\n    }\n    if (price === null) {\n        price = 0;\n    }\n    return [price, percentChange];\n}\n\nexport const RenExTokens = (tokens: List<TokenCode>) => tokens.filter((token: TokenCode) => {\n    // If token is not found, use UnknownToken which has no settlements\n    return TokenDetails.get(token, UnknownToken).settlements.indexOf(OrderSettlement.RenEx) !== -1;\n}).toList();\n\nexport const RenExAtomicTokens = (tokens: List<TokenCode>) => tokens.filter((token: TokenCode) => {\n    // If token is not found, use UnknownToken which has no settlements\n    return TokenDetails.get(token, UnknownToken).settlements.indexOf(OrderSettlement.RenExAtomic) !== -1;\n}).toList();\n","import { createStandardAction } from \"typesafe-actions\";\n\nimport { Pair } from \"../../lib/market\";\nimport { BalanceInputs, OrderInputs } from \"../../reducers/types\";\n\n/**\n * Updates the current market (token pair, e.g. ETH/REN)\n * @param  {{ market: Pair }} payload - the market being set\n */\ninterface SetMarketPayload { market: Pair; }\nexport type SetMarketAction = (payload: SetMarketPayload) => void;\nexport const setMarket = createStandardAction(\"SET_MARKET\")<SetMarketPayload>();\n\n/**\n * Updates the NewOrder inputs\n * @param  {{ orderInputs: OrderInputs }} payload\n */\ninterface SetOrderPayload { orderInputs: OrderInputs; }\nexport type SetOrderAction = (payload: SetOrderPayload) => void;\nexport const setOrder = createStandardAction(\"SET_ORDER\")<SetOrderPayload>();\n\n/**\n * Updates the ManageBalance inputs\n * @param  {{ orderInputs: OrderInputs }} payload\n */\ninterface SetBalancePayload { balanceInputs: BalanceInputs; }\nexport type SetBalanceAction = (payload: SetBalancePayload) => void;\nexport const setBalance = createStandardAction(\"SET_BALANCE\")<SetBalancePayload>();\n","import BigNumber from \"bignumber.js\";\n\nimport * as React from \"react\";\n\nimport { Iterable, List, OrderedMap } from \"immutable\";\nimport { connect } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport { bindActionCreators } from \"redux\";\nimport { Dispatch } from \"redux\";\n\nimport RenExSDK, { OrderSettlement, Token, TokenCode } from \"@renex/renex\";\n\nimport { setBalance, SetBalanceAction } from \"../actions/inputs/inputsActions\";\nimport { balanceToReadable } from \"../lib/balances\";\nimport { Pair, Pairs, RenExAtomicTokens, RenExTokens, TokenDetails, UnknownToken } from \"../lib/market\";\nimport { ApplicationData, BalanceInputs } from \"../reducers/types\";\n\ninterface StoreProps {\n    sdk: RenExSDK;\n    market: Pair;\n    supportedTokens: List<TokenCode>;\n    supportedAtomicTokens: List<TokenCode>;\n    balanceInputs: BalanceInputs;\n    usableBalances: OrderedMap<TokenCode, BigNumber | null>;\n    usableAtomicBalances: OrderedMap<TokenCode, BigNumber | null>;\n}\n\ninterface BalanceBannerProps extends StoreProps {\n    actions: {\n        setBalance: SetBalanceAction;\n    };\n}\n\ninterface BalanceBannerState {\n}\n\n/**\n * BalanceBanner is a visual component for displaying user balances in a banner\n * format\n */\nclass BalanceBanner extends React.Component<BalanceBannerProps, BalanceBannerState> {\n    public render(): JSX.Element {\n        const { sdk, market, usableBalances, usableAtomicBalances, supportedTokens, supportedAtomicTokens } = this.props;\n        const atomic = Pairs.get(market).orderSettlement === OrderSettlement.RenExAtomic;\n        const tokens = RenExTokens(supportedTokens);\n        const atomicTokens = RenExAtomicTokens(supportedAtomicTokens);\n        return (\n            <div className=\"banner\">\n                <div className=\"container\">\n                    <div className=\"banner--details\">\n                        {atomic && sdk.atom.isConnected() ?\n                            <>\n                                <span>Swapperd balances:</span>\n                                <ul>\n                                    {this.listBalances(atomicTokens.toArray(), usableAtomicBalances)}\n                                </ul>\n                            </>\n                            :\n                            <>\n                                <span>Your balances:</span>\n                                <ul>\n                                    {this.listBalances(tokens.toArray(), usableBalances)}\n                                </ul>\n                            </>\n                        }\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    private listBalances(tokens: TokenCode[], balances: Iterable<TokenCode, BigNumber | null>): JSX.Element[] {\n        const list: JSX.Element[] = [];\n        for (const token of tokens) {\n            const balance = balances.get(token, null);\n            const balanceText = (balance !== null) ? balance.toFixed() : \"-\";\n\n            const { symbol, icon } = TokenDetails.get(token, UnknownToken);\n            const image = require(`../tokens/${icon}`);\n\n            list.push(\n                <li key={token}>\n                    <Link to=\"/balances\" onClick={this.handleClick.bind(this, token)}>\n                        <img alt=\"\" role=\"presentation\" src={image} /> {balanceText} {symbol}\n                    </Link>\n                </li>\n            );\n        }\n        return list;\n    }\n\n    private handleClick(currency: TokenCode): void {\n        // Update currency selection on Balances page.\n        const { depositAmount, withdrawAmount } = this.props.balanceInputs;\n        const balanceInputs: BalanceInputs = { currency, depositAmount, withdrawAmount };\n        if (currency && currency !== this.props.balanceInputs.currency) {\n            this.props.actions.setBalance({ balanceInputs });\n        }\n    }\n}\n\nfunction mapStateToProps(state: ApplicationData): StoreProps {\n    return {\n        sdk: state.sdk.sdk,\n        supportedTokens: state.sdk.supportedTokens,\n        supportedAtomicTokens: state.sdk.supportedAtomicTokens,\n        market: state.inputs.market,\n        balanceInputs: state.inputs.balanceInputs,\n        usableBalances: state.trader.usableBalances,\n        usableAtomicBalances: state.trader.usableAtomicBalances,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch): { actions: BalanceBannerProps[\"actions\"] } {\n    return {\n        actions: bindActionCreators({\n            setBalance,\n        }, dispatch)\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BalanceBanner);\n","import moment from \"moment\";\n\nimport BigNumber from \"bignumber.js\";\n\nimport { Token, TokenCode } from \"@renex/renex\";\n\n/**\n * Converts a timestamp to the number of hours, minutes or seconds from now,\n * showing \"Expired\" if the timestamp has already passed.\n *\n * TODO: Make countdown schedule rerender (based on time unit)\n *\n * @param expiry the time to countdown to as a unix timestamp in seconds\n * @returns a JSX span element with the time remaining and a unit\n */\nexport const naturalTime = (expiry: number, options: { message: string, suffix?: string, countDown: boolean, showingSeconds?: boolean }): string => {\n    let diff;\n    if (!options.countDown) {\n        diff = moment.duration(moment().diff(moment.unix(expiry)));\n    } else {\n        diff = moment.duration(moment.unix(expiry).diff(moment()));\n    }\n    let days = diff.asDays();\n    let hours = diff.asHours();\n    let minutes = diff.asMinutes();\n    let seconds = diff.asSeconds();\n\n    const suffix = options.suffix ? ` ${options.suffix}` : \"\";\n\n    if (days > 2) {\n        days = Math.round(days);\n        return `${days} ${days === 1 ? \"day\" : \"days\"}${suffix}`;\n    }\n    if (hours >= 1) {\n        // Round to the closest hour\n        hours = Math.round(hours);\n        return `${hours} ${hours === 1 ? \"hour\" : \"hours\"}${suffix}`;\n    } else if (minutes >= 1) {\n        minutes = Math.round(minutes);\n        return `${minutes} ${minutes === 1 ? \"minute\" : \"minutes\"}${suffix}`;\n    } else if (options.showingSeconds && seconds >= 1) {\n        seconds = Math.floor(seconds);\n        return `${seconds} ${seconds === 1 ? \"second\" : \"seconds\"}${suffix}`;\n    } else {\n        return `${options.message}`;\n    }\n};\n\n// Sleep for specified number of milliseconds\nexport const sleep = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\nexport const second = 1000;\n\nexport enum TimeMagnitude {\n    Second = 1 * second,\n    Minute = 60 * second,\n    Hour = 3600 * second,\n    Day = 86400 * second,\n}\n\n// Returns the the time units in which a time will be represented in by naturalTime\nexport const getTimeMagnitude = (expiry: number, showingSeconds = false): TimeMagnitude => {\n    let diff;\n    if (moment.unix(expiry).isBefore(moment())) {\n        diff = moment.duration(moment().diff(moment.unix(expiry)));\n    } else {\n        diff = moment.duration(moment.unix(expiry).diff(moment()));\n    }\n    const days = diff.asDays();\n    const hours = diff.asHours();\n    const minutes = diff.asMinutes();\n\n    if (days > 2) {\n        return TimeMagnitude.Day;\n    }\n    if (hours >= 1) {\n        return TimeMagnitude.Hour;\n    } else if (minutes >= 1 || !showingSeconds) {\n        return TimeMagnitude.Minute;\n    } else {\n        return TimeMagnitude.Second;\n    }\n};\n\n/**\n * getStep adjusts the specified step to the correct order of magnitude, so\n * when the user is dealing with small or large values, the step scales\n * accordingly\n */\nexport const getStep = (value: BigNumber, step: number): string => {\n    if (value.isZero()) {\n        return new BigNumber(step).toFixed();\n    }\n\n    const digits = -Math.floor(Math.log10(step)) + 1;\n\n    const [, exp] = significantDigits(value, digits, false);\n    const e = new BigNumber(10).pow(exp + (digits - 1));\n    return new BigNumber(step).times(e).toFixed();\n};\n\nexport const getPriceStep = (price: BigNumber): string => {\n    return getStep(price, 0.005);\n};\n\nexport const getVolumeStep = (volume: BigNumber): string => {\n    return getStep(volume, 0.2);\n};\n\nfunction significantDigits(n: BigNumber, digits: number, simplify = false, roundDown = true) {\n    if (n.isEqualTo(0)) {\n        return [0, 0];\n    }\n    let exp = Math.floor(Math.log10(n.toNumber())) - (digits - 1);\n    const pow = new BigNumber(10).exponentiatedBy(new BigNumber(exp).toNumber());\n\n    let c;\n    if (roundDown) {\n        c = Math.floor(n.div(pow.toNumber()).toNumber());\n    } else {\n        c = Math.ceil(n.div(pow.toNumber()).toNumber());\n    }\n\n    if (simplify) {\n        while (c % 10 === 0 && c !== 0) {\n            c = c / 10;\n            exp++;\n        }\n    }\n    return [c, exp];\n}\n","import * as React from \"react\";\n\ninterface HeadingProps {\n    title: JSX.Element | string;\n    description?: JSX.Element | string;\n}\n\ninterface HeadingState {\n}\n\n/**\n * Heading is a visual component for displaying a title above another component\n */\nclass Heading extends React.Component<HeadingProps, HeadingState> {\n    public render(): JSX.Element {\n        const { title, description } = this.props;\n        return (\n            <div className=\"heading\">\n                <h1 className=\"heading--title\">{title}</h1>\n                {description &&\n                    <h2 className=\"heading--description\">({description})</h2>\n                }\n            </div>\n        );\n    }\n}\n\nexport default Heading;\n","import moment from \"moment\";\nimport * as React from \"react\";\n\nimport { OrderedMap } from \"immutable\";\nimport { connect } from \"react-redux\";\n\nimport RenExSDK, { BalanceAction, TransactionStatus } from \"@renex/renex\";\n\nimport Heading from \"./Heading\";\nimport Loading from \"./Loading\";\n\nimport { balanceToReadable } from \"../lib/balances\";\nimport { getTimeMagnitude, naturalTime, TimeMagnitude } from \"../lib/conversion\";\nimport { TokenDetails, UnknownToken } from \"../lib/market\";\nimport { networkData } from \"../lib/network\";\nimport { ApplicationData } from \"../reducers/types\";\n\ninterface StoreProps {\n    balanceHistory: OrderedMap<string, BalanceAction>;\n    sdk: RenExSDK;\n    updateIndex: number;\n}\n\ninterface BalanceHistoryProps extends StoreProps {\n}\n\ninterface BalanceHistoryState {\n    highlightLatest: boolean;\n    receivedBalances: boolean;\n}\n\n/**\n * BalanceHistory is a visual component for displaying previous deposits and\n * withdrawals\n */\nclass BalanceHistory extends React.Component<BalanceHistoryProps, BalanceHistoryState> {\n    public timeout: NodeJS.Timer | undefined;\n    public rerender: NodeJS.Timer | undefined;\n\n    public constructor(props: BalanceHistoryProps, context: object) {\n        super(props, context);\n        this.state = {\n            highlightLatest: false,\n            receivedBalances: false,\n        };\n    }\n\n    public componentWillReceiveProps(nextProps: BalanceHistoryProps): void {\n        // Highlight the latest item if it was just added.\n        if (this.props.balanceHistory.size < nextProps.balanceHistory.size) {\n            if (this.state.receivedBalances) {\n                this.setState({ highlightLatest: true });\n\n                if (this.timeout) { clearTimeout(this.timeout); }\n                this.timeout = setTimeout(() => {\n                    this.setState({ highlightLatest: false });\n                }, 3 * 1000);\n            } else {\n                this.setState({ receivedBalances: true });\n            }\n        }\n    }\n\n    public componentWillUnmount(): void {\n        if (this.timeout) { clearTimeout(this.timeout); }\n        if (this.rerender) { clearTimeout(this.rerender); }\n    }\n\n    public render(): JSX.Element {\n        const { balanceHistory } = this.props;\n        let relevantRows = null;\n        if (balanceHistory.size > 0) {\n            // Find the most precise time being shown (seconds, minutes, hours...)\n            // and rerender to ensure that these times are updated\n            const magnitude = balanceHistory.toArray().map((value: BalanceAction) => getTimeMagnitude(value.time))\n                .reduce((val: number, min: number) => Math.min(val, min), TimeMagnitude.Day);\n\n            if (this.rerender) { clearTimeout(this.rerender); }\n            this.rerender = setTimeout(() => {\n                this.forceUpdate();\n            }, magnitude / 2);\n\n            relevantRows = this.generateRows();\n        }\n        return (\n            <div className=\"section history\">\n                <div className=\"container\">\n                    <Heading title=\"Recent deposits and withdrawals\" />\n                    <div className=\"table--wrapper\">\n                        <table>\n                            <thead>\n                                <tr>\n                                    {/* If any fields are added/removed, the colSpan\n                                below must be modified to reflect this. */}\n                                    <th>Transaction Hash</th>\n                                    <th>Date</th>\n                                    <th>Action</th>\n                                    <th>Amount</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {relevantRows !== null ?\n                                    relevantRows // Output relevant rows\n                                    :\n                                    <tr>\n                                        <td colSpan={4}>No transactions</td>\n                                    </tr>\n                                }\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    private generateRows(): Array<JSX.Element | null> | null {\n        const { balanceHistory, sdk } = this.props;\n        const { highlightLatest } = this.state;\n        let relevantRows = false;\n\n        const rows = balanceHistory.toArray().reverse().map((balanceAction: BalanceAction, key: number) => {\n            // Filter history from other traders (TODO: discuss local storage security)\n            if (balanceAction.trader.toLowerCase() !== sdk.getAddress().toLowerCase()) {\n                return null;\n            }\n            relevantRows = true;\n            const TX_URL = `${networkData.etherscan}/tx/${balanceAction.txHash}`;\n\n            const readableAmount = balanceAction.amount;\n\n            return (\n                <tr key={key} className={`${key === 0 && highlightLatest ? \"recent\" : \"\"} balanceAction--${balanceAction.status}`}>\n                    <td className=\"monospace\">\n                        {balanceAction.status === TransactionStatus.Pending ?\n                            < Loading /> :\n                            \"\"\n                        }\n                        <a href={TX_URL} rel=\"noopener noreferrer\" target=\"_blank\">{balanceAction.txHash}</a>\n                        {balanceAction.status === TransactionStatus.Failed ? <span className=\"red\"> (failed)</span> : \"\"}\n                        {balanceAction.status === TransactionStatus.Replaced ? <span className=\"red\"> (replaced)</span> : \"\"}\n                    </td>\n                    <td title={moment(balanceAction.time * 1000).format(\"MMMM Do YYYY, HH:mm:ss\")}>\n                        <span>{naturalTime(balanceAction.time, { message: \"Just now\", suffix: \"ago\", countDown: false })}</span>\n                    </td>\n                    <td>{balanceAction.action.charAt(0).toUpperCase() + balanceAction.action.slice(1)}</td>\n                    <td>{readableAmount.toFixed()} {TokenDetails.get(balanceAction.token, UnknownToken).symbol}</td>\n                </tr>\n            );\n        });\n        return relevantRows ? rows : null;\n    }\n}\n\nfunction mapStateToProps(state: ApplicationData): StoreProps {\n    return {\n        balanceHistory: state.balanceHistory.balanceHistory,\n        sdk: state.sdk.sdk,\n        updateIndex: state.balanceHistory.updateIndex,\n    };\n}\n\nexport default connect(mapStateToProps)(BalanceHistory);\n","// tslint:disable:no-any\n\nimport * as Immutable from \"immutable\";\n\n/**\n * Create a new class that can be instantiated. All instances of the class\n * will be immutable, and will be guaranteed to have all properties of the\n * interface T. Default values for these properties can be specified. Using\n * the getter and setter methods are type safe.\n *\n * @param data An object defining the default value for instances of the\n *             class that will be returned.\n *\n * @return A class that can be used to instantiate immutable objects.\n */\nexport function Record<T>(data: Pick<T, keyof T>) {\n    // The returned class inherits from the Immutable.Record class, using the\n    // data argument to specify the default property values.\n    return class extends Immutable.Record(data as any) {\n        public constructor(inner?: Partial<T>) {\n            super(Immutable.fromJS(inner || {}));\n        }\n        /**\n         * A type safe getter.\n         *\n         * @param key The name of the property to get. It must be a property that\n         *            exists in T.\n         *\n         * @return The value associated with the property.\n         */\n        public get<K extends string & keyof T, V extends T[K]>(key: K): V {\n            return super.get(key);\n        }\n        /**\n         * A type safe setter.\n         *\n         * @param key The name of the property to set. It must be a property that\n         *            exists in T.\n         *\n         * @return A new instance that has all of the property values of the\n         *         original instance, except for the property value that was set.\n         */\n        public set<K extends string & keyof T, V extends T[K]>(key: K, value: V): this {\n            return super.set(key, value) as this;\n        }\n        /**\n         * A type safe merge.\n         *\n         * @param inner An object of properties, and associated values, that will\n         *              be set.\n         *\n         * @return A new instance that has all of the property values of the\n         *         original instance, except for the property values that were\n         *         merged.\n         */\n        public merge<K extends keyof T, V extends T[K]>(inner: Partial<T> | {\n            [key in K]: V;\n        }): this {\n            return super.merge(inner as any) as this;\n        }\n        public toJS(): any {\n            return super.toJS();\n        }\n    } as any as RecordInterface<T>;\n}\n\n// An interface to which the return class will be cast.\nexport type RecordInterface<T> = new (inner?: Partial<T>) => Props<T> & Methods<T>;\n\n// An interface of the properties that the class will have.\ntype Props<T> = {\n    readonly [P in keyof T]: T[P];\n};\n// An interface of the methods that the class will have.\ninterface Methods<T> {\n    get<K extends keyof T, V extends T[K]>(key: K): V;\n    set<K extends keyof T, V extends T[K]>(key: K, value: V): this;\n    merge<K extends keyof T, V extends T[K]>(inner: Partial<T> | {\n        [key in K]: V;\n    }): this;\n    toJS(): any;\n}\n","// tslint:disable:no-object-literal-type-assertion\n\nimport * as Sentry from \"@sentry/browser\";\n\nimport RenExSDK, { AtomicConnectionStatus, MarketDetails, Order, OrderSettlement, OrderSide, Token, TokenCode } from \"@renex/renex\";\nimport BigNumber from \"bignumber.js\";\nimport Web3 from \"web3\";\n\nimport { List, Map, OrderedMap } from \"immutable\";\n\nimport { Pair } from \"../lib/market\";\nimport { INFURA_URL, networkData } from \"../lib/network\";\nimport { Record } from \"../lib/record\";\nimport { Wallet } from \"../lib/wallets/wallet\";\nimport { BalanceActionRecord, TraderOrderRecord } from \"../reducers/typesSdk\";\n\nexport interface Serializable<T> {\n    serialize(): string;\n    deserialize(str: string): T;\n}\n\nexport interface ApplicationData {\n    hiddenBook: HiddenBookData;\n    traderBook: TraderBookData;\n    balanceHistory: BalanceHistory;\n    trader: TraderData;\n    sdk: SDKData;\n    marketPrices: MarketPriceData;\n    inputs: InputsData;\n    alert: AlertData;\n    popup: PopupData;\n}\n\n// There are some issues with storing prices and volumes as BigNumbers/numbers\n// regarding rerendering, e.g. 0.0 being converted to 0 before the user has the\n// chance to finish typing a decimal number. Hence they are stored as strings.\nexport interface OrderInputs {\n    side: OrderSide;\n    pricepoint: string;\n    volume: string;\n    minVolume: string;\n}\n\nexport interface BalanceInputs {\n    currency: TokenCode;\n    depositAmount: string;\n    withdrawAmount: string;\n}\n\nexport class InputsData extends Record({\n    market: Pair.ETH_REN,\n    orderInputs: {\n        side: OrderSide.BUY,\n        pricepoint: \"\",\n        volume: \"\",\n        minVolume: \"\",\n    } as OrderInputs,\n    balanceInputs: {\n        currency: Token.ETH,\n        depositAmount: new BigNumber(0).toFixed(),\n        withdrawAmount: new BigNumber(0).toFixed(),\n    } as BalanceInputs,\n}) { }\n\nexport class HiddenBookData extends Record({\n    hiddenOrders: null as List<Order> | null,\n}) { }\n\nexport class TraderBookData extends Record({\n    traderOrders: OrderedMap<string, TraderOrderRecord>(),\n    cancelling: Map<string, boolean>(),\n}) { }\n\nexport class BalanceHistory extends Record({\n    updateIndex: 0,\n    balanceHistory: OrderedMap<string, BalanceActionRecord>(),\n}) { }\n\nexport class TraderData extends Record({\n    address: null as string | null,\n    url: null as string | null,\n    agreedToTerms: false,\n\n    wallet: null as Wallet | null,\n    atomicBalances: OrderedMap<TokenCode, BigNumber | null>(),\n    usableAtomicBalances: OrderedMap<TokenCode, BigNumber | null>(),\n    atomicAddresses: OrderedMap<TokenCode, string>(),\n    atomConnectionStatus: AtomicConnectionStatus.NotConnected,\n\n    balances: OrderedMap<TokenCode, BigNumber | null>(),\n    accountBalances: OrderedMap<TokenCode, BigNumber | null>(),\n    usableBalances: OrderedMap<TokenCode, BigNumber | null>(),\n}) implements Serializable<TraderData> {\n    public serialize(): string {\n        return JSON.stringify({\n            address: this.address,\n            agreedToTerms: this.agreedToTerms,\n        });\n    }\n\n    public deserialize(str: string): TraderData {\n        let next = this;\n        try {\n            const data = JSON.parse(str);\n            next = next.set(\"address\", data.address);\n            next = next.set(\"agreedToTerms\", data.agreedToTerms);\n        } catch (err) {\n            console.error(err);\n            Sentry.captureException(`cannot deserialize local storage: ${err}`);\n        }\n        return next;\n    }\n}\n\nwindow.sdk = new RenExSDK(new Web3.providers.HttpProvider(INFURA_URL), networkData);\n\nexport class SDKData extends Record({\n    sdk: window.sdk,\n    supportedTokens: List() as List<TokenCode>,\n    supportedAtomicTokens: List() as List<TokenCode>,\n    supportedMarkets: List() as List<MarketDetails>,\n    minEthTradeVolume: new BigNumber(0),\n    darknodeFeePercent: new BigNumber(0),\n    wrappingFeePercent: new BigNumber(0),\n}) { }\n\nexport type Settlements = OrderedMap<OrderSettlement, boolean>;\n\nexport interface MarketPrice {\n    price: number;\n    percentChange: number;\n}\n\nexport const UnknownMarketPrice: MarketPrice = {\n    price: 0,\n    percentChange: 0,\n};\n\nexport class MarketPriceData extends Record({\n    marketPrices: OrderedMap<Pair, MarketPrice>(),\n}) { }\n\nexport enum AlertType {\n    Error = \"error\",\n    Warning = \"warning\",\n    Success = \"success\"\n}\n\nexport enum LabelType {\n    Info = \"info\",\n    Warning = \"warning\"\n}\n\nexport class Alert extends Record({\n    alertType: AlertType.Warning,\n    message: \"\", // TODO: Allow for links\n}) { }\n\nexport class AlertData extends Record({\n    pendingAlerts: Map<string, () => Promise<void>>(),\n    alert: { message: \"\" } as Alert\n}) { }\n\nexport class PopupData extends Record({\n    popup: null as JSX.Element | null,\n    dismissible: true,\n    onCancel: (() => null) as () => void,\n}) { }\n","import { createStandardAction } from \"typesafe-actions\";\n\n\ninterface AddPendingAlertPayload { id: string; method: () => Promise<void>; }\nexport type AddPendingAlertAction = (payload: AddPendingAlertPayload) => void;\nexport const addPendingAlert = createStandardAction(\"ADD_PENDING_ALERT\")<AddPendingAlertPayload>();\n\ninterface RemovePendingAlertsPayload { ids: string[]; }\nexport type RemovePendingAlertsAction = (payload: RemovePendingAlertsPayload) => void;\nexport const removePendingAlerts = createStandardAction(\"REMOVE_PENDING_ALERTS\")<RemovePendingAlertsPayload>();\n","import * as React from \"react\";\n\nimport { SimpleConsole } from \"@renex/renex\";\n\nimport { SetPopupPayload } from \"../../actions/popup/popupActions\";\nimport { ErrorCanceledByUser } from \"../../lib/wallets/wallet\";\n\ninterface ApprovalPopupProps {\n    call: () => Promise<void>;\n    closePopup: () => void;\n}\n\ninterface ApprovalPopupState {\n    error: Error | null;\n    logCount: number;\n}\n\n/**\n * ApprovalPopup is a popup component that prompts the user to approve a\n * series of Ethereum transactions\n */\nclass ApprovalPopup extends React.Component<ApprovalPopupProps, ApprovalPopupState> {\n\n    constructor(props: ApprovalPopupProps) {\n        super(props);\n        this.state = {\n            error: null,\n            logCount: 0,\n        };\n    }\n\n    public async componentDidMount() {\n        const { call } = this.props;\n\n        await call()\n            .catch((error) => {\n                console.error(error);\n                // Set state may fail if unmounted\n                try {\n                    this.setState({ error });\n                } catch (err) {\n                    console.error(err);\n                }\n            });\n    }\n\n    public render(): JSX.Element {\n        const { error } = this.state;\n        const { closePopup } = this.props;\n\n        let title = <h2>Creating transaction...</h2>;\n        let message = <p>Please wait. Do not close this window.</p>;\n        if (error) {\n            switch (error.message) {\n                case ErrorCanceledByUser:\n                    title = <h2>Transaction canceled</h2>;\n                    message = <p />;\n                    break;\n                default:\n                    title = <h2 className=\"red\">Unable to complete transaction</h2>;\n                    message = <p>{error.message}</p>;\n                    break;\n            }\n        }\n        return <div className=\"popup approve\">\n            {title}\n            {message}\n            {error &&\n                <div className=\"popup--buttons\">\n                    <button onClick={closePopup}>Close</button>\n                </div>\n            }\n        </div>;\n    }\n}\n\nexport default ApprovalPopup;\n\nexport const newApprovalPopup = (call: (simpleConsole?: SimpleConsole) => Promise<void>, onCancelAction: () => void): SetPopupPayload => ({\n    popup: <ApprovalPopup closePopup={onCancelAction} call={call} />,\n    dismissible: false,\n    onCancel: onCancelAction,\n});\n","import BigNumber from \"bignumber.js\";\n\nimport { BalanceAction, BalanceActionType, ComputedOrderDetails, MatchDetails, OrderInputsAll, OrderSettlement, OrderSide, OrderStatus, OrderType, TraderOrder, TransactionStatus } from \"@renex/renex\";\nimport BN from \"bn.js\";\n\nimport { Record } from \"../lib/record\";\n\nexport class OrderInputsAllRecord extends Record({\n    symbol: \"\",\n    baseToken: \"\",\n    quoteToken: \"\",\n    side: OrderSide.BUY,\n    price: new BigNumber(0),\n    volume: new BigNumber(0),\n    minVolume: new BigNumber(0),\n    type: OrderType.LIMIT,\n    orderSettlement: OrderSettlement.RenEx,\n    nonce: new BN(0),\n    expiry: 0,\n}) implements OrderInputsAll { }\n\nexport class MatchDetailsRecord extends Record({\n    orderID: \"\",\n    matchedID: \"\",\n\n    receivedVolume: new BigNumber(0),\n    spentVolume: new BigNumber(0),\n    fee: new BigNumber(0),\n    receivedToken: \"\",\n    spentToken: \"\",\n}) implements MatchDetails { }\n\nexport class ComputedOrderDetailsRecord extends Record({\n    spendToken: \"\",\n    receiveToken: \"\",\n    receiveVolume: new BigNumber(0),\n    spendVolume: new BigNumber(0),\n    date: 0,\n    feeAmount: new BigNumber(0),\n    feeToken: \"\",\n    orderSettlement: OrderSettlement.RenEx,\n    nonce: new BN(0),\n}) implements ComputedOrderDetails { }\n\nconst TraderOrderRecordDefault = {\n    id: \"\",\n    trader: \"\",\n    status: OrderStatus.NOT_SUBMITTED,\n    matchDetails: undefined as MatchDetailsRecord | undefined,\n\n    computedOrderDetails: new ComputedOrderDetailsRecord(),\n    orderInputs: new OrderInputsAllRecord(),\n    transactionHash: \"\",\n};\nexport class TraderOrderRecord extends Record(TraderOrderRecordDefault) implements TraderOrder { }\n// TODO: Does Typescript have a way of getting this without explicitly defining it?\nexport type TraderOrderRecordInner = typeof TraderOrderRecordDefault;\n\nexport class BalanceActionRecord extends Record({\n    action: BalanceActionType.Withdraw,\n    amount: new BigNumber(0),\n    time: 0,\n    status: TransactionStatus.Pending,\n    token: \"\",\n    trader: \"\",\n    txHash: \"\",\n    nonce: undefined as number | undefined,\n}) implements BalanceAction { }\n\nexport const traderOrderToRecord = (traderOrder: TraderOrder): TraderOrderRecord => {\n    const inner: TraderOrderRecordInner = {\n        id: traderOrder.id,\n        trader: traderOrder.trader,\n        status: traderOrder.status,\n        matchDetails: traderOrder.matchDetails ? new MatchDetailsRecord(traderOrder.matchDetails) : undefined,\n\n        computedOrderDetails: new ComputedOrderDetailsRecord(traderOrder.computedOrderDetails),\n        orderInputs: new OrderInputsAllRecord(traderOrder.orderInputs),\n        transactionHash: traderOrder.transactionHash,\n    };\n    // tslint:disable-next-line:no-object-literal-type-assertion\n    return new TraderOrderRecord(inner);\n};\n","import BigNumber from \"bignumber.js\";\n\nimport { OrderedMap } from \"immutable\";\nimport { Dispatch } from \"redux\";\nimport { createStandardAction } from \"typesafe-actions\";\n// import { TransactionReceipt } from \"web3/types\";\n\nimport RenExSDK, { BalanceAction, TokenCode, TraderOrder } from \"@renex/renex\";\nimport { setAlert } from \"../../actions/alert/alertActions\";\nimport { getBalances, storeBalanceActions } from \"../../actions/balances/balancesActions\";\nimport { clearPopup, setPopup } from \"../../actions/popup/popupActions\";\n// import { getBalances } from \"../../actions/web3/web3Actions\";\nimport { newApprovalPopup } from \"../../components/popups/ApprovalPopup\";\nimport { readableToBalance } from \"../../lib/balances\";\n// import { ErrorCanceledByUser, Wallet, WalletDetail, WalletDetails } from \"../../lib/wallets/wallet\";\nimport { Alert, Settlements } from \"../../reducers/types\";\nimport { BalanceActionRecord } from \"../../reducers/typesSdk\";\n\nexport const ETH_REQUIRED = \"0.1\";\n\n// const InsufficientFundsError = \"Insufficient funds - please ensure you have enough ETH for the transaction fees\";\n// const InsufficientETHError = `Please ensure you will have at least ${ETH_REQUIRED} ETH remaining in your wallet for any subsequent transaction fees`;\nconst FailedDepositError = \"Unable to deposit funds\";\nconst FailedWithdrawalError = \"Unable to withdraw funds\";\n\n\n/* Balance */\ninterface UpdateBalancePayload { token: TokenCode; balance: BigNumber | null; }\nexport type UpdateBalanceAction = (payload: UpdateBalancePayload) => void;\nexport const updateBalance = createStandardAction(\"UPDATE_BALANCE\")<UpdateBalancePayload>();\n\ninterface UpdateBalancesPayload { balances: OrderedMap<TokenCode, BigNumber | null>; }\nexport type UpdateBalancesAction = (payload: UpdateBalancesPayload) => void;\nexport const updateBalances = createStandardAction(\"UPDATE_BALANCES\")<UpdateBalancesPayload>();\n\n/* Usable Balance */\ninterface UpdateUsableBalancesPayload { usableBalances: OrderedMap<TokenCode, BigNumber | null>; }\nexport type UpdateUsableBalancesAction = (payload: UpdateUsableBalancesPayload) => void;\nexport const updateUsableBalances = createStandardAction(\"UPDATE_USABLE_BALANCES\")<UpdateUsableBalancesPayload>();\n\ninterface UpdateUsableBalancePayload { token: TokenCode; usableBalance: BigNumber | null; }\nexport type UpdateUsableBalanceAction = (payload: UpdateUsableBalancePayload) => void;\nexport const updateUsableBalance = createStandardAction(\"UPDATE_USABLE_BALANCE\")<UpdateUsableBalancePayload>();\n\n/* Account Balance */\ninterface UpdateAccountBalancePayload { token: TokenCode; accountBalance: BigNumber | null; }\nexport type UpdateAccountBalanceAction = (payload: UpdateAccountBalancePayload) => void;\nexport const updateAccountBalance = createStandardAction(\"UPDATE_ACCOUNT_BALANCE\")<UpdateAccountBalancePayload>();\n\ninterface UpdateAccountBalancesPayload { accountBalances: OrderedMap<TokenCode, BigNumber | null>; }\nexport type UpdateAccountBalancesAction = (payload: UpdateAccountBalancesPayload) => void;\nexport const updateAccountBalances = createStandardAction(\"UPDATE_ACCOUNT_BALANCES\")<UpdateAccountBalancesPayload>();\n\n\n\ninterface UpdateAtomicBalancesPayload { atomicBalances: OrderedMap<TokenCode, BigNumber | null>; }\nexport type UpdateAtomicBalancesAction = (payload: UpdateAtomicBalancesPayload) => void;\nexport const updateAtomicBalances = createStandardAction(\"UPDATE_ATOMIC_BALANCES\")<UpdateAtomicBalancesPayload>();\n\ninterface UpdateAtomicAddressesPayload { atomicAddresses: OrderedMap<TokenCode, string>; }\nexport type UpdateAtomicAddressesAction = (payload: UpdateAtomicAddressesPayload) => void;\nexport const updateAtomicAddresses = createStandardAction(\"UPDATE_ATOMIC_ADDRESSES\")<UpdateAtomicAddressesPayload>();\n\ninterface UpdateUsableAtomicBalancePayload { usableAtomicBalances: OrderedMap<TokenCode, BigNumber | null>; }\nexport type UpdateUsableAtomicBalanceAction = (payload: UpdateUsableAtomicBalancePayload) => void;\nexport const updateUsableAtomicBalances = createStandardAction(\"UPDATE_USABLE_ATOMIC_BALANCES\")<UpdateUsableAtomicBalancePayload>();\n\n// Deposit specified amount to wallet contract.\nexport type DepositAction = (\n    sdk: RenExSDK,\n    balanceHistory: OrderedMap<string, BalanceAction>,\n    traderOrders: OrderedMap<string, TraderOrder>,\n    usableBalances: OrderedMap<TokenCode, BigNumber | null>,\n    accountBalances: OrderedMap<TokenCode, BigNumber | null>,\n    amount: string,\n    currencyCode: TokenCode,\n) => (dispatch: Dispatch) => Promise<void>;\nexport const deposit: DepositAction = (\n    sdk, balanceHistory, traderOrders, usableBalances, accountBalances, amount, currencyCode,\n) => async (dispatch) => {\n    if (\n        sdk === null ||\n        currencyCode === null ||\n        amount === null ||\n        parseFloat(amount) <= 0\n    ) {\n        throw new Error(FailedDepositError);\n    }\n\n    // const token = TokenDetails.get(currencyCode, undefined);\n\n    const amountBigNumber = new BigNumber(amount);\n    if (amountBigNumber.lte(new BigNumber(0))) {\n        dispatch(setAlert({\n            alert: new Alert({ message: \"Please enter valid input\" })\n        }));\n        return;\n    }\n\n    const transactionCall = () => {\n        return sdk.deposit(amountBigNumber, currencyCode, { awaitConfirmation: false })\n            .then(async depositResult => {\n                const { balanceAction } = depositResult;\n                const balanceActionRecord = new BalanceActionRecord(balanceAction);\n                dispatch(storeBalanceActions([balanceActionRecord]));\n                // Reload balances before closing popup\n                await getBalances(sdk)(dispatch);\n                dispatch(clearPopup());\n            });\n    };\n\n    dispatch(setPopup(newApprovalPopup(transactionCall, () => dispatch(clearPopup()))));\n\n    // // Check if user will have sufficient ETH for subsequent fees relating to\n    // // depositing/withdrawing/opening orders after depositing their funds.\n    // const remainingETH = token === TokenDetails.get(Token.ETH) ? accountBalances.get(Token.ETH).minus(amountBigNumber) : accountBalances.get(Token.ETH);\n    // if (remainingETH.isLessThan(readableToBalance(ETH_REQUIRED, Token.ETH))) {\n    //     throw new Error(InsufficientETHError);\n    // }\n\n    // // Initialize contract for checking user approval.\n    // const currencyAddress = token.address;\n\n    // let valueBigNumber = new BigNumber(0);\n\n    // // Add balance to opened balances.\n    // const existing = usableBalances.get(currencyCode) || new BigNumber(0);\n    // usableBalances = usableBalances.set(currencyCode, existing.plus(amountBigNumber));\n\n    // // Add to pending balance transactions.\n\n\n    // const transactions = [];\n\n    // if (token === TokenDetails.get(Token.ETH)) {\n    //     valueBigNumber = amountBigNumber;\n\n    //     const call = renExBalancesContract.methods.deposit(currencyAddress, amountBigNumber);\n    //     const params = {\n    //         from: sdk.getAddress(),\n    //         value: valueBigNumber.toFixed(),\n    //         gas: undefined as number | undefined,\n    //     };\n\n    //     try {\n    //         params.gas = await call.estimateGas(params);\n    //     } catch (err) {\n    //         console.error(\"Unable to estimate gas for ETH deposit.\");\n    //     }\n\n    //     transactions.push({\n    //         call: () => call.send(params),\n    //         name: \"Deposit\",\n    //     });\n    // } else {\n    //     // ERC20 token\n    //     const tokenContract = new web3.eth.Contract(ERC20Contract.ABI, currencyAddress);\n\n    //     // If allowance is less than amount, user must first approve\n    //     // TODO: This may cause the transaction to fail if the user call this\n    //     // twice in a row rapidly (after already having an allowance set)\n    //     // There's no way to check pending state - alternative is to see\n    //     // if there are any pending deposits for the same token\n    //     const allowance = await tokenContract.methods.allowance(address, RenExBalancesContract.address).call();\n    //     if (new BigNumber(allowance).isLessThan(amountBigNumber)) {\n    //         transactions.push({\n    //             call: () => tokenContract.methods.approve(RenExBalancesContract.address, amountBigNumber).send({ from: address }),\n    //             name: \"Approve\",\n    //         });\n    //     }\n    //     transactions.push({\n    //         call: () => renExBalancesContract.methods.deposit(\n    //             currencyAddress,\n    //             amountBigNumber).send({\n    //                 // Manually set gas limit since gas estimation won't work\n    //                 // if the ethereum node hasn't seen the previous transaction\n    //                 from: address,\n    //                 gas: \"150000\",\n    //                 value: valueBigNumber.toFixed(),\n    //             }),\n    //         name: \"Deposit\",\n    //     });\n    //     // See https://github.com/MetaMask/metamask-extension/issues/3425\n    // }\n\n    // // TODO: Check not undefined\n    // const walletDetails: WalletDetail | undefined = WalletDetails.get(wallet, undefined);\n\n    // try {\n    //     await walletDetails.sendTransactions(\n    //         transactions,\n    //         (txHash: string) => {\n    //             balanceItem = balanceItem.set(\"txHash\", txHash);\n    //             dispatch(storeBalanceActions([balanceItem]));\n    //         },\n    //         (receipt: TransactionReceipt | null) => {\n    //             if (receipt !== null && receipt.blockHash !== \"\") {\n    //                 balanceItem = balanceItem.set(\"status\", BalanceItemStatus.Done);\n    //                 // Status type is string, but actually returns back as a boolean\n    //                 const status: any = receipt.status;\n    //                 if (status === \"0\" ||\n    //                     status === 0 ||\n    //                     status === false) {\n    //                     balanceItem = balanceItem.set(\"status\", BalanceItemStatus.Failed);\n    //                 }\n    //                 dispatch(storeBalanceActions([balanceItem]));\n\n    //                 dispatch(setAlert({\n    //                     alert: new Alert({\n    //                         alertType: AlertType.Success,\n    //                         message: `${amount} ${token.symbol} has successfully been deposited. Your balances will be updated shortly.`,\n    //                     })\n    //                 }));\n\n    //                 getBalances(web3, renExBalancesContract, wallet, address, balanceHistory, traderOrders, usableBalances)(dispatch);\n    //             }\n    //         },\n    //     );\n    // } catch (error) {\n    //     if (error.message.match(\"Insufficient funds\")) {\n    //         throw new Error(InsufficientFundsError);\n    //     }\n    //     if (error.message.match(\"User denied transaction signature\")) {\n    //         throw new Error(ErrorCanceledByUser);\n    //     }\n    //     console.error(error);\n    //     throw new Error(FailedDepositError);\n    // }\n};\n\nexport const WITHDRAW_DELAY = 5;\n\nexport type WithdrawAction = (\n    sdk: RenExSDK,\n    balances: OrderedMap<TokenCode, BigNumber | null>,\n    usableBalances: OrderedMap<TokenCode, BigNumber | null>,\n    amount: string,\n    currencyCode: TokenCode,\n) => (dispatch: Dispatch) => void;\nexport const withdraw: WithdrawAction = (\n    sdk, balances, usableBalances, amount, currencyCode,\n) => async (dispatch) => {\n    if (amount === null || balances === null || currencyCode === null || parseFloat(amount) <= 0 || sdk === null) {\n        throw new Error(FailedWithdrawalError);\n    }\n\n    const amountBigNumber = new BigNumber(amount);\n    if (amountBigNumber.lte(new BigNumber(0))) {\n        dispatch(setAlert({\n            alert: new Alert({ message: \"Please enter valid input\" })\n        }));\n        return;\n    }\n\n    // Subtract balance from opened balances.\n    // usableBalances = usableBalances.set(currencyCode, usableBalances.get(currencyCode).sub(amountBigNumber));\n\n    // Check if user has sufficient balance to withdraw.\n    const balance = usableBalances.get(currencyCode, undefined);\n    if (balance === undefined || balance === null) {\n        // TODO: Throw error\n        console.error(\"Balance is null or undefined\");\n        return;\n    }\n    if (amountBigNumber.gt(balance)) {\n        // TODO: Throw error\n        console.error(\"Insufficient balance\");\n        return;\n    }\n\n    // Remove from pending balance transactions.\n    // let balanceItem = new BalanceItem({\n    //     action: BalanceItemAction.Withdraw,\n    //     amount: parseFloat(amount),\n    //     seconds: moment().unix(),\n    //     status: BalanceItemStatus.Pending,\n    //     token: currencyCode,\n    //     trader: sdk.getAddress(),\n    // });\n\n    // const token = TokenDetails.get(currencyCode);\n\n    const transactionCall = () => {\n        return sdk.withdraw(amountBigNumber, currencyCode, { awaitConfirmation: false })\n            .then(async withdrawResult => {\n                const { balanceAction } = withdrawResult;\n                const balanceActionRecord = new BalanceActionRecord(balanceAction);\n                dispatch(storeBalanceActions([balanceActionRecord]));\n                // Reload balances before closing popup\n                await getBalances(sdk)(dispatch);\n                dispatch(clearPopup());\n            });\n    };\n\n    dispatch(setPopup(newApprovalPopup(transactionCall, () => dispatch(clearPopup()))));\n\n\n\n    // const currencyAddress = token.address;\n\n    // const transactions = [];\n    // transactions.push({\n    //     call: () => renExBalancesContract.methods.withdraw(currencyAddress, amountBigNumber).send({ from: address }),\n    //     name: \"Withdraw\",\n    // });\n\n    // // TODO: Check not undefined\n    // const walletDetails: WalletDetail | undefined = WalletDetails.get(wallet, undefined);\n\n    // try {\n    //     await walletDetails.sendTransactions(\n    //         transactions,\n    //         (txHash: string) => {\n    //             balanceItem = balanceItem.set(\"txHash\", txHash);\n    //             dispatch(updateUsableBalances({ usableBalances }));\n    //             dispatch(storeBalanceActions([balanceItem]));\n    //         },\n    //         async (receipt: TransactionReceipt | null) => {\n    //             if (receipt !== null && receipt.blockHash !== \"\") {\n    //                 // The Ethereum nodes to have a delay of a few seconds\n    //                 // between the block being mined and the contract calls\n    //                 // being updated\n    //                 setTimeout(async () => {\n    //                     balanceItem = balanceItem.set(\"status\", BalanceItemStatus.Updating);\n    //                     dispatch(storeBalanceActions([balanceItem]));\n    //                     balanceHistory = balanceHistory.set(balanceItem.txHash, balanceItem);\n\n    //                     await (getBalances(web3, renExBalancesContract, wallet, address, balanceHistory, traderOrders, usableBalances)(dispatch));\n\n    //                     balanceItem = balanceItem.set(\"status\", BalanceItemStatus.Done);\n\n    //                     // Status type is string, but actually returns back as a boolean\n    //                     const status: any = receipt.status;\n    //                     if (status === \"0\" ||\n    //                         status === 0 ||\n    //                         status === false) {\n    //                         balanceItem = balanceItem.set(\"status\", BalanceItemStatus.Failed);\n    //                     }\n\n    //                     dispatch(storeBalanceActions([balanceItem]));\n    //                     dispatch(setAlert({\n    //                         alert: new Alert({\n    //                             alertType: AlertType.Success,\n    //                             message: `${amount} ${token.symbol} has successfully been withdrawn. Your balances will be updated shortly.`,\n    //                         })\n    //                     }));\n    //                 }, WITHDRAW_DELAY * 1000);\n    //             }\n    //         },\n    //     );\n    // } catch (error) {\n    //     console.error(error);\n    //     if (error.message.match(\"Insufficient funds\")) {\n    //         throw new Error(InsufficientFundsError);\n    //     }\n    //     if (error.message.match(\"User denied transaction signature\")) {\n    //         throw new Error(ErrorCanceledByUser);\n    //     }\n    //     throw new Error(FailedWithdrawalError);\n    // }\n};\n","import BigNumber from \"bignumber.js\";\n\nimport * as Sentry from \"@sentry/browser\";\n\nimport RenExSDK, { BalanceActionType, TokenCode, TransactionStatus } from \"@renex/renex\";\n\nimport { OrderedMap } from \"immutable\";\nimport { Dispatch } from \"redux\";\nimport { createStandardAction } from \"typesafe-actions\";\n\nimport { second, sleep } from \"../../lib/conversion\";\nimport { TokenDetails } from \"../../lib/market\";\nimport { Alert, AlertData, AlertType } from \"../../reducers/types\";\nimport { BalanceActionRecord } from \"../../reducers/typesSdk\";\nimport { setAlert } from \"../alert/alertActions\";\nimport { addPendingAlert, removePendingAlerts } from \"../alert/pendingAlertActions\";\nimport { updateAccountBalances, updateAtomicAddresses, updateAtomicBalances, updateBalances, updateUsableAtomicBalances, updateUsableBalances } from \"../trader/balanceActions\";\n\n/**\n * Updates a withdrawal or deposit in the store (stored based on its tx hash)\n * @param {{ balanceItem: BalanceAction }} payload - The payload should contain\n * the withdrawal or deposit object\n */\ntype StoreBalanceActionsPayload = BalanceActionRecord[];\nexport type StoreBalanceActionsAction = (payload: StoreBalanceActionsPayload) => void;\nexport const storeBalanceActions = createStandardAction(\"PUSH_BALANCE\")<StoreBalanceActionsPayload>();\n\n/**\n * Checks if any pending deposits or withdrawals have been confirmed\n * @param web3 - Web3 instance to use\n * @param balanceHistory - The Balance History state\n */\nexport type UpdateBalancesHistoryAction = (sdk: RenExSDK, balanceHistory: OrderedMap<string, BalanceActionRecord>, checkAll?: boolean)\n    => (dispatch: Dispatch) => Promise<void>;\nexport const updateBalancesHistory: UpdateBalancesHistoryAction = (sdk, balanceHistory, checkAll = false) => async (dispatch) => {\n\n    // If `checkAll` is true, check all balance history items\n    let filter = (balanceAction: BalanceActionRecord | undefined) => balanceAction !== undefined && balanceAction.status === TransactionStatus.Pending;\n    if (checkAll) {\n        filter = () => true;\n    }\n\n    balanceHistory\n        .filter(filter).toArray()\n        .map(async (balanceAction: BalanceActionRecord) => {\n            try {\n                let balanceActionStatus = await sdk.fetchBalanceActionStatus(balanceAction.txHash);\n\n                // If the transaction has been replaced, check again after a\n                // delay. This should not be a common occurrence.\n                if (balanceActionStatus === TransactionStatus.Replaced) {\n                    await sleep(5 * second);\n                    balanceActionStatus = await sdk.fetchBalanceActionStatus(balanceAction.txHash);\n                }\n\n                if (balanceActionStatus !== balanceAction.status) {\n                    if (balanceActionStatus === TransactionStatus.Done) {\n                        const alert = async () => {\n                            const tokenDetails = TokenDetails.get(balanceAction.token);\n                            dispatch(setAlert({\n                                alert: new Alert({\n                                    message: `${balanceAction.amount} ${tokenDetails.symbol} has been successfully ${balanceAction.action === BalanceActionType.Deposit ? \"deposited\" : \"withdrawn\"}`,\n                                    alertType: AlertType.Success,\n                                }),\n                            }));\n                        };\n                        dispatch(addPendingAlert({ id: balanceAction.txHash, method: alert }));\n                    }\n                    balanceAction = balanceAction.set(\"status\", balanceActionStatus);\n                    dispatch(storeBalanceActions([balanceAction]));\n                }\n            } catch (err) {\n                console.error(err);\n                Sentry.captureException(err);\n            }\n        });\n};\n\nexport type GetBalanceAction = (sdk: RenExSDK, pendingAlerts?: AlertData[\"pendingAlerts\"]) => (dispatch: Dispatch) => Promise<void>;\nexport const getBalances: GetBalanceAction = (sdk, pendingAlerts) => async (dispatch) => {\n    // getBalances should not throw any errors\n\n    /* Token balances */\n    try {\n        let usableBalances = OrderedMap<TokenCode, BigNumber | null>();\n        let balances = OrderedMap<TokenCode, BigNumber | null>();\n        let accountBalances = OrderedMap<TokenCode, BigNumber | null>();\n\n        const supportedTokens = await sdk.fetchSupportedTokens();\n        const allTokenBalances = await sdk.fetchBalances(supportedTokens);\n        supportedTokens.forEach((token: TokenCode) => {\n            let free = null;\n            let total = null;\n            let nondeposited = null;\n            const tokenBalance = allTokenBalances.get(token);\n            if (tokenBalance) {\n                free = tokenBalance.free;\n                if (tokenBalance.free !== null && tokenBalance.used !== null) {\n                    total = tokenBalance.free.plus(tokenBalance.used);\n                }\n                nondeposited = tokenBalance.nondeposited;\n            }\n            usableBalances = usableBalances.set(token, free);\n            balances = balances.set(token, total);\n            accountBalances = accountBalances.set(token, nondeposited);\n        });\n        dispatch(updateUsableBalances({ usableBalances }));\n        dispatch(updateAccountBalances({ accountBalances }));\n        dispatch(updateBalances({ balances }));\n    } catch (err) {\n        console.error(err);\n        Sentry.captureException(err);\n    }\n\n    // If there are pending alerts (e.g. Orders settled, withdrawals confirmed)\n    // call them now and clear them\n    if (pendingAlerts) {\n        dispatch(removePendingAlerts({ ids: pendingAlerts.keySeq().toArray() }));\n        pendingAlerts.toArray().map((pendingAlert: () => Promise<void>) => {\n            pendingAlert().catch(console.error);\n        });\n    }\n\n\n};\n\nexport type GetAtomicBalanceAction = (sdk: RenExSDK) => (dispatch: Dispatch) => Promise<void>;\nexport const getAtomicBalances: GetAtomicBalanceAction = (sdk) => async (dispatch) => {\n    if (!sdk.atom.isConnected()) {\n        console.error(\"Cannot get atomic balances. Swapperd is not connected.\");\n        return;\n    }\n    try {\n        const supportedTokens = await sdk.fetchSupportedAtomicTokens();\n        await Promise.all([\n            // Update the addresses\n            sdk.atom.fetchAddresses(supportedTokens).then(atomicTokenAddresses => {\n                let atomicAddresses = OrderedMap<TokenCode, string>();\n                supportedTokens.map((token, index) => {\n                    atomicAddresses = atomicAddresses.set(token, atomicTokenAddresses[index]);\n                });\n                dispatch(updateAtomicAddresses({ atomicAddresses }));\n            }).catch(console.error),\n            // Update the atomic balances\n            sdk.atom.fetchBalances(supportedTokens).then(tokenBalancesMap => {\n                let atomicBalances = OrderedMap<TokenCode, BigNumber | null>();\n                let usableAtomicBalances = OrderedMap<TokenCode, BigNumber | null>();\n                supportedTokens.forEach(token => {\n                    const tokenBalance = tokenBalancesMap.get(token);\n                    if (tokenBalance) {\n                        let totalBalance: BigNumber | null = null;\n                        if (tokenBalance.free !== null && tokenBalance.used !== null) {\n                            totalBalance = tokenBalance.free.plus(tokenBalance.used);\n                        }\n                        atomicBalances = atomicBalances.set(token, totalBalance);\n                        usableAtomicBalances = usableAtomicBalances.set(token, tokenBalance.free);\n                    }\n                });\n                dispatch(updateAtomicBalances({ atomicBalances }));\n                dispatch(updateUsableAtomicBalances({ usableAtomicBalances }));\n            }).catch(console.error),\n        ]);\n    }\n    catch (err) {\n        console.error(err);\n        Sentry.captureException(err);\n    }\n};\n","import * as Sentry from \"@sentry/browser\";\n\nimport { OrderedMap } from \"immutable\";\nimport { Dispatch } from \"redux\";\nimport { createStandardAction } from \"typesafe-actions\";\n\nimport RenExSDK, { OrderStatus } from \"@renex/renex\";\n\nimport { setAlert } from \"../../actions/alert/alertActions\";\nimport { addPendingAlert } from \"../../actions/alert/pendingAlertActions\";\nimport { Alert, AlertType } from \"../../reducers/types\";\nimport { MatchDetailsRecord, TraderOrderRecord } from \"../../reducers/typesSdk\";\n\ninterface SyncTraderOrdersPayload { traderOrders: OrderedMap<string, TraderOrderRecord>; }\nexport type SyncTraderOrdersAction = (payload: SyncTraderOrdersPayload) => void;\nexport const syncTraderOrders = createStandardAction(\"SYNC_TRADER_ORDERS\")<SyncTraderOrdersPayload>();\n\ntype AddOrdersPayload = TraderOrderRecord[];\nexport type AddOrdersAction = (payload: AddOrdersPayload) => void;\nexport const addOrders = createStandardAction(\"ADD_ORDERS\")<AddOrdersPayload>();\n\ninterface UpdateOrderStatusPayload { orderID: string; orderStatus: OrderStatus; }\nexport type UpdateOrderStatusAction = (payload: UpdateOrderStatusPayload) => void;\nexport const updateOrderStatus = createStandardAction(\"UPDATE_ORDER\")<UpdateOrderStatusPayload>();\n\ninterface UpdateOrderCancellingPayload { orderID: string; orderCancelling: boolean; }\nexport type UpdateOrderCancellingAction = (payload: UpdateOrderCancellingPayload) => void;\nexport const updateOrderCancelling = createStandardAction(\"UPDATE_ORDER_CANCELLINGs\")<UpdateOrderCancellingPayload>();\n\ninterface CancelLocalOrderPayload { orderID: string; }\nexport type CancelLocalOrderAction = (payload: CancelLocalOrderPayload) => void;\nexport const cancelLocalOrder = createStandardAction(\"CANCEL_LOCAL_ORDER\")<CancelLocalOrderPayload>();\n\n/**\n * Filter for orders that don't need to be checked - based on network, address\n * and status\n */\nexport const defaultOrderFilter = (address: string, checkAllOrders: boolean) => ((order: TraderOrderRecord | undefined) => {\n    if (order === undefined) {\n        return false;\n    }\n\n    // Check that the order belongs to the current account\n    if (order.trader.toLowerCase() !== address.toLowerCase()) {\n        return false;\n    }\n\n    if (!checkAllOrders) {\n        if (order.status !== OrderStatus.OPEN &&\n            order.status !== OrderStatus.NOT_SUBMITTED &&\n            order.status !== OrderStatus.CONFIRMED\n        ) {\n            return false;\n        }\n    }\n\n    return true;\n});\n\nexport type CheckOrderStatusesAction = (\n    sdk: RenExSDK,\n    traderOrders: OrderedMap<string, TraderOrderRecord>,\n    checkAllOrders?: boolean,\n) => (dispatch: Dispatch) => Promise<void>;\nexport const checkOrderStatuses: CheckOrderStatusesAction = (\n    sdk, traderOrders, checkAllOrders = false\n) => async (dispatch) => {\n\n    // Filter if order is for different network or trader\n    const toCheck = traderOrders\n        .toArray()\n        .filter(defaultOrderFilter(sdk.getAddress(), checkAllOrders));\n\n    for (let order of toCheck) {\n        if (order === undefined) { return; }\n\n        // Check the status of the order in the orderbook.\n        // const hexOrderID = new EncodedData(order.id, Encodings.BASE64).toHex();\n        let orderStatus;\n        try {\n            orderStatus = await sdk.fetchOrderStatus(order.id);\n        } catch (error) {\n            console.error(error);\n            Sentry.captureException(error);\n            continue;\n        }\n\n        // If the order is settled and doesn't have match details, get them now\n        if (!order.matchDetails && orderStatus === OrderStatus.SETTLED) {\n            order = order.set(\"matchDetails\", new MatchDetailsRecord(await sdk.fetchMatchDetails(order.id)));\n            order = order.set(\"status\", OrderStatus.SETTLED);\n\n            // Only update order after the balances have been updated\n            const alert = async () => {\n                dispatch(addOrders([order]));\n\n                dispatch(setAlert({\n                    alert: new Alert({\n                        alertType: AlertType.Success,\n                        // TODO: Replace with execution details\n                        message: \"Your order has successfully been settled\",\n                    })\n                }));\n            };\n            dispatch(addPendingAlert({ id: `settled: ${order.id}`, method: alert }));\n\n        } else if (order.status !== orderStatus) {\n            dispatch(updateOrderStatus({ orderID: order.id, orderStatus }));\n        }\n    }\n};\n","import { createStandardAction } from \"typesafe-actions\";\n\nimport { Wallet } from \"../../lib/wallets/wallet\";\n\ninterface StoreWalletPayload { wallet: Wallet | null; }\nexport type StoreWalletAction = (payload: StoreWalletPayload) => void;\nexport const storeWallet = createStandardAction(\"STORE_WALLET\")<StoreWalletPayload>();\n","import RenExSDK, { TokenCode } from \"@renex/renex\";\nimport Web3 from \"web3\";\n\nimport { OrderedMap } from \"immutable\";\nimport { Dispatch } from \"redux\";\nimport { createStandardAction } from \"typesafe-actions\";\n\nimport history from \"../../lib/history\";\n\nimport { Provider } from \"web3/providers\";\nimport { storeBalanceActions } from \"../../actions/balances/balancesActions\";\nimport { setMarket } from \"../../actions/inputs/inputsActions\";\nimport { addOrders } from \"../../actions/orderbook/traderBookActions\";\nimport { updateAccountBalances, updateAtomicAddresses, updateAtomicBalances, updateBalances, updateUsableBalances } from \"../../actions/trader/balanceActions\";\nimport { storeWallet } from \"../../actions/trader/walletActions\";\nimport { Pair } from \"../../lib/market\";\nimport { INFURA_URL, networkData } from \"../../lib/network\";\nimport { getNetwork } from \"../../lib/web3\";\nimport { BalanceActionRecord, traderOrderToRecord } from \"../../reducers/typesSdk\";\n\ntype StoreAddressPayload = string | null;\nexport type StoreAddressAction = (payload: StoreAddressPayload) => void;\nexport const storeAddress = createStandardAction(\"STORE_ADDRESS\")<StoreAddressPayload>();\n\ntype StoreURLPayload = string | null;\nexport type StoreURLAction = (payload: StoreURLPayload) => void;\nexport const storeURL = createStandardAction(\"STORE_URL\")<StoreURLPayload>();\n\nexport type LoginAction = (sdk: RenExSDK, web3Provider: Provider, address: string, options: { redirect: boolean, url: string | null }) => (dispatch: Dispatch) => Promise<void>;\nexport const login: LoginAction = (sdk, web3Provider, address, options) => async (dispatch) => {\n    // Check that the provider is using the correct network\n    if (await getNetwork(new Web3(web3Provider)) !== networkData.ethNetwork) {\n        // dispatch(setAlert({\n        //     alert: new Alert({ message: `Invalid Web3 network (expected ${networkData.ethNetworkLabel})` })\n        // }));\n\n        logout(sdk, { reload: false })(dispatch).catch(console.error);\n        return;\n    }\n    // Store address in the store (and in local storage)\n    dispatch(storeAddress(address));\n\n    // Configure SDK\n    sdk.updateProvider(web3Provider);\n    sdk.setAddress(address);\n\n    // Retrieve the trader's orders\n    sdk.fetchTraderOrders()\n        .then((traderOrders) => dispatch(addOrders(traderOrders.map(traderOrderToRecord))))\n        .catch(console.error);\n\n    // Retrieve the trader's balance actions\n    sdk.fetchBalanceActions()\n        // Convert to immutable records and then dispatch\n        .then((balanceActions) => dispatch(storeBalanceActions(\n            balanceActions.map(balanceAction => new BalanceActionRecord(balanceAction))\n        )))\n        .catch(console.error);\n\n    if (options.redirect) {\n        history.push(options.url ? options.url : \"/exchange\");\n    }\n};\n\nexport type LogoutAction = (sdk: RenExSDK, options: { reload: boolean }) => (dispatch: Dispatch) => Promise<void>;\nexport const logout: LogoutAction = (sdk, options) => async (dispatch) => {\n\n    // Clear session account in store (and in local storage)\n    dispatch(storeAddress(null));\n\n    // Clear Redux stores\n    dispatch(setMarket({ market: Pair.ETH_REN }));\n\n    // Clear balances\n    dispatch(updateBalances({ balances: OrderedMap() }));\n    dispatch(updateUsableBalances({ usableBalances: OrderedMap() }));\n    dispatch(updateAccountBalances({ accountBalances: OrderedMap() }));\n    dispatch(updateAtomicBalances({ atomicBalances: OrderedMap() }));\n\n    dispatch(updateAtomicAddresses({ atomicAddresses: OrderedMap<TokenCode, string>() }));\n    dispatch(storeWallet({ wallet: null }));\n\n    // Use read-only provider and clear address\n    sdk.updateProvider(new Web3.providers.HttpProvider(INFURA_URL));\n    sdk.setAddress(\"\");\n\n    if (options.reload) {\n        history.push(\"/loading\");\n        // Reload to clear all stores and cancel timeouts\n        // (e.g. deposit/withdrawal confirmations)\n        location.replace(\"/\");\n    }\n};\n\nexport type LookForLogoutAction = (sdk: RenExSDK) => (dispatch: Dispatch) => Promise<void>;\nexport const lookForLogout: LookForLogoutAction = (sdk) => async (dispatch) => {\n    if (!sdk.getAddress()) {\n        return;\n    }\n\n    const accounts = (await sdk.getWeb3().eth.getAccounts()).map((address) => address.toLowerCase());\n    if (!accounts.includes(sdk.getAddress().toLowerCase())) {\n        console.error(`User has logged out of their web3 provider (${sdk.getAddress()} not in [${accounts.join(\", \")}])`);\n        logout(sdk, { reload: true })(dispatch).catch(console.error);\n    }\n};\n","// tslint:disable\n\nimport * as React from \"react\";\n\n// Modified from https://github.com/ethereum/blockies\n// License: https://github.com/ethereum/blockies#license (WTFPL)\n\nfunction blockies() {\n    // The random number is a js implementation of the XOR-shift PRNG\n    const randSeed = new Array(4); // XOR-shift: [x, y, z, w] 32 bit values\n\n    function seedRand(seed: any) {\n        for (let i = 0; i < randSeed.length; i++) {\n            randSeed[i] = 0;\n        }\n        for (let i = 0; i < seed.length; i++) {\n            randSeed[i % 4] = ((randSeed[i % 4] << 5) - randSeed[i % 4]) + seed.charCodeAt(i);\n        }\n    }\n\n    function rand() {\n        // based on Java's String.hashCode(), expanded to 4 32bit values\n\n        const t = randSeed[0] ^ (randSeed[0] << 11);\n\n        randSeed[0] = randSeed[1];\n        randSeed[1] = randSeed[2];\n        randSeed[2] = randSeed[3];\n\n        randSeed[3] = (randSeed[3] ^ (randSeed[3] >> 19) ^ t ^ (t >> 8));\n\n\n        return (randSeed[3] >>> 0) / ((1 << 31) >>> 0);\n    }\n\n    function createColor() {\n        // saturation is the whole color spectrum\n        const h = Math.floor(rand() * 360);\n        // saturation goes from 40 to 100, it avoids greyish colors\n        const s = ((rand() * 60) + 40) + \"%\";\n        // lightness can be anything from 0 to 100, but probabilities are a bell curve around 50%\n        const l = ((rand() + rand() + rand() + rand()) * 25) + \"%\";\n\n        const color = \"hsl(\" + h + \",\" + s + \",\" + l + \")\";\n        return color;\n    }\n\n    function createImageData(size: number) {\n        const width = size; // Only support square icons for now\n        const height = size;\n\n        const dataWidth = Math.ceil(width / 2);\n        const mirrorWidth = width - dataWidth;\n\n        const data = [];\n        for (let y = 0; y < height; y++) {\n            let row = [];\n            for (let x = 0; x < dataWidth; x++) {\n                // this makes foreground and background color to have a 43% (1/2.3) probability\n                // spot color has 13% chance\n                row[x] = Math.floor(rand() * 2.3);\n            }\n            const r = row.slice(0, mirrorWidth);\n            r.reverse();\n            row = row.concat(r);\n\n            for (let i = 0; i < row.length; i++) {\n                data.push(row[i]);\n            }\n        }\n\n        return data;\n    }\n\n    function buildOpts(opts: any) {\n        const newOpts: any = {};\n\n        newOpts.size = opts.size || 8;\n        newOpts.scale = opts.scale || 4;\n        newOpts.seed = opts.seed || Math.floor((Math.random() * Math.pow(10, 16))).toString(16);\n        newOpts.color = opts.color || createColor();\n        newOpts.bgColor = opts.bgColor || createColor();\n        newOpts.spotColor = opts.spotColor || createColor();\n\n        seedRand(newOpts.seed);\n\n        return newOpts;\n    }\n\n    function renderIcon(opts: any, canvas: HTMLCanvasElement) {\n        opts = buildOpts(opts || {});\n\n        const imageData = createImageData(opts.size);\n        const width = Math.sqrt(imageData.length);\n\n        canvas.width = canvas.height = opts.size * opts.scale;\n\n        const cc = canvas.getContext(\"2d\");\n        if (!cc) {\n            return canvas;\n        }\n        cc.fillStyle = opts.bgColor;\n        cc.fillRect(0, 0, canvas.width, canvas.height);\n        cc.fillStyle = opts.color;\n\n        for (let i = 0; i < imageData.length; i++) {\n\n            // if data is 0, leave the background\n            if (imageData[i]) {\n                const row = Math.floor(i / width);\n                const col = i % width;\n\n                // if data is 2, choose spot color, if 1 choose foreground\n                cc.fillStyle = (imageData[i] === 1) ? opts.color : opts.spotColor;\n\n                cc.fillRect(col * opts.scale, row * opts.scale, opts.scale, opts.scale);\n            }\n        }\n        return canvas;\n    }\n\n    function createIcon(opts: any): HTMLCanvasElement {\n        opts = buildOpts(opts || {});\n        const canvas = document.createElement(\"canvas\");\n\n        renderIcon(opts, canvas);\n\n        return canvas;\n    }\n\n    return {\n        create: createIcon,\n        render: renderIcon\n    };\n\n}\n\n/**\n * Blocky is a visual component for displaying Ethereum blockies - visual hashes\n * of ethereum addresses\n */\nexport default class Blocky extends React.Component<Props, State> {\n    private canvas: HTMLCanvasElement | null | undefined;\n    private blocky = blockies();\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            loading: true,\n        };\n        this.canvas = null;\n    }\n\n    public getOpts = (address: string) => ({\n        seed: address.toUpperCase(),\n        size: 8,\n        scale: 10,\n    })\n\n    public renderIcon = (address: string | null) => {\n        if (address) {\n            this.setState({ loading: false });\n            this.blocky.create(this.getOpts(address));\n            if (this.canvas) {\n                this.blocky.render(this.getOpts(address), this.canvas);\n            } else {\n                alert(\"No canvas!\");\n            }\n        } else {\n            this.setState({ loading: true });\n        }\n    }\n\n    public componentWillReceiveProps(props: Props) {\n        this.renderIcon(props.address);\n    }\n\n    public componentDidMount() {\n        this.renderIcon(this.props.address);\n    }\n\n    public render() {\n        const { address } = this.props;\n        const { loading } = this.state;\n        return (\n            <div className=\"blocky--outer\">\n                <div data-tip={address || \"...\"}>\n                    {loading ? <i className=\"fa fa-spin fa-spinner blocky__loading\" /> : <i />}\n                    <canvas className=\"blocky\" ref={canvas => this.canvas = canvas} />\n                </div>\n            </div>\n        );\n    }\n}\n\ninterface Props {\n    address: string | null;\n}\n\ninterface State {\n    loading: boolean;\n}\n","import * as React from \"react\";\n\nimport { connect } from \"react-redux\";\nimport { Link, RouteProps, withRouter } from \"react-router-dom\";\nimport { bindActionCreators, Dispatch } from \"redux\";\n\nimport RenExSDK from \"@renex/renex\";\n\nimport { logout, LogoutAction } from \"../actions/trader/accountActions\";\nimport { ApplicationData } from \"../reducers/types\";\n\nimport Blocky from \"./Blocky\";\n\ninterface StoreProps {\n    address: string | null;\n    sdk: RenExSDK;\n}\n\ninterface HeaderProps extends StoreProps {\n    withMenu: boolean;\n    actions: {\n        logout: LogoutAction;\n    };\n}\n\ninterface HeaderState {\n    dropdownVisible: boolean;\n    copied: boolean;\n}\n\n/**\n * Header is a visual component providing page branding and navigation.\n */\nclass Header extends React.Component<HeaderProps & RouteProps, HeaderState> {\n    public constructor(props: HeaderProps, context: object) {\n        super(props, context);\n        this.state = {\n            copied: false,\n            dropdownVisible: false,\n        };\n        this.showDropdown = this.showDropdown.bind(this);\n        this.hideDropdown = this.hideDropdown.bind(this);\n        this.copyToClipboard = this.copyToClipboard.bind(this);\n        this.handleLogOut = this.handleLogOut.bind(this);\n    }\n\n    public render(): JSX.Element {\n        const { address, withMenu } = this.props;\n        const { dropdownVisible, copied } = this.state;\n        const route = this.props.location ? this.props.location.pathname : \"\";\n        const path = route.split(\"/\")[1];\n\n        const loggedIn = (address != null);\n\n        return (\n            <div className=\"header\">\n                <div className=\"container\">\n                    <Link to={loggedIn ? \"/exchange\" : \"/\"}>\n                        <div className=\"header--logo\" />\n                    </Link>\n                    {withMenu ?\n                        <ul className=\"header--menu\">\n                            <li className={path === \"exchange\" ? \"active\" : \"\"}><Link to=\"/exchange\"><span>Exchange</span></Link></li>\n                            <li className={path === \"orders\" ? \"active\" : \"\"}><Link to=\"/orders\"><span>Orders</span></Link></li>\n                            <li className={path === \"balances\" ? \"active\" : \"\"}><Link to=\"/balances\"><span>Balances</span></Link></li>\n                            <li className=\"header--logout\" onClick={this.handleLogOut}><Link to=\"\"><span>Logout</span></Link></li>\n                            {address &&\n                                <li\n                                    className=\"header--account\"\n                                    onMouseEnter={this.showDropdown}\n                                    onMouseLeave={this.hideDropdown}\n                                >\n                                    <Blocky address={address} />\n                                    {dropdownVisible ?\n                                        <ul className=\"header--dropdown\">\n                                            <li role=\"button\" onClick={this.copyToClipboard}>\n                                                <span data-addr={address}>\n                                                    {copied ?\n                                                        <span>Copied</span>\n                                                        :\n                                                        <span>{address.substring(0, 8)}...{address.slice(-5)}</span>\n                                                    }\n                                                </span>\n                                            </li>\n                                            <li role=\"button\" onClick={this.handleLogOut}>Logout</li>\n                                        </ul> : null\n                                    }\n                                </li>\n                            }\n                        </ul> : null\n                    }\n                </div>\n            </div>\n        );\n    }\n\n    private showDropdown(): void {\n        this.setState({ dropdownVisible: true, copied: false });\n    }\n\n    private hideDropdown(): void {\n        this.setState({ dropdownVisible: false, copied: false });\n    }\n\n    private copyToClipboard(e: React.MouseEvent<HTMLElement>): void {\n        const el = e.currentTarget.childNodes[0] as Element;\n        const address = el.getAttribute(\"data-addr\");\n        if (address) {\n            const dummy = document.createElement(\"input\");\n            document.body.appendChild(dummy);\n            dummy.setAttribute(\"value\", address);\n            dummy.select();\n            document.execCommand(\"copy\");\n            document.body.removeChild(dummy);\n        }\n        this.setState({ copied: true });\n    }\n\n    private handleLogOut(): void {\n        const { sdk } = this.props;\n        this.props.actions.logout(sdk, { reload: true });\n    }\n}\n\nfunction mapStateToProps(state: ApplicationData): StoreProps {\n    return {\n        address: state.trader.address,\n        sdk: state.sdk.sdk,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch): { actions: HeaderProps[\"actions\"] } {\n    return {\n        actions: bindActionCreators({\n            logout,\n        }, dispatch)\n    };\n}\n\n// tslint:disable-next-line:no-any\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Header) as React.ComponentType<any>);\n","import * as React from \"react\";\n\nimport createClass from \"create-react-class\";\nimport Select, { Option, OptionComponentProps, OptionValues } from \"react-select\";\n\nimport { OrderSettlement, TokenCode } from \"@renex/renex\";\nimport { List } from \"immutable\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators, Dispatch } from \"redux\";\n\nimport history from \"../lib/history\";\n\nimport { setMarket, SetMarketAction } from \"../actions/inputs/inputsActions\";\nimport { Pair, Pairs, TokenDetails, UnknownToken } from \"../lib/market\";\nimport { ApplicationData } from \"../reducers/types\";\n\ninterface StoreProps {\n    market: Pair;\n    supportedTokens: List<TokenCode>;\n    supportedAtomicTokens: List<TokenCode>;\n}\n\ninterface SelectMarketProps extends StoreProps {\n    actions: {\n        setMarket: SetMarketAction;\n    };\n}\n\ninterface SelectMarketState {\n    fstCode: TokenCode | undefined;\n    sndCode: TokenCode | undefined;\n}\n\n// This is for modifying the react-select options\n// tslint:disable-next-line:no-any\nexport const CustomValue: React.SFC<OptionValues> = (props: any) => {\n    const filename = TokenDetails.get(props.value.value, UnknownToken).icon;\n    const image = require(`../tokens/${filename}`);\n    return (\n        <div className=\"Select-value\">\n            <span className=\"Select-value-label\">\n                <img alt=\"\" role=\"presentation\" src={image} />\n                <span><b>{props.value.symbol}</b> – {props.value.name}{props.value.orderSettlement === OrderSettlement.RenExAtomic ? \" (atomic)\" : \"\"}</span>\n            </span>\n        </div>\n    );\n};\n\nexport const CustomOption: React.ClassicComponentClass<OptionComponentProps> = createClass({\n    handleMouseDown(event: React.MouseEvent<HTMLElement>): void {\n        event.preventDefault();\n        event.stopPropagation();\n        this.props.onSelect(this.props.option, event);\n    },\n\n    handleMouseEnter(event: React.MouseEvent<HTMLElement>): void {\n        this.props.onFocus(this.props.option, event);\n    },\n\n    handleMouseMove(event: React.MouseEvent<HTMLElement>): void {\n        if (this.props.isFocused) {\n            return;\n        }\n        this.props.onFocus(this.props.option, event);\n    },\n\n    render(): JSX.Element {\n        const filename = TokenDetails.get(this.props.option.value, UnknownToken).icon;\n        const image = require(`../tokens/${filename}`);\n        return (\n            <div\n                role=\"button\"\n                className={this.props.className}\n                onMouseDown={this.handleMouseDown}\n                onMouseEnter={this.handleMouseEnter}\n                onMouseMove={this.handleMouseMove}\n            >\n                <img role=\"presentation\" alt=\"\" src={image} />\n                {this.props.children}\n            </div>\n        );\n    }\n});\n\n/**\n * SelectMarket is a visual component for displaying an arbitrary component in the\n * foreground with the rest of the page in the background\n */\nclass SelectMarket extends React.Component<SelectMarketProps, SelectMarketState> {\n    public constructor(props: SelectMarketProps, context: object) {\n        super(props, context);\n\n        // Retrieve the order inputs from the store.\n        const { market } = this.props;\n        const marketDetails = Pairs.get(market, undefined);\n\n        let fstCode;\n        let sndCode;\n        if (marketDetails) {\n            fstCode = marketDetails.category || marketDetails.quoteToken;\n            sndCode = fstCode === marketDetails.quoteToken ? marketDetails.baseToken : marketDetails.quoteToken;\n        }\n        this.state = {\n            fstCode,\n            sndCode,\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    public componentWillReceiveProps(nextProps: SelectMarketProps): void {\n        const { market } = nextProps;\n        const marketDetails = Pairs.get(market, undefined);\n\n        if (marketDetails) {\n            let { fstCode, sndCode } = this.state;\n            if (market !== this.props.market) {\n                fstCode = marketDetails.category || marketDetails.quoteToken;\n                sndCode = fstCode === marketDetails.quoteToken ? marketDetails.baseToken : marketDetails.quoteToken;\n                this.setState({ fstCode, sndCode });\n            }\n        }\n    }\n\n    public render(): JSX.Element {\n        const { fstCode, sndCode } = this.state;\n\n        if (fstCode === undefined || sndCode === undefined) {\n            return <></>;\n        }\n\n        const leftCurrencies = this.listCurrencies();\n\n        return (\n            <div className=\"order--currencies\">\n                <Select\n                    className=\"Select--currency\"\n                    name=\"fstCode\"\n                    value={fstCode}\n                    onChange={this.handleChange}\n                    options={leftCurrencies}\n                    // tslint:disable-next-line:no-any\n                    valueComponent={CustomValue as any}\n                    optionComponent={CustomOption}\n                    clearable={false}\n                    backspaceRemoves={false}\n                    deleteRemoves={false}\n                    disabled={leftCurrencies.length < 2}\n                />\n                <Select\n                    className=\"Select--currency\"\n                    name=\"sndCode\"\n                    value={sndCode}\n                    onChange={this.handleChange}\n                    options={this.listPairs(fstCode)}\n                    // tslint:disable-next-line:no-any\n                    valueComponent={CustomValue as any}\n                    optionComponent={CustomOption}\n                    clearable={false}\n                    backspaceRemoves={false}\n                    deleteRemoves={false}\n                />\n            </div>\n        );\n    }\n\n    // private updateMarket(market: Pair): void {\n    //     // let { fstCode, sndCode } = this.state;\n\n    //     // // Check if the pair exists\n    //     // if (!TokenDetails.get(fstCode).pairs.has(sndCode)) {\n    //     //     // If not, check if the inverse of the pair exists\n    //     //     if (TokenDetails.get(sndCode).pairs.has(fstCode)) {\n    //     //         const fstCodeTmp = fstCode;\n    //     //         fstCode = sndCode;\n    //     //         sndCode = fstCodeTmp;\n    //     //         this.setState({ fstCode, sndCode });\n    //     //     } else {\n    //     //         // Otherwise, check if there are any pairs in which it is the\n    //     //         // first token and assign them. If it has no pairs, we revert\n    //     //         // use Token.ETH.\n    //     //         if (!TokenDetails.get(fstCode).pairs.size) {\n    //     //             fstCode = Token.ETH;\n    //     //             this.setState({ fstCode });\n    //     //         }\n    //     //         sndCode = Number(TokenDetails.get(fstCode).pairs.keySeq().first());\n    //     //         if (!isNaN(sndCode)) {\n    //     //             this.setState({ sndCode });\n    //     //         }\n    //     //     }\n    //     // }\n\n    //     // const market = TokenDetails.get(fstCode).pairs.get(sndCode);\n    //     this.props.actions.setMarket({ market });\n    // }\n\n    // tslint:disable-next-line:no-any\n    private handleChange(e: any): void {\n        this.setState((current) => ({ ...current, [e.field]: e.value }), () => {\n            // this.updateMarket(e.market);\n            history.push(\"/exchange\");\n            this.props.actions.setMarket({ market: e.market });\n        });\n    }\n\n    private listCurrencies(): Option[] {\n        const { supportedTokens, supportedAtomicTokens } = this.props;\n        const list: Option[] = [];\n        const tokens = supportedTokens.concat(supportedAtomicTokens).toArray();\n        Array.from(new Set(tokens)).forEach((token: TokenCode) => {\n            // Check if token has any pairs in which it is the 'fstCode'.\n            if (TokenDetails.get(token, UnknownToken).pairs.size > 0) {\n                const { symbol, name, pairs } = TokenDetails.get(token, UnknownToken);\n                list.push({\n                    field: \"fstCode\",\n                    label: `${symbol} – ${name}`,\n                    name,\n                    symbol,\n                    value: token,\n                    market: pairs.first(),\n                });\n            }\n        });\n        return list;\n    }\n\n    private listPairs(fstCode: TokenCode): Option[] {\n        return TokenDetails.get(fstCode, UnknownToken).pairs.map((pair: Pair, token: TokenCode) => {\n            const pairDetails = Pairs.get(pair, undefined);\n            if (!pairDetails) {\n                return;\n            }\n            const { orderSettlement, code } = pairDetails;\n            const { symbol, name } = TokenDetails.get(token, UnknownToken);\n            return {\n                field: \"sndCode\",\n                label: `${symbol} – ${name}${orderSettlement === OrderSettlement.RenExAtomic ? ` (atomic)` : ``}`,\n                name,\n                symbol,\n                value: token,\n                orderSettlement,\n                market: code,\n            };\n        }).toArray().filter(x => x !== undefined) as Option[];\n    }\n}\n\nfunction mapStateToProps(state: ApplicationData): StoreProps {\n    return {\n        market: state.inputs.market,\n        supportedTokens: state.sdk.supportedTokens,\n        supportedAtomicTokens: state.sdk.supportedAtomicTokens,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch): { actions: SelectMarketProps[\"actions\"] } {\n    return {\n        actions: bindActionCreators(\n            {\n                setMarket,\n            }, dispatch)\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectMarket);\n","import BigNumber from \"bignumber.js\";\n\nimport * as React from \"react\";\n\nimport Select, { Option } from \"react-select\";\n\nimport { List, OrderedMap } from \"immutable\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { bindActionCreators } from \"redux\";\n\nimport RenExSDK, { BalanceAction, BalanceActionType, Token, TokenCode, TraderOrder, TransactionStatus } from \"@renex/renex\";\n\nimport Heading from \"./Heading\";\n\nimport { setAlert, SetAlertAction } from \"../actions/alert/alertActions\";\nimport { setBalance, SetBalanceAction } from \"../actions/inputs/inputsActions\";\nimport { deposit, DepositAction, ETH_REQUIRED, withdraw, WithdrawAction } from \"../actions/trader/balanceActions\";\nimport { RenExTokens, TokenDetails, UnknownToken } from \"../lib/market\";\nimport { ErrorCanceledByUser } from \"../lib/wallets/wallet\";\nimport { Alert, AlertType, ApplicationData, BalanceInputs, Settlements } from \"../reducers/types\";\nimport { CustomOption, CustomValue } from \"./SelectMarket\";\n\ninterface StoreProps {\n    accountBalances: OrderedMap<TokenCode, BigNumber | null>;\n    balanceHistory: OrderedMap<string, BalanceAction>;\n    balanceInputs: BalanceInputs;\n    balances: OrderedMap<TokenCode, BigNumber | null>;\n    traderOrders: OrderedMap<string, TraderOrder>;\n    usableBalances: OrderedMap<TokenCode, BigNumber | null>;\n    sdk: RenExSDK;\n    supportedTokens: List<TokenCode>;\n}\n\ninterface ManageBalancesProps extends StoreProps {\n    actions: {\n        setAlert: SetAlertAction;\n        deposit: DepositAction;\n        withdraw: WithdrawAction;\n        setBalance: SetBalanceAction;\n    };\n}\n\ninterface ManageBalancesState {\n    currency: TokenCode;\n    depositAmount: string;\n    withdrawAmount: string;\n    balanceHistorySize: number;\n    pendingWithdrawal: boolean;\n}\n\n/**\n * ManageBalances is a visual component for allowing a user to deposit and\n * withdraw funds\n */\nclass ManageBalances extends React.Component<ManageBalancesProps, ManageBalancesState> {\n    public constructor(props: ManageBalancesProps, context: object) {\n        super(props, context);\n        const { currency, depositAmount, withdrawAmount } = this.props.balanceInputs;\n        this.state = {\n            currency,\n            depositAmount,\n            withdrawAmount,\n            balanceHistorySize: 0,\n            pendingWithdrawal: false,\n        };\n        this.deposit = this.deposit.bind(this);\n        this.withdraw = this.withdraw.bind(this);\n        this.fillDeposit = this.fillDeposit.bind(this);\n        this.fillWithdraw = this.fillWithdraw.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleInput = this.handleInput.bind(this);\n        this.handleBlur = this.handleBlur.bind(this);\n    }\n\n    public componentWillReceiveProps(nextProps: ManageBalancesProps): void {\n        const { balanceHistory, balanceInputs } = nextProps;\n        const { currency } = balanceInputs;\n        if (currency !== this.state.currency) {\n            this.setState({ currency });\n        }\n\n        // Check for pending withdrawal updates if there are new items in the\n        // history or if there is an existing pending withdrawal.\n        if (balanceHistory.size !== this.state.balanceHistorySize || this.state.pendingWithdrawal) {\n            this.setState({ balanceHistorySize: balanceHistory.size });\n            const pendingWithdrawal = balanceHistory.filter((item: BalanceAction | undefined) => {\n                return item !== undefined && item.action === BalanceActionType.Withdraw && item.status === TransactionStatus.Pending;\n            }).size > 0;\n            if (pendingWithdrawal !== this.state.pendingWithdrawal) {\n                this.setState({ pendingWithdrawal });\n            }\n        }\n    }\n\n    public componentWillUnmount() {\n        const { currency, depositAmount, withdrawAmount } = this.state;\n        if (!currency || !depositAmount || !withdrawAmount) {\n            return;\n        }\n        const balanceInputs: BalanceInputs = { currency, depositAmount, withdrawAmount };\n        this.props.actions.setBalance({ balanceInputs });\n    }\n\n    public render(): JSX.Element {\n        const { usableBalances, accountBalances } = this.props;\n        const { currency, depositAmount, withdrawAmount } = this.state;\n\n        const parsedDepositAmount = new BigNumber(depositAmount);\n        const parsedWithdrawAmount = new BigNumber(withdrawAmount);\n\n        const depositable = accountBalances.get(currency) || new BigNumber(0);\n        const withdrawable = usableBalances.get(currency) || new BigNumber(0);\n\n        const disableDeposit =\n            !parsedDepositAmount.gt(new BigNumber(0)) ||\n            !parsedDepositAmount.lte(depositable);\n        const disableWithdraw =\n            !parsedWithdrawAmount.gt(new BigNumber(0)) ||\n            !parsedWithdrawAmount.lte(withdrawable);\n\n        return (\n            <div className=\"manage\">\n                <div className=\"container\">\n                    <Heading title=\"Deposit or Withdraw\" />\n                    <div className=\"manage--form\">\n                        <Select\n                            className=\"Select--currency\"\n                            name=\"token\"\n                            value={currency}\n                            onChange={this.handleChange}\n                            options={this.listCurrencies()}\n                            // tslint:disable-next-line:no-any\n                            valueComponent={CustomValue as any}\n                            optionComponent={CustomOption}\n                            clearable={false}\n                            backspaceRemoves={false}\n                            deleteRemoves={false}\n                        />\n                        <div className=\"manage--row\">\n                            <label>\n                                <div className=\"manage--title\">\n                                    <span>Deposit (<span\n                                        role=\"button\"\n                                        className=\"manage--option\"\n                                        onClick={this.fillDeposit}\n                                    >Max</span>)</span>\n                                </div>\n                                <span className=\"manage--input-item\">\n                                    <input\n                                        role=\"textbox\"\n                                        type=\"number\"\n                                        value={depositAmount}\n                                        name=\"depositAmount\"\n                                        min={0}\n                                        onChange={this.handleInput}\n                                        onBlur={this.handleBlur}\n                                    />\n                                    <span>{TokenDetails.get(currency, UnknownToken).symbol}</span>\n                                    <button\n                                        disabled={disableDeposit}\n                                        onClick={this.deposit}\n                                    >Deposit</button>\n                                </span>\n                            </label>\n                            <label>\n                                <div className=\"manage--title\">\n                                    <span>Withdraw (<span\n                                        role=\"button\"\n                                        className=\"manage--option\"\n                                        onClick={this.fillWithdraw}\n                                    >Max</span>)</span>\n                                </div>\n                                <span className=\"manage--input-item\">\n                                    <input\n                                        role=\"textbox\"\n                                        type=\"number\"\n                                        value={withdrawAmount}\n                                        name=\"withdrawAmount\"\n                                        min={0}\n                                        onChange={this.handleInput}\n                                        onBlur={this.handleBlur}\n                                    />\n                                    <span>{TokenDetails.get(currency, UnknownToken).symbol}</span>\n                                    <button\n                                        disabled={disableWithdraw}\n                                        onClick={this.withdraw}\n                                    >Withdraw</button>\n                                </span>\n                            </label>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    private async deposit(): Promise<void> {\n        const { sdk, balanceHistory, traderOrders, usableBalances, accountBalances } = this.props;\n        const { currency, depositAmount } = this.state;\n\n        try {\n            await this.props.actions.deposit(\n                sdk, balanceHistory, traderOrders, usableBalances, accountBalances, depositAmount, currency,\n            );\n        } catch (err) {\n            if (err.message !== ErrorCanceledByUser) {\n                this.props.actions.setAlert({\n                    alert: new Alert({\n                        alertType: AlertType.Error,\n                        message: err.message || err,\n                    })\n                });\n            }\n        }\n    }\n\n    private async withdraw(): Promise<void> {\n        const { sdk, balances, usableBalances } = this.props;\n        const { currency, withdrawAmount, pendingWithdrawal } = this.state;\n\n        if (pendingWithdrawal) {\n            this.props.actions.setAlert({ alert: new Alert({ message: \"Please wait until the current withdrawal is complete\" }) });\n            return;\n        }\n\n        try {\n            await this.props.actions.withdraw(\n                sdk, balances, usableBalances, withdrawAmount, currency,\n            );\n        } catch (err) {\n            if (err.message !== ErrorCanceledByUser) {\n                this.props.actions.setAlert({\n                    alert: new Alert({\n                        alertType: AlertType.Error,\n                        message: err.message || err,\n                    })\n                });\n            }\n        }\n    }\n\n    private async fillDeposit(): Promise<void> {\n        const { sdk, accountBalances } = this.props;\n        const { currency } = this.state;\n        let depositAmount = accountBalances.get(currency) || new BigNumber(0);\n\n        // Subtract necessary ETH from deposit amount to account for\n        // deposit/withdrawal fees as well as additional fees for opening\n        // orders.\n        if (currency === Token.ETH) {\n            depositAmount = depositAmount.minus(new BigNumber(ETH_REQUIRED));\n            if (depositAmount.lt(new BigNumber(0))) {\n                depositAmount = new BigNumber(0);\n            }\n        }\n\n        this.setState({ depositAmount: depositAmount.toFixed() });\n    }\n\n    private fillWithdraw(): void {\n        const { usableBalances } = this.props;\n        const { currency } = this.state;\n        const withdrawAmount = usableBalances.get(currency) || new BigNumber(0);\n        this.setState({ withdrawAmount: withdrawAmount.toFixed() });\n    }\n\n    private listCurrencies(): Option[] {\n        const { supportedTokens } = this.props;\n        const list: Option[] = [];\n        RenExTokens(supportedTokens).forEach((token: TokenCode) => {\n            const { symbol, name } = TokenDetails.get(token, UnknownToken);\n            list.push({\n                label: `${symbol} – ${name}`,\n                name,\n                symbol,\n                value: token,\n            });\n        });\n        return list;\n    }\n\n    private handleChange(selected: { value: TokenCode; label: string }): void {\n        const { depositAmount, withdrawAmount } = this.state;\n        const currency = selected.value;\n        // if (!currency || !depositAmount || !withdrawAmount) {\n        //     return;\n        // }\n        this.setState({ currency });\n        const balanceInputs: BalanceInputs = { currency, depositAmount, withdrawAmount };\n        this.props.actions.setBalance({ balanceInputs });\n    }\n\n    private handleInput(event: React.FormEvent<HTMLInputElement>): void {\n        const element = (event.target as HTMLInputElement);\n        this.setState((current) => ({ ...current, [element.name]: element.value }));\n    }\n\n    private handleBlur(event: React.FormEvent<HTMLInputElement>): void {\n        const { accountBalances, usableBalances } = this.props;\n        const { currency } = this.state;\n        const element = (event.target as HTMLInputElement);\n\n        let maximum: BigNumber;\n        switch (element.name) {\n            case \"withdrawAmount\": maximum = usableBalances.get(currency) || new BigNumber(0); break;\n            case \"depositAmount\": maximum = accountBalances.get(currency) || new BigNumber(0); break;\n            default: return;\n        }\n\n        // Cap the input to available balance\n        let input = new BigNumber(element.value);\n        if (input.gt(maximum)) {\n            input = maximum;\n        }\n        this.setState((current) => ({ ...current, [element.name]: input }));\n    }\n}\n\nfunction mapStateToProps(state: ApplicationData): StoreProps {\n    return {\n        accountBalances: state.trader.accountBalances,\n        balanceHistory: state.balanceHistory.balanceHistory,\n        balanceInputs: state.inputs.balanceInputs,\n        balances: state.trader.balances,\n        traderOrders: state.traderBook.traderOrders,\n        usableBalances: state.trader.usableBalances,\n        sdk: state.sdk.sdk,\n        supportedTokens: state.sdk.supportedTokens,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch): { actions: ManageBalancesProps[\"actions\"] } {\n    return {\n        actions: bindActionCreators({\n            deposit,\n            setAlert,\n            setBalance,\n            withdraw,\n        }, dispatch)\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageBalances);\n","import * as React from \"react\";\n\nimport { OrderedMap } from \"immutable\";\nimport { connect } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport { Dispatch } from \"redux\";\nimport { bindActionCreators } from \"redux\";\n\nimport { setMarket, SetMarketAction } from \"../actions/inputs/inputsActions\";\nimport { Pair, PairDetails, Pairs, TokenDetails } from \"../lib/market\";\nimport { ApplicationData, MarketPrice } from \"../reducers/types\";\n\ninterface StoreProps {\n    market: Pair;\n    marketPrices: OrderedMap<Pair, MarketPrice>;\n}\n\ninterface MarketBannerProps extends StoreProps {\n    actions: {\n        setMarket: SetMarketAction;\n    };\n}\n\ninterface MarketBannerState {\n}\n\n/**\n * MarketBanner is a visual component for displaying market price changes in a\n * banner format\n */\nclass MarketBanner extends React.Component<MarketBannerProps, MarketBannerState> {\n    public render(): JSX.Element {\n        return (\n            <div className=\"market\">\n                <div className=\"container\">\n                    <ul className=\"market--items\">\n                        {this.listPairs()}\n                    </ul>\n                </div>\n            </div>\n        );\n    }\n\n    private listPairs(): JSX.Element[] {\n        const { marketPrices } = this.props;\n        let key = 0;\n        return Pairs.map((pairDetails: PairDetails) => {\n            key++;\n            const pair = pairDetails.code;\n            const marketPrice = marketPrices.get(pair, undefined);\n            if (marketPrice === undefined || pair === Pair.BTC_WBTC) {\n                return <div key={key} />;\n            }\n            const percentChange = marketPrice ? `${marketPrice.percentChange.toFixed(2)}%` : \"\";\n            const price = marketPrice ? marketPrice.price : \"\";\n            const fstDetails = TokenDetails.get(pairDetails.quoteToken, undefined);\n            const sndDetails = TokenDetails.get(pairDetails.baseToken, undefined);\n\n            if (!fstDetails || !sndDetails) {\n                return <div key={key} />;\n            }\n\n            return (\n                <li key={key} title={price.toString()}>\n                    <Link to=\"/exchange\" onClick={this.updateMarket.bind(this, pair)}>\n                        <span>{`${sndDetails.symbol}/${fstDetails.symbol}`}:</span>\n                    </Link>\n                    <span className={`${marketPrice.percentChange < 0 ? \"negative\" : \"positive\"}`}>{percentChange}</span>\n                </li>\n            );\n        }).toArray();\n    }\n\n    private updateMarket(market: Pair): void {\n        if (market !== this.props.market) {\n            this.props.actions.setMarket({ market });\n        }\n    }\n}\n\nfunction mapStateToProps(state: ApplicationData): StoreProps {\n    return {\n        market: state.inputs.market,\n        marketPrices: state.marketPrices.marketPrices,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch): { actions: MarketBannerProps[\"actions\"] } {\n    return {\n        actions: bindActionCreators({\n            setMarket,\n        }, dispatch)\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MarketBanner);\n","import * as React from \"react\";\n\nimport Loading from \"../../components/Loading\";\n\ninterface SigningPopupProps {\n    data: string[];\n    sign(): Promise<void>;\n}\n\ninterface SigningPopupState {\n    error: string | null;\n    signing: boolean;\n}\n\n/**\n * SigningPopup is a popup component for prompting for a user's ethereum\n * signature\n */\nclass SigningPopup extends React.Component<SigningPopupProps, SigningPopupState> {\n    constructor(props: SigningPopupProps) {\n        super(props);\n        this.state = {\n            error: null,\n            signing: true,\n        };\n    }\n\n    public async componentDidMount() {\n        this.callSign().catch(null);\n    }\n\n    public render(): JSX.Element {\n        const { signing, error } = this.state;\n        const { data } = this.props;\n        return <div className=\"popup sign\">\n            <h2>Approve signature</h2>\n            <p className=\"sign--data\">{data.map((item, key) => <span key={key} className=\"monospace sign--datum\">{item}</span>)}</p>\n            {signing ?\n                <>\n                    <Loading />\n                </> :\n                <>\n                    {error ? <p className=\"red\">{error}</p> : null}\n                    <button className=\"sign--button\" onClick={this.callSign}>Try again</button>\n                </>\n            }\n        </div>;\n    }\n\n    private callSign = async () => {\n        const { sign } = this.props;\n\n        this.setState({ signing: true, error: null });\n\n        try {\n            await sign();\n        } catch (err) {\n            this.setState({ error: err.message || err });\n        }\n        this.setState({ signing: false });\n    }\n}\n\nexport default SigningPopup;\n","import * as React from \"react\";\n\nimport RenExSDK, { AtomicConnectionStatus } from \"@renex/renex\";\n\nimport { Dispatch } from \"redux\";\n\nimport SigningPopup from \"../../components/popups/SigningPopup\";\n\nimport { createStandardAction } from \"typesafe-actions\";\nimport { clearPopup, setPopup } from \"../../actions/popup/popupActions\";\n\ninterface UpdateAtomConnectionStatusPayload { atomConnectionStatus: AtomicConnectionStatus; }\nexport type UpdateAtomConnectionStatusAction = (payload: UpdateAtomConnectionStatusPayload) => void;\nexport const updateAtomConnectionStatus = createStandardAction(\"UPDATE_ATOM_CONNECTION_STATUS\")<UpdateAtomConnectionStatusPayload>();\n\nexport type RefreshAtomConnectionStatusAction = (sdk: RenExSDK) => (dispatch: Dispatch) => Promise<void>;\nexport const refreshAtomConnectionStatus: RefreshAtomConnectionStatusAction = (sdk) => async (dispatch) => {\n    const atomConnectionStatus = await sdk.atom.refreshStatus();\n    dispatch(updateAtomConnectionStatus({ atomConnectionStatus }));\n};\n\nexport type AuthorizeSwapperAction = (sdk: RenExSDK) => (dispatch: Dispatch) => Promise<void>;\nexport const authorizeSwapper: AuthorizeSwapperAction = (sdk) => async (dispatch) => new Promise((resolve, reject) => {\n\n    const data: string[] = [`RenEx:`, `authorize:`, sdk._atomConnectedAddress];\n\n    const call = async () => {\n        const status = await sdk.atom.authorize();\n        dispatch(clearPopup());\n        return resolve(status);\n    };\n\n    const onCancel = () => {\n        dispatch(clearPopup());\n        reject();\n    };\n\n    const popup = <SigningPopup data={data} sign={call} />;\n\n    dispatch(setPopup({ popup, onCancel }));\n    // tslint:disable-next-line:no-any\n}) as any;\n","import * as React from \"react\";\n\nimport RenExSDK, { AtomicConnectionStatus } from \"@renex/renex\";\n\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { bindActionCreators } from \"redux\";\n\nimport Loading from \"./Loading\";\n\nimport { authorizeSwapper, AuthorizeSwapperAction, updateAtomConnectionStatus, UpdateAtomConnectionStatusAction } from \"../actions/settlement/atomicActions\";\nimport { ApplicationData } from \"../reducers/types\";\n\ninterface StoreProps {\n    sdk: RenExSDK;\n    atomConnectionStatus: AtomicConnectionStatus;\n}\n\n// // tslint:disable-next-line:no-any\n// type ConnectedAction<F extends (args: any) => (dispatch: Dispatch) => Promise<any>> =\n//     F extends (...args: infer Args) => (d: Dispatch) => Promise<infer X> ? (...args: Args) => Promise<X> : never;\n\ninterface AtomicNoticeProps extends StoreProps {\n    actions: {\n        authorizeSwapper: AuthorizeSwapperAction;\n        updateAtomConnectionStatus: UpdateAtomConnectionStatusAction;\n    };\n}\n\ninterface AtomicNoticeState {\n    linkError: string | null;\n    linkPending: boolean;\n}\n\nclass InnerAtomicNotice extends React.Component<AtomicNoticeProps, AtomicNoticeState> {\n\n    constructor(props: AtomicNoticeProps) {\n        super(props);\n        this.state = {\n            linkError: null,\n            linkPending: false,\n        };\n    }\n\n    // tslint:disable:jsx-no-lambda\n    public render(): JSX.Element {\n        const { sdk, atomConnectionStatus } = this.props;\n        const { linkPending, linkError } = this.state;\n\n        const reconnect = <button onClick={async () => { await this.handleLinkAtom(sdk.atom.resetStatus); }} disabled={linkPending}>\n            {linkPending ? <Loading /> : \"Retry\"}\n        </button>;\n\n        let inner;\n\n        switch (atomConnectionStatus) {\n            case AtomicConnectionStatus.NotConnected:\n                inner = <>\n                    <h2>Could not detect Swapperd</h2>\n                    <p>The Swapperd software is required for trading atomic swap pairs and viewing atomic balances. You can download the software using the links below:</p>\n                    <ul>\n                        <li><a href=\"https://releases.republicprotocol.com/swapperd/Swapperd.exe\">Swapperd for Windows</a></li>\n                        <li><a href=\"https://releases.republicprotocol.com/swapperd/Swapperd.dmg\">Swapperd for MacOS</a></li>\n                    </ul>\n                    {linkError && <p className=\"red\">{linkError}</p>}\n                    {reconnect}\n                </>;\n                break;\n            case AtomicConnectionStatus.NotAuthorized:\n                inner = <>\n                    <p>Your Swapperd has not been configured for this wallet. Please update your Swapperd configuration.</p>\n                    {linkError && <p className=\"red\">{linkError}</p>}\n                    {reconnect}\n                </>;\n                break;\n            case AtomicConnectionStatus.AtomNotAuthorized:\n                inner = <>\n                    <p>Your Swapperd needs to be authorized to action orders on your behalf.</p>\n                    {linkError && <p className=\"red\">{linkError}</p>}\n                    { /* tslint:disable-next-line:no-any */}\n                    <button onClick={async () => { await this.handleLinkAtom(() => (this.props.actions.authorizeSwapper as any)(sdk)); }} disabled={linkPending}>\n                        {linkPending ? <Loading /> : linkError ? \"Retry\" : \"Authorize\"}\n                    </button>\n                </>;\n                break;\n            case AtomicConnectionStatus.ChangedSwapper:\n                inner = <>\n                    <p>Your Swapperd details have changed. After ensuring your Swapperd details are correct and have been correctly configured correctly, click the Reconnect button.</p>\n                    {linkError && <p className=\"red\">{linkError}</p>}\n                    {reconnect}\n                </>;\n                break;\n            case AtomicConnectionStatus.InvalidSwapper:\n                inner = <>\n                    <p>Unable to verify authenticity of Swapperd. Please try updating the application.</p>\n                    {linkError && <p className=\"red\">{linkError}</p>}\n                    {reconnect}\n                </>;\n                break;\n            default:\n                inner = <p>Unknown Swapperd connection status: {atomConnectionStatus}</p>;\n        }\n\n        return <div className=\"order--wrapper\">\n            {inner}\n        </div>;\n    }\n    // tslint:enable:jsx-no-lambda\n\n    private handleLinkAtom = async (atomAction: () => Promise<AtomicConnectionStatus>) => {\n        const { actions } = this.props;\n        this.setState({\n            linkError: null,\n            linkPending: true,\n        });\n        return atomAction().then(atomConnectionStatus => {\n            this.setState({\n                linkPending: false,\n            });\n            actions.updateAtomConnectionStatus({ atomConnectionStatus });\n        }).catch(() => {\n            this.setState({\n                linkPending: false,\n            });\n        });\n    }\n}\n\nfunction mapStateToProps(state: ApplicationData): StoreProps {\n    return {\n        sdk: state.sdk.sdk,\n        atomConnectionStatus: state.trader.atomConnectionStatus,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch): { actions: AtomicNoticeProps[\"actions\"] } {\n    return {\n        actions: bindActionCreators({\n            authorizeSwapper,\n            updateAtomConnectionStatus,\n        }, dispatch)\n    };\n}\n\nexport const AtomicNotice = connect(mapStateToProps, mapDispatchToProps)(InnerAtomicNotice);\n","import * as React from \"react\";\n\nimport { LabelType } from \"../reducers/types\";\n\ninterface InfoLabelProps {\n    type?: LabelType;\n    children?: React.ReactNode;\n}\n\ninterface InfoLabelState {\n    top: number;\n    left: number;\n}\n\n/**\n * InfoLabel is a visual component for displaying an information message for\n * another component\n */\nexport class InfoLabel extends React.Component<InfoLabelProps, InfoLabelState> {\n    constructor(props: InfoLabelProps) {\n        super(props);\n        this.state = {\n            top: 0,\n            left: 0,\n        };\n        this.onMouseEnter = this.onMouseEnter.bind(this);\n    }\n\n    public render() {\n        const { type, children } = this.props;\n        const iconType = type || LabelType.Info;\n        return (\n            <div className=\"label\">\n                <div className={`label--icon ${iconType}--icon`} onMouseEnter={this.onMouseEnter} />\n                <div style={this.state} className=\"label--message\">{children ? children : \"\"}</div>\n            </div>\n        );\n    }\n\n    private onMouseEnter(event: React.MouseEvent<HTMLElement>) {\n        const { top, left, width, height } = event.currentTarget.getBoundingClientRect();\n        this.setState({\n            top: top - height / 2,\n            left: left + width / 2,\n        });\n    }\n}\n","import BigNumber from \"bignumber.js\";\n\nimport * as React from \"react\";\n\nimport { AtomicConnectionStatus, TokenCode } from \"@renex/renex\";\nimport { List, OrderedMap } from \"immutable\";\nimport { connect } from \"react-redux\";\n\nimport Heading from \"./Heading\";\n\nimport { RenExAtomicTokens, TokenDetails, UnknownToken } from \"../lib/market\";\nimport { ApplicationData, LabelType } from \"../reducers/types\";\nimport { AtomicNotice } from \"./AtomicNotice\";\nimport { InfoLabel } from \"./InfoLabel\";\n\ninterface StoreProps {\n    atomConnectionStatus: AtomicConnectionStatus;\n    atomicAddresses: OrderedMap<TokenCode, string>;\n    atomicBalances: OrderedMap<TokenCode, BigNumber | null>;\n    usableAtomicBalances: OrderedMap<TokenCode, BigNumber | null>;\n    supportedAtomicTokens: List<TokenCode>;\n}\n\ninterface ViewAtomicBalancesProps extends StoreProps {\n}\n\ninterface ViewAtomicBalancesState {\n}\n\n/**\n * ViewAtomicBalances is a visual component for displaying the user's balances\n * held by the atomic-swap software, Atom\n */\nclass ViewAtomicBalances extends React.Component<ViewAtomicBalancesProps, ViewAtomicBalancesState> {\n    public render(): JSX.Element {\n        return (\n            <div className=\"section view\">\n                <div className=\"container\">\n                    <Heading title=\"Balances held by Swapperd\" />\n                    {!this.atomConnected() ? <AtomicNotice /> :\n                        <div className=\"table--wrapper\">\n                            <table>\n                                <thead>\n                                    <tr>\n                                        <th>Token</th>\n                                        <th>Address</th>\n                                        <th>Total Balance\n                                </th>\n                                        <th>\n                                            Usable Balance\n                                    <InfoLabel>The amount you have deposited, excluding balances locked in open orders.</InfoLabel>\n                                        </th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {this.generateRows()}\n                                </tbody>\n                            </table>\n                        </div>\n                    }\n                </div>\n            </div>\n        );\n    }\n\n    private atomConnected(): boolean {\n        const { atomConnectionStatus } = this.props;\n        return (\n            atomConnectionStatus === AtomicConnectionStatus.ConnectedLocked ||\n            atomConnectionStatus === AtomicConnectionStatus.ConnectedUnlocked\n        );\n    }\n\n    private generateRows(): JSX.Element[] {\n        const list: JSX.Element[] = [];\n        const { atomicAddresses, atomicBalances, usableAtomicBalances, supportedAtomicTokens } = this.props;\n        RenExAtomicTokens(supportedAtomicTokens).forEach((token: TokenCode) => {\n            const { name, symbol, icon } = TokenDetails.get(token, UnknownToken);\n\n            const address = atomicAddresses.get(token, undefined) || \"-\";\n\n            const balance = atomicBalances.get(token, undefined);\n            const balanceReadable = balance !== undefined && balance !== null ? `${balance.toFixed()} ${symbol}` : \"-\";\n\n            const usable = usableAtomicBalances.get(token, undefined);\n            const usableReadable = usable !== undefined && usable !== null ? `${usable.toFixed()} ${symbol}` : \"-\";\n\n            // let locked = balance.minus(usable);\n            // if (locked.isLessThan(0)) {\n            //     locked = new BigNumber(0);\n            // }\n\n            const image = require(`../tokens/${icon}`);\n\n            list.push(\n                <tr key={token}>\n                    <td>\n                        <img alt=\"\" role=\"presentation\" src={image} />\n                        <span>{`${name} `}</span>\n                    </td>\n                    <td className=\"monospace\">{address}</td>\n                    <td>\n                        {balanceReadable}\n                        {balance === null &&\n                            <InfoLabel type={LabelType.Warning}>Failed to retrieve total {symbol} balance.</InfoLabel>\n                        }\n                    </td>\n                    <td>\n                        {usableReadable}\n                        {usable === null &&\n                            <InfoLabel type={LabelType.Warning}>Failed to retrieve usable {symbol} balance.</InfoLabel>\n                        }\n                    </td>\n                </tr >\n            );\n        });\n        return list;\n    }\n}\n\nfunction mapStateToProps(state: ApplicationData): StoreProps {\n    return {\n        atomicAddresses: state.trader.atomicAddresses,\n        atomicBalances: state.trader.atomicBalances,\n        usableAtomicBalances: state.trader.usableAtomicBalances,\n        atomConnectionStatus: state.trader.atomConnectionStatus,\n        supportedAtomicTokens: state.sdk.supportedAtomicTokens,\n    };\n}\n\nexport default connect(mapStateToProps)(ViewAtomicBalances);\n","import BigNumber from \"bignumber.js\";\n\nimport * as React from \"react\";\n\nimport RenExSDK, { Token, TokenCode, TraderOrder } from \"@renex/renex\";\nimport { List, OrderedMap } from \"immutable\";\nimport { connect } from \"react-redux\";\n\nimport Heading from \"./Heading\";\n\nimport { RenExTokens, TokenDetails, UnknownToken } from \"../lib/market\";\nimport { networkData } from \"../lib/network\";\nimport { ApplicationData, LabelType } from \"../reducers/types\";\nimport { InfoLabel } from \"./InfoLabel\";\n\ninterface StoreProps {\n    sdk: RenExSDK;\n    supportedTokens: List<TokenCode>;\n    accountBalances: OrderedMap<TokenCode, BigNumber | null>;\n    balances: OrderedMap<TokenCode, BigNumber | null>;\n    usableBalances: OrderedMap<TokenCode, BigNumber | null>;\n    traderOrders: OrderedMap<string, TraderOrder>;\n}\n\ninterface ViewBalancesProps extends StoreProps {\n}\n\ninterface ViewBalancesState {\n}\n\n/**\n * ViewBalances is a visual component for displaying the user's Ether and token\n * balances\n */\nclass ViewBalances extends React.Component<ViewBalancesProps, ViewBalancesState> {\n\n    public render(): JSX.Element {\n        return (\n            <div className=\"section view\">\n                <div className=\"container\">\n                    <Heading title=\"Your balances\" />\n                    <div className=\"table--wrapper\">\n                        <table>\n                            <thead>\n                                <tr>\n                                    <th>Token</th>\n                                    <th>\n                                        Non-Deposited Balance\n                                </th>\n                                    <th>\n                                        Deposited Balance\n                                    <InfoLabel>The amount you have deposited to your RenEx wallet.</InfoLabel>\n                                    </th>\n                                    <th>\n                                        Usable Balance\n                                    <InfoLabel>The amount you have deposited, excluding balances locked in open orders or pending withdrawals.</InfoLabel>\n                                    </th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {this.generateRows()}\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    private generateRows(): JSX.Element[] {\n        const { balances, usableBalances, accountBalances, supportedTokens } = this.props;\n\n        const list: JSX.Element[] = [];\n        RenExTokens(supportedTokens).forEach((token: TokenCode) => {\n            const { name, symbol, icon, address } = TokenDetails.get(token, UnknownToken);\n            const balance = balances.get(token, null);\n            const usableBalance = usableBalances.get(token, null);\n            const accountBalance = accountBalances.get(token, null);\n\n            const readableBalanceText = (balance !== null) ? balance.toFixed() : \"-\";\n            const readableUsableBalanceText = (usableBalance !== null) ? usableBalance.toFixed() : \"-\";\n            const readableAccountBalanceText = (accountBalance !== null) ? accountBalance.toFixed() : \"-\";\n            const image = require(`../tokens/${icon}`);\n\n            let link;\n            if (token !== Token.ETH) {\n                const TOKEN_URL = `${networkData.etherscan}/token/${address}`;\n                link =\n                    <a className=\"view--external\" href={TOKEN_URL} rel=\"noopener noreferrer\" target=\"_blank\" title=\"View on Etherscan\">\n                        <span>&rarr;</span>\n                    </a>;\n            }\n            list.push(\n                <tr key={token}>\n                    <td>\n                        <img alt=\"\" role=\"presentation\" src={image} />\n                        <span>{`${name} `}</span>\n                        {link}\n                    </td>\n                    <td>\n                        {`${readableAccountBalanceText} ${symbol}`}\n                        {accountBalance === null &&\n                            <InfoLabel type={LabelType.Warning}>Failed to retrieve non-deposited {symbol} balance.</InfoLabel>\n                        }\n                    </td>\n                    <td>\n                        {`${readableBalanceText} ${symbol}`}\n                        {balance === null &&\n                            <InfoLabel type={LabelType.Warning}>Failed to retrieve deposited {symbol} balance.</InfoLabel>\n                        }\n                    </td>\n                    <td>\n                        {`${readableUsableBalanceText} ${symbol}`}\n                        {usableBalance === null &&\n                            <InfoLabel type={LabelType.Warning}>Failed to retrieve usable {symbol} balance.</InfoLabel>\n                        }\n                    </td>\n                </tr >\n            );\n        });\n        return list;\n    }\n}\n\nfunction mapStateToProps(state: ApplicationData): StoreProps {\n    return {\n        sdk: state.sdk.sdk,\n        supportedTokens: state.sdk.supportedTokens,\n        accountBalances: state.trader.accountBalances,\n        balances: state.trader.balances,\n        usableBalances: state.trader.usableBalances,\n        traderOrders: state.traderBook.traderOrders,\n    };\n}\n\nexport default connect(mapStateToProps)(ViewBalances);\n","import * as React from \"react\";\n\nimport BalanceBanner from \"../../components/BalanceBanner\";\nimport BalanceHistory from \"../../components/BalanceHistory\";\nimport Header from \"../../components/Header\";\nimport ManageBalances from \"../../components/ManageBalances\";\nimport MarketBanner from \"../../components/MarketBanner\";\nimport ViewAtomicBalances from \"../../components/ViewAtomicBalances\";\nimport ViewBalances from \"../../components/ViewBalances\";\n\ninterface BalancesProps {\n}\n\ninterface BalancesState {\n}\n\n/**\n * Balances is a page whose principal components allows the user to withdraw and\n * deposit funds, and see their previous balance actions.\n */\nclass Balances extends React.Component<BalancesProps, BalancesState> {\n    public render(): JSX.Element {\n        return (\n            <div className=\"balances\">\n                <MarketBanner />\n                <Header withMenu={true} />\n                <BalanceBanner />\n                <div className=\"content\">\n                    <ManageBalances />\n                    <ViewBalances />\n                    <ViewAtomicBalances />\n                    <BalanceHistory />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Balances;\n","import * as React from \"react\";\n\nimport { List } from \"immutable\";\n\n// Used for CSS styling\nconst NUMERATOR = 164; // pixels\nconst DENOMINATOR = 94; // pixels\nconst OFFSET = 8994; // pixels\n\ninterface ConsoleProps {\n    logs: List<JSX.Element>;\n}\n\ninterface ConsoleState {\n    level: number;\n}\n\nexport class Console extends React.Component<ConsoleProps, ConsoleState> {\n    private bottomElement: HTMLElement | null = null;\n    constructor(props: ConsoleProps) {\n        super(props);\n        this.state = {\n            level: OFFSET,\n        };\n    }\n\n    public render(): JSX.Element {\n        const { level } = this.state;\n        return (\n            <div className={`monospace console ${level > (NUMERATOR + DENOMINATOR ** 2) ? \"enhanced\" : \"\"}`} onClick={this.onClickHandler}>\n                {this.props.logs}\n                <div ref={ref => { this.bottomElement = ref; }} />\n            </div>);\n    }\n\n    public componentDidMount() {\n        this.scrollToBottom();\n    }\n\n    public componentWillReceiveProps() {\n        this.scrollToBottom();\n    }\n\n    private scrollToBottom = () => {\n        // Render any new logs before scrolling to bottom\n        this.forceUpdate(() => {\n            if (this.bottomElement) {\n                this.bottomElement.scrollIntoView({ behavior: \"smooth\" });\n            }\n        });\n    }\n\n    private onClickHandler = (event: React.MouseEvent<HTMLElement>) => {\n        const { level } = this.state;\n        this.setState({\n            level: level + 1,\n        });\n    }\n}\n","import * as React from \"react\";\n\nimport BigNumber from \"bignumber.js\";\n\nimport { TokenDetail } from \"../lib/market\";\n\ninterface TradeTokenBannerProps {\n    spendToken: TokenDetail;\n    receiveToken: TokenDetail;\n    spendVolume?: BigNumber;\n    receiveVolume?: BigNumber;\n    leftArrow?: boolean;\n}\n\ninterface TradeTokenBannerState {\n}\n\nexport class TradeTokenBanner extends React.Component<TradeTokenBannerProps, TradeTokenBannerState> {\n    constructor(props: TradeTokenBannerProps) {\n        super(props);\n    }\n\n    public render(): JSX.Element {\n        const { spendToken, receiveToken, spendVolume, receiveVolume, leftArrow } = this.props;\n        const spendTokenIcon = require(`../tokens/${spendToken.icon}`);\n        const receiveTokenIcon = require(`../tokens/${receiveToken.icon}`);\n\n        return <div className=\"open--tokens\">\n            <div>\n                <img alt=\"\" role=\"presentation\" src={spendTokenIcon} />\n                {spendVolume && <p>{spendVolume.toFixed()} {spendToken.symbol}</p>}\n            </div>\n            <div className=\"open--arrow\">{leftArrow ? \"←\" : \"→\"}</div>\n            <div>\n                <img alt=\"\" role=\"presentation\" src={receiveTokenIcon} />\n                {receiveVolume && <p>{receiveVolume.toFixed()} {receiveToken.symbol}</p>}\n            </div>\n        </div>;\n    }\n}\n","import * as React from \"react\";\n\nimport BigNumber from \"bignumber.js\";\n\nimport { OrderInputs, OrderSide, SimpleConsole, Token } from \"@renex/renex\";\nimport { List } from \"immutable\";\nimport { connect } from \"react-redux\";\n\nimport { SetPopupPayload } from \"../../actions/popup/popupActions\";\nimport { Console } from \"../../components/Console\";\nimport { TradeTokenBanner } from \"../../components/TradeTokenBanner\";\nimport { TokenDetails, UnknownToken } from \"../../lib/market\";\nimport { ErrorCanceledByUser } from \"../../lib/wallets/wallet\";\nimport { ApplicationData } from \"../../reducers/types\";\n\ninterface StoreProps {\n    feePercent: BigNumber;\n}\n\ninterface OpenOrderPopupProps extends StoreProps {\n    call: (simpleConsole: SimpleConsole) => Promise<void>;\n    closePopup: () => void;\n    orderInputs: OrderInputs;\n    skipConfirm?: boolean;\n}\n\ninterface OpenOrderPopupState {\n    confirmed: boolean;\n    error: Error | null;\n    logCount: number;\n    logs: List<JSX.Element>;\n}\n\n/**\n * OpenOrderPopup is a popup component that prompts the user to approve a\n * series of Ethereum transactions\n */\nclass InnerOpenOrderPopup extends React.Component<OpenOrderPopupProps, OpenOrderPopupState> {\n    private consoleBottom: HTMLDivElement | null = null;\n\n    constructor(props: OpenOrderPopupProps) {\n        super(props);\n        this.state = {\n            confirmed: props.skipConfirm !== undefined && props.skipConfirm,\n            error: null,\n            logCount: 0,\n            logs: List(),\n        };\n    }\n\n    public async componentDidMount(): Promise<void> {\n        if (this.state.confirmed) {\n            await this.onConfirm();\n        }\n    }\n\n    public render(): JSX.Element {\n        const { confirmed } = this.state;\n\n        let inner;\n        if (!confirmed) {\n            inner = this.renderConfirm();\n        } else {\n            inner = this.renderOpening();\n        }\n\n        return <div className=\"popup open\">\n            {inner}\n        </div>;\n    }\n\n    private renderConfirm = (): JSX.Element => {\n        const { feePercent, orderInputs } = this.props;\n\n        const { symbol, side, price, volume, minVolume } = orderInputs;\n\n        const [baseToken, quoteToken] = symbol.split(\"/\");\n        const spendToken = side === OrderSide.BUY ? quoteToken : baseToken;\n        const receiveToken = side === OrderSide.BUY ? baseToken : quoteToken;\n        const spendTokenDetails = TokenDetails.get(spendToken, UnknownToken);\n        const receiveTokenDetails = TokenDetails.get(receiveToken, UnknownToken);\n        const baseTokenDetails = TokenDetails.get(baseToken, UnknownToken);\n        const quoteTokenDetails = TokenDetails.get(quoteToken, UnknownToken);\n\n        const baseVolume = new BigNumber(volume);\n        const minBaseVolume = new BigNumber(minVolume || 0);\n        const quoteVolume = baseVolume.times(new BigNumber(price));\n\n        const spendVolume = (side === OrderSide.BUY) ? quoteVolume : baseVolume;\n        let receiveVolume = (side === OrderSide.BUY) ? baseVolume : quoteVolume;\n\n        // Calculate fees\n        const feeToken = receiveToken;\n        const feeVolume = receiveVolume.times(feePercent);\n        receiveVolume = receiveVolume.minus(feeVolume);\n\n        const feeTokenDetails = TokenDetails.get(feeToken, UnknownToken);\n\n        return <>\n            <h2>Confirm order details</h2>\n            <TradeTokenBanner\n                spendToken={spendTokenDetails}\n                receiveToken={receiveTokenDetails}\n                spendVolume={spendVolume}\n                receiveVolume={receiveVolume}\n            />\n            <div className=\"open--details\">\n                <p><span>Price:</span> {price} {quoteTokenDetails.symbol}</p>\n                <p><span>Minimum Volume:</span> {minBaseVolume.toFixed()} {baseTokenDetails.symbol}</p>\n                <p>Includes a {feeVolume.toFixed()} {feeTokenDetails.symbol} fee</p>\n            </div>\n            <div className=\"popup--buttons\">\n                <button className=\"open--confirm\" onClick={this.onConfirm}><span>Confirm</span></button>\n                <button onClick={this.props.closePopup}>Cancel</button>\n            </div>\n        </>;\n    }\n\n    private renderOpening = (): JSX.Element => {\n        const { error, logs } = this.state;\n        const { closePopup } = this.props;\n\n        let title = <h2>Opening order...</h2>;\n        let message = <p>Please wait. Do not close this window.</p>;\n        if (error) {\n            switch (error.message) {\n                case ErrorCanceledByUser:\n                    title = <h2>Order canceled</h2>;\n                    message = <p />;\n                    break;\n                default:\n                    title = <h2 className=\"red\">Unable to complete transaction</h2>;\n                    message = <p>{error.message}</p>;\n                    break;\n            }\n        }\n        return <>\n            {title}\n            {message}\n            {error &&\n                <div className=\"popup--buttons\">\n                    <button onClick={closePopup}>Close</button>\n                </div>\n            }\n            <Console logs={logs} />\n        </>;\n    }\n\n    private onConfirm = async () => {\n        const { call } = this.props;\n\n        this.setState({ confirmed: true });\n\n        const simpleConsole = { log: this.log, error: this.error };\n\n        await call(simpleConsole)\n            .catch((error) => {\n                console.error(error);\n                // Set state may fail if unmounted\n                try {\n                    this.setState({ error });\n                } catch (err) {\n                    console.error(err);\n                }\n            });\n    }\n\n    private log = (message: string) => {\n        const logCount = this.state.logCount;\n        this.setState({ logCount: logCount + 1, logs: this.state.logs.push(<p key={logCount}>{message}</p>) });\n    }\n\n    private error = (message: string) => {\n        const logCount = this.state.logCount;\n        this.setState({ logCount: logCount + 1, logs: this.state.logs.push(<p key={logCount} className=\"red\">{message}</p>) });\n    }\n}\n\nfunction mapStateToProps(state: ApplicationData): StoreProps {\n    return {\n        feePercent: state.sdk.darknodeFeePercent,\n    };\n}\n\nexport const OpenOrderPopup = connect(mapStateToProps, null)(InnerOpenOrderPopup);\n\nexport const newOpenOrderPopup = (orderInputs: OrderInputs, call: (simpleConsole?: SimpleConsole) => Promise<void>, onCancelAction: () => void, skipConfirm?: boolean): SetPopupPayload => ({\n    popup: <OpenOrderPopup call={call} closePopup={onCancelAction} orderInputs={orderInputs} skipConfirm={skipConfirm} />,\n    dismissible: false,\n    onCancel: onCancelAction,\n});\n","import * as Sentry from \"@sentry/browser\";\nimport BigNumber from \"bignumber.js\";\n\nimport { Dispatch } from \"redux\";\n\nimport RenExSDK, { OrderInputs, OrderSettlement, OrderSide, OrderStatus, OrderType, SimpleConsole } from \"@renex/renex\";\n\nimport { setAlert } from \"../../actions/alert/alertActions\";\nimport { clearPopup, setPopup } from \"../../actions/popup/popupActions\";\nimport { newApprovalPopup } from \"../../components/popups/ApprovalPopup\";\nimport { readableToBalance } from \"../../lib/balances\";\nimport { Pair, Pairs } from \"../../lib/market\";\nimport { ErrorCanceledByUser } from \"../../lib/wallets/wallet\";\nimport { Alert, AlertType } from \"../../reducers/types\";\n\nimport { addPendingAlert } from \"../../actions/alert/pendingAlertActions\";\nimport { getBalances } from \"../../actions/balances/balancesActions\";\nimport { addOrders, updateOrderCancelling, updateOrderStatus } from \"../../actions/orderbook/traderBookActions\";\nimport { newOpenOrderPopup } from \"../../components/popups/OpenOrderPopup\";\nimport { traderOrderToRecord } from \"../../reducers/typesSdk\";\n\nexport const ErrorUnableToOpen = \"Unable to open order\";\nexport const ErrorUnableToCancel = \"Unable to cancel order\";\n\nexport type OpenOrderAction = (\n    sdk: RenExSDK,\n    market: Pair,\n    side: OrderSide,\n    pricepoint: string,\n    volume: string,\n    minimumVolume: string,\n    orderType: OrderType,\n    onSuccess?: () => void,\n    onError?: () => void,\n) => (dispatch: Dispatch) => Promise<void>;\nexport const openOrder: OpenOrderAction = (\n    sdk, market, side, pricepoint, volume, minimumVolume, orderType, onSuccess, onError\n) => async (dispatch) => {\n    const marketPair = Pairs.get(market, undefined);\n    if (!marketPair) {\n        return;\n    }\n    const skipConfirm = marketPair.orderSettlement === OrderSettlement.RenExAtomic;\n\n    const pricepointBN = new BigNumber(pricepoint);\n    const volumeBN = new BigNumber(volume);\n    const minimumVolumeBN = new BigNumber(minimumVolume);\n\n    const orderInputs: OrderInputs = {\n        symbol: `${marketPair.baseToken}/${marketPair.quoteToken}`,\n        side,\n        price: pricepointBN.toFixed(),\n        volume: volumeBN,\n        minVolume: minimumVolumeBN,\n        type: orderType,\n    };\n\n    const openOrderCall = (simpleConsole?: SimpleConsole) => {\n        return sdk.openOrder(orderInputs, { simpleConsole, awaitConfirmation: false })\n            .then(async (openOrderResult) => {\n                const { traderOrder } = openOrderResult;\n                dispatch(addOrders([traderOrderToRecord(traderOrder)]));\n\n                // Reload balances before closing popup\n                await getBalances(sdk)(dispatch);\n\n                dispatch(setAlert({\n                    alert: new Alert({\n                        alertType: AlertType.Success,\n                        message: \"Your order has been sent\",\n                    })\n                }));\n\n                dispatch(clearPopup());\n                if (onSuccess) {\n                    onSuccess();\n                }\n            })\n            .catch(async (error: Error) => {\n                if (onError) {\n                    onError();\n                }\n                if (error.message.match(\"User denied transaction signature\")) {\n                    throw new Error(ErrorCanceledByUser);\n                }\n                Sentry.captureException(error);\n                throw error;\n            });\n    };\n\n    const onDismiss = () => {\n        dispatch(clearPopup());\n        if (onError) {\n            onError();\n        }\n    };\n\n    dispatch(setPopup(newOpenOrderPopup(orderInputs, openOrderCall, onDismiss, skipConfirm)));\n};\n\nexport type CancelOrderAction = (\n    sdk: RenExSDK,\n    orderID: string,\n) => (dispatch: Dispatch) => Promise<undefined | {}>;\nexport const cancelOrder: CancelOrderAction = (sdk, orderID) => async (dispatch) => {\n\n    return new Promise((resolve: () => void) => {\n\n        const close = () => {\n            dispatch(clearPopup());\n            resolve();\n        };\n\n        dispatch(updateOrderCancelling({ orderID, orderCancelling: true }));\n        const cancelOrderCall = async () => {\n            const { promiEvent } = await sdk.cancelOrder(orderID, { awaitConfirmation: false });\n            if (!promiEvent) {\n                throw new Error(\"Unable to cancel order\");\n            }\n            return promiEvent\n                .on(\"transactionHash\", async () => {\n                    // Transaction is sent\n                    close();\n                })\n                .then(() => {\n                    // Transaction is confirmed\n                    dispatch(updateOrderStatus({ orderID, orderStatus: OrderStatus.CANCELED }));\n\n                    const alert = async () => {\n                        dispatch(setAlert({\n                            alert: new Alert({\n                                alertType: AlertType.Success,\n                                message: \"Your order has been cancelled\",\n                            })\n                        }));\n                        dispatch(updateOrderCancelling({ orderID, orderCancelling: false }));\n                    };\n                    dispatch(addPendingAlert({ id: `cancel: ${orderID}`, method: alert }));\n                })\n                .catch((error: Error) => {\n                    // Transaction failed\n\n                    dispatch(updateOrderCancelling({ orderID, orderCancelling: false }));\n                    if (error.message.match(\"User denied transaction signature\")) {\n                        throw new Error(ErrorCanceledByUser);\n                    }\n                    console.error(error);\n                    Sentry.captureException(error);\n                    throw new Error(ErrorUnableToCancel);\n                });\n        };\n\n        dispatch(setPopup(newApprovalPopup(cancelOrderCall, close)));\n\n    });\n\n};\n","import moment from \"moment\";\nimport * as React from \"react\";\n\nimport RenExSDK, { OrderSettlement, OrderSide, OrderStatus, TraderOrder } from \"@renex/renex\";\n\nimport { Map, OrderedMap } from \"immutable\";\nimport { connect } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport { Dispatch } from \"redux\";\nimport { bindActionCreators } from \"redux\";\n\nimport Heading from \"./Heading\";\nimport Loading from \"./Loading\";\n\nimport { setAlert, SetAlertAction } from \"../actions/alert/alertActions\";\nimport { cancelOrder, CancelOrderAction } from \"../actions/trader/orderActions\";\nimport { getTimeMagnitude, naturalTime, TimeMagnitude } from \"../lib/conversion\";\nimport { TokenDetails, UnknownToken } from \"../lib/market\";\nimport { Alert, AlertType, ApplicationData, LabelType, Settlements } from \"../reducers/types\";\nimport { InfoLabel } from \"./InfoLabel\";\n\n// This is the number of orders that will be displayed if the 'recent' prop\n// is set.\nexport const RECENT_AMOUNT = 5;\n\ninterface StoreProps {\n    cancelling: Map<string, boolean>;\n    traderOrders: OrderedMap<string, TraderOrder>;\n    sdk: RenExSDK;\n}\n\ninterface SubmittedTradesProps extends StoreProps {\n    recent?: boolean;\n    actions: {\n        cancelOrder: CancelOrderAction;\n        setAlert: SetAlertAction;\n    };\n}\n\ninterface SubmittedTradesState {\n    relevantRows: number;\n    highlightLatest: boolean;\n    receivedOrders: boolean;\n}\n\nclass SubmittedTrades extends React.Component<SubmittedTradesProps, SubmittedTradesState> {\n    private timeout: NodeJS.Timer | undefined;\n    private rerender: NodeJS.Timer | undefined;\n\n    public constructor(props: SubmittedTradesProps, context: object) {\n        super(props, context);\n        this.state = {\n            highlightLatest: false,\n            receivedOrders: false,\n            relevantRows: 0,\n        };\n    }\n\n    public componentWillReceiveProps(nextProps: SubmittedTradesProps): void {\n        // Highlight the latest order if it was just added.\n        if (this.props.traderOrders.size < nextProps.traderOrders.size) {\n            if (this.state.receivedOrders) {\n                this.setState({ highlightLatest: true });\n\n                if (this.timeout) { clearTimeout(this.timeout); }\n                this.timeout = setTimeout(\n                    () => this.setState({ highlightLatest: false }),\n                    3 * 1000,\n                );\n            } else {\n                this.setState({ receivedOrders: true });\n            }\n        } else if (this.props.traderOrders.size > nextProps.traderOrders.size) {\n            // Remove highlight if order failed and has been removed from the list.\n            this.setState({ highlightLatest: false });\n        }\n    }\n\n    public componentWillUnmount(): void {\n        if (this.timeout) { clearTimeout(this.timeout); }\n        if (this.rerender) { clearTimeout(this.rerender); }\n    }\n\n    public render(): JSX.Element {\n        const { recent } = this.props;\n        const { traderOrders } = this.props;\n        let relevantRows = null;\n        if (traderOrders.size > 0) {\n            // Find the most precise time being shown (seconds, minutes, hours...)\n            // and rerender to ensure that these times are updated\n            const magnitude = traderOrders\n                .map((traderOrder: TraderOrder) => getTimeMagnitude(traderOrder.computedOrderDetails.date))\n                .reduce((val: number, min: number) => Math.min(val, min), TimeMagnitude.Day);\n\n            if (this.rerender) { clearTimeout(this.rerender); }\n            this.rerender = setTimeout(() => {\n                this.forceUpdate();\n            }, magnitude / 2);\n\n            relevantRows = this.generateRows();\n        }\n\n        const title = `Your ${recent ? \"latest \" : \"\"}submitted orders`;\n\n        return (\n            <div className=\"section trades\">\n                <div className=\"container\">\n                    <Heading title={title} />\n                    <div className=\"table--wrapper\">\n                        <table>\n                            <thead>\n                                <tr>\n                                    {/* If any fields are added/removed, the colSpan\n                                    below must be modified to reflect this. */}\n                                    <th>Order ID</th>\n                                    <th>From</th>\n                                    <th>To</th>\n                                    <th>Price</th>\n                                    <th>Opened</th>\n                                    <th>Status</th>\n                                    <th>Cancel?</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {relevantRows ?\n                                    recent ? relevantRows.slice(0, RECENT_AMOUNT) : relevantRows\n                                    :\n                                    <tr>\n                                        <td colSpan={8}>No submitted orders</td>\n                                    </tr>\n                                }\n                            </tbody>\n                        </table>\n                    </div>\n                    {recent && relevantRows && relevantRows.length - RECENT_AMOUNT > 0 &&\n                        <p><Link to=\"/orders\">View {relevantRows.length - RECENT_AMOUNT} more</Link></p>\n                    }\n                </div>\n            </div>\n        );\n    }\n\n    private async handleCancel(orderID: string): Promise<void> {\n        const { sdk, traderOrders } = this.props;\n\n        if (!sdk || !traderOrders) {\n            return;\n        }\n\n        // Attempt to cancel\n        try {\n            await this.props.actions.cancelOrder(sdk, orderID);\n        } catch (error) {\n            console.error(error);\n            this.props.actions.setAlert({\n                alert: new Alert({\n                    alertType: AlertType.Error,\n                    // TODO: Replace with execution details\n                    message: \"Unable to cancel order\",\n                })\n            });\n        }\n    }\n\n    private generateRows(): JSX.Element[] | null {\n        const { traderOrders, sdk, cancelling } = this.props;\n        const { highlightLatest } = this.state;\n\n        let relevantRows = false;\n\n        const atomConnected = sdk.atom.isConnected();\n\n        const rows = traderOrders.toArray().reverse().filter((order: TraderOrder) => {\n            if (order.trader.toLowerCase() !== sdk.getAddress().toLowerCase()) {\n                return false;\n            }\n\n            relevantRows = true;\n            return true;\n        }).map((order: TraderOrder, key: number) => {\n\n            const spendDetails = TokenDetails.get(order.computedOrderDetails.spendToken, UnknownToken);\n            const receiveDetails = TokenDetails.get(order.computedOrderDetails.receiveToken, UnknownToken);\n\n            const fstSymbol = (order.orderInputs.side === OrderSide.SELL ? receiveDetails : spendDetails).symbol;\n            const sndSymbol = (order.orderInputs.side === OrderSide.SELL ? spendDetails : receiveDetails).symbol;\n\n            // Deduct fees from receive amount.\n            // receiveAmount = receiveAmount.minus(receiveAmount.times(ORDER_FEE));\n\n            const receive = order.computedOrderDetails.receiveVolume;\n            const spend = order.computedOrderDetails.spendVolume;\n\n            return (\n                <tr key={key} className={`${order.status.toLowerCase()} ${key === 0 && highlightLatest ? \"recent\" : \"\"}`}>\n                    <td><span className=\"monospace\">{order.id}</span></td>\n                    <td className=\"volume right\">\n                        <span>{spend.toString()} {spendDetails.symbol}</span>\n                    </td>\n                    <td className=\"volume right\">{\n                        <span>{receive.toString()} {receiveDetails.symbol}</span>\n                    }</td>\n                    <td className=\"price center\">{`${order.orderInputs.price.toFixed()} ${fstSymbol} to ${sndSymbol}`}</td>\n                    <td className=\"center\" title={moment(order.computedOrderDetails.date * 1000).format(\"MMMM Do YYYY, HH:mm:ss\")}>\n                        <span>{naturalTime(order.computedOrderDetails.date, { message: \"Just now\", suffix: \"ago\", countDown: false })}</span>\n                    </td>\n                    <td className=\"center\">\n                        {\n                            order.status === OrderStatus.NOT_SUBMITTED ?\n                                <Loading /> :\n                                <span>{renderOrderStatus(order.status)}\n                                    {order.computedOrderDetails.orderSettlement === OrderSettlement.RenExAtomic &&\n                                        order.status === OrderStatus.CONFIRMED &&\n                                        !atomConnected ?\n                                        <InfoLabel type={LabelType.Warning}>Unable to connect to Swapperd</InfoLabel>\n                                        : null\n                                    }\n                                </span>\n                        }\n                    </td>\n                    <td className=\"center\">\n                        {\n                            order.status === OrderStatus.OPEN ? (\n                                cancelling.get(order.id, false) ?\n                                    <Loading />\n                                    :\n                                    <span\n                                        className=\"cross\"\n                                        role=\"button\"\n                                        onClick={this.handleCancel.bind(this, order.id)}\n                                    >&#x00D7;</span>\n                            )\n                                :\n                                <span>-</span>\n                        }\n                    </td>\n                </tr >\n            );\n        });\n\n        return relevantRows ? rows : null;\n    }\n}\n\nconst renderOrderStatus = (status: OrderStatus) => {\n    switch (status) {\n        case OrderStatus.NOT_SUBMITTED: return \"Pending\";\n        case OrderStatus.FAILED_TO_SETTLE: return \"Failed\";\n        case OrderStatus.OPEN: return \"Open\";\n        case OrderStatus.CONFIRMED: return \"Settling\";\n        case OrderStatus.CANCELED: return \"Canceled\";\n        case OrderStatus.SETTLED: return \"Settled\";\n        case OrderStatus.SLASHED: return \"Aborted\";\n        default:\n            return \"Unknown\";\n    }\n};\n\nfunction mapStateToProps(state: ApplicationData): StoreProps {\n    return {\n        cancelling: state.traderBook.cancelling,\n        traderOrders: state.traderBook.traderOrders,\n        sdk: state.sdk.sdk,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch): { actions: SubmittedTradesProps[\"actions\"] } {\n    return {\n        actions: bindActionCreators(\n            {\n                cancelOrder,\n                setAlert,\n            }, dispatch)\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SubmittedTrades);\n","import * as React from \"react\";\n\nimport { OrderedMap } from \"immutable\";\nimport { connect } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\n\nimport RenExSDK, { TraderOrder } from \"@renex/renex\";\n\nimport Heading from \"./Heading\";\n\nimport { TokenDetails, UnknownToken } from \"../lib/market\";\nimport { ApplicationData } from \"../reducers/types\";\nimport { RECENT_AMOUNT } from \"./SubmittedTrades\";\n\ninterface StoreProps {\n    traderOrders: OrderedMap<string, TraderOrder>;\n    sdk: RenExSDK;\n}\n\ninterface ExecutedTradesProps extends StoreProps {\n    recent?: boolean;\n}\n\ninterface ExecutedTradesState {\n    relevantRows: number;\n}\n\n/**\n * ExecutedTrades is a visual component for displaying the execution details of\n * a user's executed trades\n */\nclass ExecutedTrades extends React.Component<ExecutedTradesProps, ExecutedTradesState> {\n    public constructor(props: ExecutedTradesProps, context: object) {\n        super(props, context);\n        this.state = {\n            relevantRows: 0\n        };\n    }\n\n    public render(): JSX.Element {\n        const { sdk, traderOrders } = this.props;\n\n        const executedOrders = traderOrders\n            .toArray()\n            .filter((traderOrder: TraderOrder) => {\n                if (!traderOrder.matchDetails) {\n                    return false;\n                }\n\n                if (traderOrder.trader.toLowerCase() !== sdk.getAddress().toLowerCase()) {\n                    return false;\n                }\n\n                return true;\n            });\n\n        const recent: boolean = (this.props.recent === true);\n\n        let relevantRows: JSX.Element[] | null = null;\n        if (executedOrders.length > 0) {\n            relevantRows = this.generateRows(executedOrders);\n        }\n\n        const title = `Your ${recent ? \"latest \" : \"\"}executed orders`;\n\n        return (\n            <div className=\"section trades\">\n                <div className=\"container\">\n                    <Heading title={title} />\n                    <div className=\"table--wrapper\">\n                        <table>\n                            <thead>\n                                <tr>\n                                    {/* If any fields are added/removed, the colSpan\n                                    below must be modified to reflect this. */}\n                                    <th>Order ID</th>\n                                    <th>Match ID</th>\n                                    {/* <th>Match Price</th> */}\n                                    <th>Spent Amount</th>\n                                    <th>Receive Amount</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {relevantRows !== null ?\n                                    recent ? relevantRows.slice(0, RECENT_AMOUNT) : relevantRows\n                                    :\n                                    <tr>\n                                        <td colSpan={4}>No executed orders</td>\n                                    </tr>\n                                }\n                            </tbody>\n                        </table>\n                    </div>\n                    {recent && relevantRows !== null && relevantRows.length - RECENT_AMOUNT > 0 ?\n                        <p><Link to=\"/orders\">View {relevantRows.length - RECENT_AMOUNT} more</Link></p> :\n                        null\n                    }\n                </div>\n            </div>\n        );\n    }\n\n    private generateRows(executedOrders: TraderOrder[]): JSX.Element[] | null {\n        return executedOrders\n            .reverse()\n            .map((order: TraderOrder, key: number) => {\n                const matchDetails = order.matchDetails;\n\n                if (matchDetails === undefined) {\n                    return <></>;\n                }\n\n                const receivedTokenDetails = TokenDetails.get(matchDetails.receivedToken, UnknownToken);\n                const spentTokenDetails = TokenDetails.get(matchDetails.spentToken, UnknownToken);\n\n                const receiveAmountReadable = matchDetails.receivedVolume;\n                const paidAmountReadable = matchDetails.spentVolume.plus(matchDetails.fee);\n                // const feeReadable = balanceToReadable(matchDetails.fee, matchDetails.spentToken);\n\n                return <tr key={key}>\n                    <td><span className=\"monospace\">{matchDetails.orderID}</span></td>\n                    <td className=\"match\"><span className=\"monospace\">{matchDetails.matchedID}</span></td>\n                    {/* <td className=\"center price\"><span>{`${pricepoint} ${fstSymbol} to ${sndSymbol}`}</span></td> */}\n                    <td className=\"center volume\"><span>{`${paidAmountReadable} ${spentTokenDetails.symbol}`}</span></td>\n                    <td className=\"center volume\"><span>{`${receiveAmountReadable} ${receivedTokenDetails.symbol}`}</span></td>\n                </tr>;\n            });\n    }\n}\n\nfunction mapStateToProps(state: ApplicationData): StoreProps {\n    return {\n        traderOrders: state.traderBook.traderOrders,\n        sdk: state.sdk.sdk,\n    };\n}\n\nexport default connect(mapStateToProps)(ExecutedTrades);\n","import { OrderStatus } from \"@renex/renex\";\n\nexport enum OrderType {\n    MIDPOINT = 0,\n    LIMIT = 1, // FIXME: unsupported\n}\n\n\n// // Order statuses - when OrderStatus is updated, OrderStatusDisplay should be\n// // updated as well\n// export enum OrderStatus {\n//     Unknown = \"\",\n//     Open = \"Open\",\n//     Confirmed = \"Executing\",\n//     Executed = \"Executed\",\n//     Canceled = \"Canceled\",\n//     Expired = \"Expired\",\n//     Failed = \"Failed\",\n\n//     // A migrating status represents an order which was confirmed in a previous\n//     // deployment of the Orderbook contract. If the settlement details can be found,\n//     // the order will be updated to be Executed, otherwise it will be set to\n//     // Expired.\n//     Migrating = \"Pending\",\n// }\n\n// // How order statuses should be shown to the user\n// export const OrderStatusDisplay = {\n//     [OrderStatus.Unknown]: \"-\",\n//     [OrderStatus.Open]: \"Open\",\n//     [OrderStatus.Confirmed]: \"Executing\",\n//     [OrderStatus.Executed]: \"Executed\",\n//     [OrderStatus.Canceled]: \"Canceled\",\n//     [OrderStatus.Expired]: \"Expired\",\n//     [OrderStatus.Failed]: \"Failed\",\n//     [OrderStatus.Migrating]: \"Pending\",\n// };\n\nexport const HiddenOrderStatusDisplay = {\n    [OrderStatus.NOT_SUBMITTED]: \"-\",\n    [OrderStatus.OPEN]: \"Open\",\n    [OrderStatus.CONFIRMED]: \"Matched\",\n    [OrderStatus.CANCELED]: \"Canceled\",\n    [OrderStatus.SETTLED]: \"Settled\",\n};\n\nexport const StatusPriority = {\n    STATUS_UNKNOWN: 0,\n    STATUS_OPEN: 1,\n    STATUS_EXPIRED: 2,\n    STATUS_CONFIRMED: 3,\n    STATUS_EXECUTED: 4,\n    STATUS_CANCELED: 5,\n};\n\n// Local storage\nexport const LOCAL_STORAGE = \"republicprotocol\";\n","import RenExSDK, { Order } from \"@renex/renex\";\n\nimport { List } from \"immutable\";\nimport { Dispatch } from \"redux\";\nimport { createStandardAction } from \"typesafe-actions\";\n\nexport const setHiddenOrders = createStandardAction(\"SET_HIDDEN_ORDERS\")<{\n    hiddenOrders: List<Order>;\n}>();\n\n/**\n * Retrieves hidden orders with an index greater than or equal to startingIndex\n * @param  {Contract | null} orderbookContract\n * @param  {number} startingIndex\n */\nexport type GetHiddenOrdersAction = (sdk: RenExSDK)\n    => (dispatch: Dispatch) => Promise<void>;\nexport const getHiddenOrders: GetHiddenOrdersAction = (sdk) => async (dispatch) => {\n\n    const hiddenOrders = List(await sdk.fetchOrderbook({ limit: 10 }));\n\n    dispatch(setHiddenOrders({ hiddenOrders }));\n};\n","import * as React from \"react\";\n\nimport { List } from \"immutable\";\nimport { connect } from \"react-redux\";\n\nimport RenExSDK, { Order } from \"@renex/renex\";\n\nimport Heading from \"./Heading\";\nimport Loading from \"./Loading\";\n\nimport { HiddenOrderStatusDisplay } from \"../lib/globals\";\nimport { NUMBER_OF_ORDERS } from \"../reducers/orderbook/hiddenBookReducer\";\nimport { ApplicationData } from \"../reducers/types\";\n\ninterface StoreProps {\n    hiddenOrders: List<Order> | null;\n    sdk: RenExSDK;\n}\n\ninterface HiddenOrderbookProps extends StoreProps {\n}\n\n/**\n * HiddenOrderbook is a visual component for displaying\n */\nclass HiddenOrderbook extends React.Component<HiddenOrderbookProps> {\n    public constructor(props: HiddenOrderbookProps, context: object) {\n        super(props, context);\n    }\n\n    public render(): JSX.Element {\n        const { hiddenOrders } = this.props;\n        return (\n            <div className=\"section orderbook\">\n                <div className=\"container\">\n                    <Heading title=\"Hidden orderbook\" description={`Last ${NUMBER_OF_ORDERS} orders`} />\n                    {hiddenOrders ?\n                        <div className=\"table--wrapper\">\n                            <table>\n                                <thead>\n                                    <tr>\n                                        <th>Order ID</th>\n                                        <th className=\"center\">Status</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {hiddenOrders.size > 0 ?\n                                        hiddenOrders.reverse().toArray().map((order: Order) =>\n                                            <tr key={order.id}>\n\n                                                <td className=\"truncate\"><span className=\"monospace\">{order.id}</span></td>\n                                                <td className=\"center\">{HiddenOrderStatusDisplay[order.status]}</td>\n                                            </tr>\n                                        ) :\n                                        <tr />\n                                    }\n                                </tbody>\n                            </table>\n                        </div>\n                        :\n                        <Loading />\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction mapStateToProps(state: ApplicationData): StoreProps {\n    return {\n        hiddenOrders: state.hiddenBook.hiddenOrders,\n        sdk: state.sdk.sdk,\n    };\n}\n\nexport default connect(mapStateToProps)(HiddenOrderbook);\n","import { ActionType, getType } from \"typesafe-actions\";\n\nimport * as hiddenBookActions from \"../../actions/orderbook/hiddenBookActions\";\n\nimport { HiddenBookData } from \"../../reducers/types\";\n\nexport const NUMBER_OF_ORDERS = 10;\nexport type HiddenBookAction = ActionType<typeof hiddenBookActions>;\n\nexport default function hiddenBookReducer(state: HiddenBookData = new HiddenBookData(), action: HiddenBookAction) {\n    switch (action.type) {\n        case getType(hiddenBookActions.setHiddenOrders):\n            return state.set(\"hiddenOrders\", action.payload.hiddenOrders);\n        default:\n            return state;\n    }\n}\n","import BigNumber from \"bignumber.js\";\nimport BN from \"bn.js\";\n\nimport { TokenCode } from \"@renex/renex\";\nimport { TokenDetails, UnknownToken } from \"./market\";\n\n/**\n * Convert a token amount to the readable amount using the token decimals.\n * @param balance The balance represented as a BigNumber.\n * @param token The token used to represented the balance.\n */\nexport const balanceToReadable = (balance: BN, token: TokenCode): BigNumber => {\n\n    // If token is not found, use `UnknownToken` which has 0 decimals\n    // i.e. the balance is returned as it is\n    const tokenDetails = TokenDetails.get(token, UnknownToken);\n\n    if (balance === undefined) {\n        balance = new BN(0);\n    }\n\n    let balanceBN = new BigNumber(balance.toString());\n\n    const e = new BigNumber(10).pow(tokenDetails.digits);\n    balanceBN = balanceBN.div(e);\n\n    return balanceBN;\n};\n\n/**\n * Convert a readable amount to the token amount using the token decimals.\n * @param readable The amount represented as a string.\n * @param token The token used to represent the amount.\n */\nexport const readableToBalance = (readable: string, token: TokenCode): BN => {\n\n    // If token is not found, use `UnknownToken` which has 0 decimals\n    // i.e. the balance is returned as it is\n    const tokenDetails = TokenDetails.get(token, UnknownToken);\n\n    if (readable === undefined || readable === \"\") {\n        readable = \"0\";\n    }\n\n    const e = new BigNumber(10).pow(tokenDetails.digits);\n\n    return new BN(new BigNumber(readable).times(e).integerValue(BigNumber.ROUND_FLOOR).toFixed());\n};\n\n/**\n * Removes excessive digits from a value for a given currency. Primarily used\n * for user inputs.\n * @param amount The amount to be checked for excessive digits.\n * @param token The token the digits should be checked against.\n */\nexport const removeExcessDigits = (amount: BigNumber, token: TokenCode): BigNumber => {\n    const value = readableToBalance(amount.toFixed(), token);\n    return new BigNumber(balanceToReadable(value, token));\n};\n","import React from \"react\";\n\nimport BigNumber from \"bignumber.js\";\n\nimport { FieldProps } from \"formik\";\n\nimport { InfoLabel } from \"./InfoLabel\";\n\ninterface NewOrderInputFieldProps {\n    symbol: string;\n    title: React.ReactNode;\n    disabled?: boolean;\n    hint?: React.ReactNode;\n    notice?: React.ReactNode;\n    stepFunction?: (value: BigNumber) => string;\n    handleChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;\n    handleBlur?: (e: React.ChangeEvent<HTMLInputElement>) => void;\n}\n\nexport class NewOrderInputField extends React.Component<FieldProps<HTMLInputElement> & NewOrderInputFieldProps, HTMLInputElement> {\n    public render() {\n        const {\n            form: { errors, dirty },\n            title, symbol, disabled, hint, handleChange, handleBlur, notice\n        } = this.props;\n        const { onBlur, onChange, ...field } = this.props.field;\n        return (\n            <div className=\"order--input-wrapper\">\n                <label>\n                    <div className=\"order--title\">\n                        <span>{title}</span>\n                        {hint && <InfoLabel>{hint}</InfoLabel>}\n                    </div>\n                    <span className={`order--input-item${disabled ? \" disabled\" : \"\"}`}>\n                        <input {...field}\n                            type=\"number\"\n                            step={this.calculateStep()}\n                            disabled={disabled}\n                            placeholder=\"0\"\n                            min={0}\n                            onChange={handleChange}\n                            onBlur={handleBlur}\n                        />\n                        <span>{symbol}</span>\n                    </span>\n                </label>\n                {!!errors[field.name] && dirty && (\n                    <p className=\"order--warning\">\n                        {errors[field.name]}\n                    </p>\n                )}\n                {!!notice && !errors[field.name] && (\n                    <p className=\"order--message\">\n                        {notice}\n                    </p>\n                )}\n            </div>\n        );\n    }\n\n    private calculateStep(): string {\n        const { stepFunction, field } = this.props;\n        if (stepFunction) {\n            return stepFunction(new BigNumber(field.value || \"0\"));\n        }\n        return \"\";\n    }\n\n}\n","import React from \"react\";\n\nimport BigNumber from \"bignumber.js\";\n\nimport { Field, FieldProps, Form, FormikProps } from \"formik\";\nimport { OrderedMap } from \"immutable\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators, Dispatch } from \"redux\";\n\nimport RenExSDK, { OrderSettlement, OrderSide, Token, TokenCode } from \"@renex/renex\";\n\nimport Loading from \"./Loading\";\n\nimport { setOrder, SetOrderAction } from \"../actions/inputs/inputsActions\";\nimport { removeExcessDigits } from \"../lib/balances\";\nimport { getPriceStep, getVolumeStep } from \"../lib/conversion\";\nimport { Pair, Pairs, TokenDetails } from \"../lib/market\";\nimport { ApplicationData } from \"../reducers/types\";\nimport { InfoLabel } from \"./InfoLabel\";\nimport { NewOrderInputField } from \"./NewOrderInputField\";\nimport { NewOrderInputsValues } from \"./NewOrderInputs\";\n\ninterface StoreProps {\n    sdk: RenExSDK;\n    feePercent: BigNumber;\n    usableBalances: OrderedMap<TokenCode, BigNumber | null>;\n    usableAtomicBalances: OrderedMap<TokenCode, BigNumber | null>;\n}\n\ninterface FormProps extends FormikProps<NewOrderInputsValues> {\n    market: Pair;\n    side: OrderSide;\n    allOrNothing: boolean;\n    initialMarketPrice: string;\n    settlementType: OrderSettlement;\n    actions: {\n        setOrder: SetOrderAction;\n    };\n    calculateAbsoluteMinTradeVolume: (baseToken: string, price: BigNumber) => BigNumber;\n}\n\ntype NewOrderInputFormProps = StoreProps & FormProps;\n\ninterface NewOrderInputFormState {\n}\n\n// tslint:disable:jsx-no-lambda\nclass NewOrderInputForm extends React.Component<NewOrderInputFormProps, NewOrderInputFormState> {\n    public componentDidMount(): void {\n        // Validate fields on load\n        const { values, setValues } = this.props;\n        const newState = this.calculateNewState(values);\n        setValues(newState);\n    }\n\n    public componentWillUnmount() {\n        // Save inputs when the user navigates away from the page\n        const { values, side } = this.props;\n        this.props.actions.setOrder({\n            orderInputs: {\n                side,\n                pricepoint: values.pricepoint,\n                volume: values.volume,\n                minVolume: values.minVolume,\n            }\n        });\n    }\n\n    public async componentWillReceiveProps(nextProps: NewOrderInputFormProps): Promise<void> {\n        const { market, side, allOrNothing, initialMarketPrice, validateForm, values } = this.props;\n\n        // Update the market price if the market or market price has changed\n        const marketChanged = market !== nextProps.market;\n        const initialMarketPriceChanged = initialMarketPrice !== nextProps.initialMarketPrice;\n        const price = new BigNumber(values.pricepoint || \"0\");\n        const minValueNotSet = !values.minVolume && !nextProps.values.minVolume;\n        if (minValueNotSet || marketChanged || initialMarketPriceChanged && price.lte(new BigNumber(0))) {\n            nextProps.values.pricepoint = nextProps.initialMarketPrice;\n            const pairDetails = Pairs.get(nextProps.market, undefined);\n            const pricepointBigNumber = new BigNumber(nextProps.initialMarketPrice);\n            if (pairDetails && !pricepointBigNumber.isZero()) {\n                const absoluteMinVolume = nextProps.calculateAbsoluteMinTradeVolume(pairDetails.baseToken, pricepointBigNumber);\n                nextProps.values.minVolume = new BigNumber(absoluteMinVolume).toFixed();\n            }\n        }\n\n        // Match minVolume to volume when All or Nothing is enabled\n        const allOrNothingEnabled = !allOrNothing && nextProps.allOrNothing;\n        if (allOrNothingEnabled) {\n            nextProps.values.minVolume = nextProps.values.volume;\n        }\n\n        // Re-validate form\n        const sideChanged = side !== nextProps.side;\n        if (sideChanged || marketChanged || allOrNothing !== nextProps.allOrNothing) {\n            await validateForm();\n        }\n    }\n\n    public render() {\n        const { feePercent, values, isSubmitting, isValid, settlementType } = this.props;\n        const { market, side, initialMarketPrice, allOrNothing } = this.props;\n\n        const marketDetails = Pairs.get(market, undefined);\n        if (!marketDetails) { return null; }\n\n        const priorityTokenDetails = TokenDetails.get(marketDetails.quoteToken, undefined);\n        const nonPriorityTokenDetails = TokenDetails.get(marketDetails.baseToken, undefined);\n\n        if (!priorityTokenDetails || !nonPriorityTokenDetails) { return null; }\n\n        const prioritySymbol = priorityTokenDetails.symbol;\n        const nonPrioritySymbol = nonPriorityTokenDetails.symbol;\n\n        let feeToken;\n        let notice: string;\n        if (settlementType === OrderSettlement.RenExAtomic) {\n            feeToken = side === OrderSide.BUY ? priorityTokenDetails : nonPriorityTokenDetails;\n            const sellAmount = new BigNumber(side === OrderSide.BUY ? values.priorityVolume : values.volume);\n            notice = sellAmount.gt(new BigNumber(0)) ? `You will spend ${sellAmount.plus(this.feeAmount()).toFixed()} ${feeToken.symbol} after fees.` : \"\";\n        } else {\n            feeToken = side === OrderSide.BUY ? nonPriorityTokenDetails : priorityTokenDetails;\n            const buyAmount = new BigNumber(side === OrderSide.BUY ? values.volume : values.priorityVolume);\n            notice = buyAmount.gt(new BigNumber(0)) ? `You will receive ${buyAmount.minus(this.feeAmount()).toFixed()} ${feeToken.symbol} after fees.` : \"\";\n        }\n        return (\n            <Form>\n                <div className=\"order--inputs\">\n                    <Field name=\"pricepoint\" render={(field: FieldProps) => (\n                        <NewOrderInputField {...field}\n                            title={<>\n                                Price (<span role=\"button\" className=\"order--option\" onClick={() => {\n                                    this.setAndUpdateValues(field.field.name, initialMarketPrice);\n                                }}>Market</span>)\n                                </>}\n                            disabled={marketDetails.fixedPrice !== undefined}\n                            symbol={prioritySymbol}\n                            stepFunction={getPriceStep}\n                            handleChange={this.handleChange}\n                            handleBlur={this.handleBlur}\n                        />\n                    )} />\n                    <Field name=\"volume\" render={(field: FieldProps) => (\n                        <NewOrderInputField {...field}\n                            title={<>\n                                {side === OrderSide.BUY ? \"Receive\" : \"Spend\"} (<span role=\"button\" className=\"order--option\" onClick={this.fillVolume}>Max</span>)\n                                </>}\n                            symbol={nonPrioritySymbol}\n                            stepFunction={getVolumeStep}\n                            handleChange={this.handleChange}\n                            handleBlur={this.handleBlur}\n                            notice={settlementType === OrderSettlement.RenExAtomic ? (side === OrderSide.SELL && notice) : (side === OrderSide.BUY && notice)}\n                        />\n                    )} />\n                    <Field name=\"minVolume\" render={(field: FieldProps) => (\n                        <NewOrderInputField {...field}\n                            title=\"Minimum Fill Amount\"\n                            symbol={nonPrioritySymbol}\n                            hint=\"The minimum volume you are willing to be matched with. This does not affect price but higher minimum volumes reduce the chances of order match.\"\n                            disabled={allOrNothing}\n                            stepFunction={getVolumeStep}\n                            handleChange={this.handleChange}\n                            handleBlur={this.handleBlur}\n                        />\n                    )} />\n                    <Field name=\"priorityVolume\" render={(field: FieldProps) => (\n                        <NewOrderInputField {...field}\n                            title={side === OrderSide.BUY ? \"Spend\" : \"Receive\"}\n                            symbol={prioritySymbol}\n                            disabled={true}\n                            stepFunction={getVolumeStep}\n                            notice={settlementType === OrderSettlement.RenExAtomic ? (side === OrderSide.BUY && notice) : (side === OrderSide.SELL && notice)}\n                        />\n                    )} />\n                </div>\n                <div>\n                    <div>\n                        <span>Fee: {this.feeAmount().toFixed()} {feeToken.symbol}</span>\n                        <InfoLabel>Fees are set to {feePercent.times(100).toFixed()}% of the order volume.</InfoLabel>\n                    </div>\n                </div>\n                <div className=\"order--footer\">\n                    <button className={`order--button ${isSubmitting ? \"submitting\" : \"\"}`} type=\"submit\" disabled={!isValid || isSubmitting}>\n                        <span>\n                            {\n                                isSubmitting ? <Loading /> :\n                                    <>{side === OrderSide.BUY ? \"Buy\" : \"Sell\"} {nonPrioritySymbol}</>\n                            }\n                        </span>\n                    </button>\n                </div>\n            </Form>\n        );\n    }\n\n    private calculateNewState(oldState: NewOrderInputsValues, name?: string, valueIn?: string): NewOrderInputsValues {\n        let newState = { ...oldState };\n\n        if (name) {\n            // If value is undefined, set it to previous state\n            let value = (valueIn === undefined) ? oldState[name] : valueIn;\n\n            // If the value is in scientific notation, fix it\n            if (value.toLowerCase().indexOf(\"e\") !== -1) {\n                value = new BigNumber(value).toFixed();\n            }\n\n            newState = { ...newState, [name]: value };\n        }\n        const { pricepoint, volume } = newState;\n\n        // Match minVolume to volume if we're an All Or Nothing trade\n        if (this.props.allOrNothing) {\n            newState.minVolume = newState.volume;\n        }\n\n        // Calculate the new priority volume\n        const price = new BigNumber(pricepoint || \"0\");\n        const nonPriorityVolume = new BigNumber(volume || \"0\");\n        const priorityVolume = nonPriorityVolume.times(price);\n        newState.priorityVolume = priorityVolume.toFixed();\n\n        return newState;\n    }\n\n    private coerceValues(state: NewOrderInputsValues, name: string): NewOrderInputsValues {\n        const { sdk, market, initialMarketPrice, calculateAbsoluteMinTradeVolume, side } = this.props;\n        const { normalizePrice, normalizeVolume } = sdk.utils;\n\n        const pairDetails = Pairs.get(market, undefined);\n        if (!pairDetails) {\n            return state;\n        }\n\n        const pricepointBigNumber = new BigNumber(normalizePrice(new BigNumber(state.pricepoint || \"0\"), side === OrderSide.SELL));\n        const volumeBigNumber = new BigNumber(normalizeVolume(removeExcessDigits(new BigNumber(state.volume || \"0\"), pairDetails.baseToken)));\n        const minVolumeBigNumber = new BigNumber(normalizeVolume(removeExcessDigits(new BigNumber(state.minVolume || \"0\"), pairDetails.baseToken)));\n        const absoluteMinVolume = calculateAbsoluteMinTradeVolume(pairDetails.baseToken, pricepointBigNumber);\n\n        const newState = { ...state };\n        switch (name) {\n            case \"pricepoint\":\n                // Reset price to default if price is empty or zero\n                if (pricepointBigNumber.lte(new BigNumber(0))) {\n                    newState.pricepoint = initialMarketPrice;\n                } else {\n                    // Set pricepoint to normalized price\n                    newState.pricepoint = pricepointBigNumber.toFixed();\n                }\n                break;\n            case \"volume\":\n                // Set volume to normalized volume\n                newState.volume = volumeBigNumber.toFixed();\n                // Coerce minimum volume if volume < min volume\n                if (volumeBigNumber.lt(minVolumeBigNumber)) {\n                    newState.minVolume = BigNumber.max(volumeBigNumber, absoluteMinVolume).toFixed();\n                }\n                break;\n            case \"minVolume\":\n                // Set min volume to normalized volume\n                newState.minVolume = minVolumeBigNumber.toFixed();\n\n                // Enforce absolute minimum volume\n                if (minVolumeBigNumber.lt(absoluteMinVolume)) {\n                    newState.minVolume = absoluteMinVolume.toFixed();\n                }\n\n                // Coerce volume if min volume > volume\n                if (minVolumeBigNumber.gt(volumeBigNumber)) {\n                    newState.volume = newState.minVolume;\n                }\n                break;\n        }\n        return this.calculateNewState(newState, name);\n    }\n\n    private feeAmount = (): BigNumber => {\n        const { values, side, feePercent, settlementType } = this.props;\n        const nonPriorityVolume = new BigNumber(values.volume || \"0\");\n        const priorityVolume = new BigNumber(values.priorityVolume || \"0\");\n        let feeAmount;\n        if (settlementType === OrderSettlement.RenExAtomic) {\n            feeAmount = side === OrderSide.BUY ? priorityVolume.times(feePercent) : nonPriorityVolume.times(feePercent);\n        } else {\n            feeAmount = side === OrderSide.BUY ? nonPriorityVolume.times(feePercent) : priorityVolume.times(feePercent);\n        }\n        return feeAmount;\n    }\n\n    private fillVolume = (): void => {\n        const { market, values, side, settlementType } = this.props;\n        const usableBalances = settlementType === OrderSettlement.RenEx ? this.props.usableBalances : this.props.usableAtomicBalances;\n        const { pricepoint } = values;\n        const marketDetails = Pairs.get(market, undefined);\n        if (!marketDetails) {\n            return;\n        }\n\n        const priorityToken = marketDetails.quoteToken;\n        const nonPriorityToken = marketDetails.baseToken;\n\n        let nonPriorityVolume = new BigNumber(0);\n        if (side === OrderSide.BUY) {\n            const price = new BigNumber(pricepoint || \"0\");\n            if (!price.isZero()) {\n                const priorityVolume = usableBalances.get(priorityToken) || new BigNumber(0);\n                nonPriorityVolume = priorityVolume.div(price);\n            }\n        } else {\n            nonPriorityVolume = usableBalances.get(nonPriorityToken) || new BigNumber(0);\n        }\n        this.setAndUpdateValues(\"volume\", nonPriorityVolume.toFixed(), true);\n    }\n\n    private handleChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n        const { name, value } = e.target;\n        this.setAndUpdateValues(name, value);\n    }\n\n    private handleBlur = (e: React.ChangeEvent<HTMLInputElement>): void => {\n        const { name, value } = e.target;\n        this.setAndUpdateValues(name, value, true);\n    }\n\n    private setAndUpdateValues(name: string, value: string, blur?: boolean): void {\n        const { setValues, values } = this.props;\n        let newState = this.calculateNewState(values, name, value);\n        // Coerce values if necessary\n        if (blur) {\n            newState = this.coerceValues(newState, name);\n        }\n        setValues(newState);\n    }\n\n}\n\nfunction mapStateToProps(state: ApplicationData): StoreProps {\n    return {\n        sdk: state.sdk.sdk,\n        feePercent: state.sdk.darknodeFeePercent,\n        usableBalances: state.trader.usableBalances,\n        usableAtomicBalances: state.trader.usableAtomicBalances,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch): { actions: NewOrderInputFormProps[\"actions\"] } {\n    return {\n        actions: bindActionCreators({\n            setOrder,\n        }, dispatch)\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NewOrderInputForm);\n","import React from \"react\";\n\nimport BigNumber from \"bignumber.js\";\n\nimport { Formik, FormikBag, FormikErrors, FormikProps } from \"formik\";\nimport { OrderedMap } from \"immutable\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators, Dispatch } from \"redux\";\n\nimport RenExSDK, { OrderSettlement, OrderSide, OrderType, Token, TokenCode } from \"@renex/renex\";\n\nimport NewOrderInputForm from \"./NewOrderInputForm\";\n\nimport { openOrder, OpenOrderAction } from \"../actions/trader/orderActions\";\nimport { Pair, Pairs, TokenDetails, UnknownToken } from \"../lib/market\";\nimport { ApplicationData, MarketPrice, OrderInputs } from \"../reducers/types\";\nimport { InfoLabel } from \"./InfoLabel\";\n\ninterface StoreProps {\n    sdk: RenExSDK;\n    orderInputs: OrderInputs;\n    minEthereumTradeVolume: BigNumber;\n    usableBalances: OrderedMap<TokenCode, BigNumber | null>;\n    usableAtomicBalances: OrderedMap<TokenCode, BigNumber | null>;\n}\n\ninterface NewOrderInputsProps extends StoreProps {\n    market: Pair;\n    marketPrice: number;\n    settlementType: OrderSettlement;\n    actions: {\n        openOrder: OpenOrderAction;\n    };\n}\n\n// Shape of form values\nexport interface NewOrderInputsValues {\n    volume: string;\n    minVolume: string;\n    priorityVolume: string;\n    pricepoint: string;\n}\n// tslint:disable:jsx-no-lambda\n\ninterface NewOrderInputsState {\n    side: OrderSide;\n    showMoreOptions: boolean;\n    allOrNothing: boolean;\n    immediateOrCancel: boolean;\n    fillOrKill: boolean;\n}\nclass OuterForm extends React.Component<NewOrderInputsProps, NewOrderInputsState> {\n    public constructor(props: NewOrderInputsProps) {\n        super(props);\n        this.state = {\n            showMoreOptions: true,\n            allOrNothing: false,\n            immediateOrCancel: false,\n            fillOrKill: false,\n            side: OrderSide.BUY,\n        };\n    }\n\n    public componentDidMount(): void {\n        // Set side based on what user last saved\n        const { orderInputs } = this.props;\n        if (orderInputs.side !== this.state.side) {\n            this.setState({ side: orderInputs.side });\n        }\n    }\n\n    public render(): JSX.Element {\n        const { fillOrKill, allOrNothing, immediateOrCancel, showMoreOptions } = this.state;\n        const { sdk, orderInputs, market, marketPrice, usableBalances, usableAtomicBalances, settlementType } = this.props;\n        const pairDetails = Pairs.get(market, undefined);\n        if (!pairDetails) {\n            return <></>;\n        }\n\n        const nonPriorityTokenDetails = TokenDetails.get(pairDetails.baseToken, UnknownToken);\n        const { side } = this.state;\n        const defaultMarketPrice = marketPrice ? new BigNumber(sdk.utils.normalizePrice(marketPrice)).toFixed() : \"0\";\n        return (\n            <>\n                <div className=\"order--wrapper order--wrapper--tabbed\">\n                    <ul className=\"order--tabs\">\n                        <li className={side === OrderSide.BUY ? \"active\" : \"\"}\n                            role=\"tab\"\n                            onClick={() => { this.setState({ side: OrderSide.BUY }); }}\n                        >\n                            <span>Buy {nonPriorityTokenDetails.symbol}</span>\n                        </li>\n                        <li className={side === OrderSide.SELL ? \"active\" : \"\"}\n                            role=\"tab\"\n                            onClick={() => { this.setState({ side: OrderSide.SELL }); }}\n                        >\n                            <span>Sell {nonPriorityTokenDetails.symbol}</span>\n                        </li>\n                    </ul>\n                    <Formik\n                        initialValues={{\n                            volume: orderInputs.volume || \"\",\n                            minVolume: orderInputs.minVolume || \"\",\n                            pricepoint: orderInputs.pricepoint || defaultMarketPrice,\n                            priorityVolume: \"\",\n                        }}\n                        validate={this.validate}\n                        onSubmit={this.handleSubmit}\n                        render={(props: FormikProps<NewOrderInputsValues>) => (\n                            <NewOrderInputForm\n                                {...props}\n                                market={market}\n                                side={side}\n                                allOrNothing={allOrNothing || fillOrKill}\n                                initialMarketPrice={defaultMarketPrice}\n                                settlementType={settlementType}\n                                calculateAbsoluteMinTradeVolume={this.calculateAbsoluteMinTradeVolume}\n                            />\n                        )}\n                    />\n                </div>\n                <div className={`order--options ${!showMoreOptions ? \"hidden\" : \"\"}`}>\n                    <label>\n                        <input\n                            name=\"allOrNothing\"\n                            type=\"checkbox\"\n                            disabled={fillOrKill}\n                            checked={allOrNothing || fillOrKill}\n                            onChange={this.handleMoreOptions}\n                        />\n                        All or Nothing <InfoLabel>Execute either the entire order or not at all.</InfoLabel>\n                    </label>\n                    <label>\n                        <input\n                            name=\"immediateOrCancel\"\n                            type=\"checkbox\"\n                            disabled={fillOrKill}\n                            checked={immediateOrCancel || fillOrKill}\n                            onChange={this.handleMoreOptions}\n                        />\n                        Immediate or Cancel <InfoLabel>If the order cannot be matched against the current orderbook, cancel the order.</InfoLabel>\n                    </label>\n                    <label>\n                        <input\n                            name=\"fillOrKill\"\n                            type=\"checkbox\"\n                            disabled={allOrNothing && immediateOrCancel}\n                            checked={fillOrKill || (allOrNothing && immediateOrCancel)}\n                            onChange={this.handleMoreOptions}\n                        />\n                        Fill or Kill <InfoLabel>If the entire order cannot be executed against the current orderbook, cancel the order.</InfoLabel>\n                    </label>\n                </div>\n            </>\n        );\n    }\n\n    // tslint:disable-next-line:no-any\n    private handleSubmit = async (values: NewOrderInputsValues, formikBag: FormikBag<NewOrderInputsProps, any>) => {\n        const { setSubmitting, resetForm } = formikBag;\n        const { market, sdk } = this.props;\n        const { side, immediateOrCancel, fillOrKill } = this.state;\n        const { pricepoint, volume, minVolume } = values;\n\n        const orderType = immediateOrCancel || fillOrKill ? OrderType.LIMIT_IOC : OrderType.LIMIT;\n\n        // Callback functions\n        const onSuccess = () => {\n            setSubmitting(false);\n            resetForm({\n                pricepoint,\n                volume: \"0\",\n                minVolume: \"0\",\n                priorityVolume: \"0\",\n            });\n        };\n\n        const onError = () => {\n            setSubmitting(false);\n        };\n\n        this.props.actions.openOrder(\n            sdk,\n            market,\n            side, pricepoint || \"0\",\n            volume || \"0\", minVolume || \"0\",\n            orderType,\n            onSuccess,\n            onError,\n        );\n    }\n\n    private validate = (values: NewOrderInputsValues): FormikErrors<NewOrderInputsValues> => {\n        const { sdk, minEthereumTradeVolume, market, settlementType } = this.props;\n        const usableBalances = settlementType === OrderSettlement.RenEx ? this.props.usableBalances : this.props.usableAtomicBalances;\n        const { side, allOrNothing } = this.state;\n\n        const errors: FormikErrors<NewOrderInputsValues> = {};\n        const marketDetails = Pairs.get(market, undefined);\n        if (!marketDetails) {\n            errors.volume = `Unknown market pair.`;\n            return errors;\n        }\n\n        const sellToken = (side === OrderSide.BUY) ? marketDetails.quoteToken : marketDetails.baseToken;\n        const whichVolume = (side === OrderSide.BUY) ? \"priorityVolume\" : \"volume\";\n        const sellBalance = usableBalances.get(sellToken) || new BigNumber(0);\n        const sellVolume = new BigNumber(values[whichVolume]);\n        const sellTokenDetails = TokenDetails.get(sellToken, UnknownToken);\n\n        const pricepointBigNumber = new BigNumber(values.pricepoint || \"0\");\n        const volumeBigNumber = new BigNumber(values.volume || \"0\");\n        const minVolumeBigNumber = new BigNumber(values.minVolume || \"0\");\n        const priorityVolumeBigNumber = new BigNumber(values.priorityVolume || \"0\");\n\n        // Ensure user has sufficient balance\n        if (sellBalance.lt(sellVolume)) {\n            errors[whichVolume] = `Insufficient ${sellTokenDetails.symbol} balance.`;\n        }\n\n        // Enforce minimum volume\n        if (marketDetails.quoteToken === Token.ETH && priorityVolumeBigNumber.lt(minEthereumTradeVolume)) {\n            errors.priorityVolume = `Minimum order size is ${minEthereumTradeVolume.toFixed()} ETH.`;\n        }\n\n        // Ensure pricepoint is non zero before enforcing absolute minimum volume\n        if (!pricepointBigNumber.isZero()) {\n            const absoluteMinVolume = this.calculateAbsoluteMinTradeVolume(marketDetails.baseToken, pricepointBigNumber);\n            const nonPriorityDetails = TokenDetails.get(marketDetails.baseToken, UnknownToken);\n            if (minVolumeBigNumber.lt(absoluteMinVolume)) {\n                const whichMinVolume = allOrNothing ? \"volume\" : \"minVolume\";\n                const volumeString = allOrNothing ? \"Volume\" : \"Minimum volume\";\n                errors[whichMinVolume] = `${volumeString} must be at least ${absoluteMinVolume.toFixed()} ${nonPriorityDetails.symbol}.`;\n            }\n        }\n\n        // Minimum volume should be less than volume\n        if (volumeBigNumber.lt(minVolumeBigNumber)) {\n            errors.volume = `Volume cannot be less than minimum volume.`;\n        }\n\n        return errors;\n    }\n\n    private handleMoreOptions = (e: React.ChangeEvent<HTMLInputElement>): void => {\n        const { name, checked } = e.target;\n        this.setState((oldState) => ({ ...oldState, [name]: checked, }));\n    }\n\n    private calculateAbsoluteMinTradeVolume = (baseToken: string, price: BigNumber): BigNumber => {\n        const { sdk, minEthereumTradeVolume } = this.props;\n        switch (baseToken) {\n            case Token.ETH:\n                return minEthereumTradeVolume;\n            case Token.WBTC:\n                return new BigNumber(0.0002);\n            default:\n                return new BigNumber(sdk.utils.normalizeVolume(minEthereumTradeVolume.dividedBy(price), true));\n        }\n    }\n\n}\n\n// tslint:enable:jsx-no-lambda\n\nfunction mapStateToProps(state: ApplicationData): StoreProps {\n    return {\n        sdk: state.sdk.sdk,\n        orderInputs: state.inputs.orderInputs,\n        minEthereumTradeVolume: state.sdk.minEthTradeVolume,\n        usableBalances: state.trader.usableBalances,\n        usableAtomicBalances: state.trader.usableAtomicBalances,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch): { actions: NewOrderInputsProps[\"actions\"] } {\n    return {\n        actions: bindActionCreators({\n            openOrder,\n        }, dispatch)\n    };\n}\n\nexport const NewOrderInputs = connect(mapStateToProps, mapDispatchToProps)(OuterForm);\n","import * as React from \"react\";\n\nimport BigNumber from \"bignumber.js\";\n\nimport RenExSDK, { AtomicConnectionStatus, TokenCode } from \"@renex/renex\";\nimport { OrderedMap } from \"immutable\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { bindActionCreators } from \"redux\";\n\nimport { updateAtomConnectionStatus, UpdateAtomConnectionStatusAction } from \"../actions/settlement/atomicActions\";\nimport { getVolumeStep } from \"../lib/conversion\";\nimport { TokenDetails, UnknownToken } from \"../lib/market\";\nimport { ApplicationData } from \"../reducers/types\";\nimport { InfoLabel } from \"./InfoLabel\";\nimport Loading from \"./Loading\";\nimport { TradeTokenBanner } from \"./TradeTokenBanner\";\n\ninterface StoreProps {\n    sdk: RenExSDK;\n    atomConnectionStatus: AtomicConnectionStatus;\n    usableAtomicBalances: OrderedMap<TokenCode, BigNumber | null>;\n    wrappingFeePercent: BigNumber;\n}\n\ninterface WrapBitcoinProps extends StoreProps {\n    actions: {\n        updateAtomConnectionStatus: UpdateAtomConnectionStatusAction;\n    };\n}\n\ninterface WrapBitcoinState {\n    error: string | null;\n    linkPending: boolean;\n    inputValue: string;\n    wrap: boolean;\n    isSubmitting: boolean;\n}\n\nclass InnerWrapBitcoin extends React.Component<WrapBitcoinProps, WrapBitcoinState> {\n\n    constructor(props: WrapBitcoinProps) {\n        super(props);\n        this.state = {\n            error: null,\n            linkPending: false,\n            inputValue: \"0\",\n            wrap: true,\n            isSubmitting: false,\n        };\n    }\n\n    // tslint:disable:jsx-no-lambda\n    public render(): JSX.Element {\n        const { wrappingFeePercent, usableAtomicBalances } = this.props;\n        const btcTokenDetails = TokenDetails.get(\"BTC\", UnknownToken);\n        const wbtcTokenDetails = TokenDetails.get(\"WBTC\", UnknownToken);\n        const { isSubmitting, wrap, error } = this.state;\n        let amount = new BigNumber(this.state.inputValue);\n        if (amount.isNaN() || !amount.isFinite()) {\n            amount = new BigNumber(0);\n        }\n        const spendToken = wrap ? btcTokenDetails : wbtcTokenDetails;\n        const spendBalance = usableAtomicBalances.get(spendToken.symbol) || new BigNumber(0);\n        const receiveToken = wrap ? wbtcTokenDetails : btcTokenDetails;\n        const feeAmount = amount.times(wrappingFeePercent);\n\n        return <div className=\"order--wrapper order--wrapper--tabbed\">\n            <ul className=\"order--tabs\">\n                <li className={wrap ? \"active\" : \"\"}\n                    role=\"tab\"\n                    onClick={() => { this.setState({ wrap: true }); }}\n                >\n                    <span>Wrap BTC</span>\n                </li>\n                <li className={!wrap ? \"active\" : \"\"}\n                    role=\"tab\"\n                    onClick={() => { this.setState({ wrap: false }); }}\n                >\n                    <span>Unwrap WBTC</span>\n                </li>\n            </ul>\n            <form onSubmit={this.handleSubmit}>\n                <div className=\"order--inputs\">\n                    <div className=\"order--input-wrapper\">\n                        <label>\n                            <div className=\"order--title\">\n                                <span>Spend</span>\n                            </div>\n                            <span className=\"order--input-item\">\n                                <input min=\"0\" step=\".00000001\" type=\"number\" value={this.state.inputValue} onChange={this.handleChange} />\n                                <span>{spendToken.symbol}</span>\n                            </span>\n                        </label>\n                        {spendBalance.lt(amount) ?\n                            <p className=\"order--warning\">Insufficient {spendToken.symbol} balance</p>\n                            : (\n                                !feeAmount.isEqualTo(0) &&\n                                <p className=\"order--message\">You will spend {new BigNumber(this.state.inputValue).plus(feeAmount).toFixed()} {wrap ? \"BTC\" : \"WBTC\"} after fees.</p>\n                            )\n\n                        }\n                    </div>\n                    <div className=\"order--input-wrapper\">\n                        <label>\n                            <div className=\"order--title\">\n                                <span>Receive</span>\n                            </div>\n                            <span className=\"order--input-item\">\n                                <input min=\"0\" step=\".00000001\" type=\"number\" value={this.state.inputValue} onChange={this.handleChange} disabled />\n                                <span>{receiveToken.symbol}</span>\n                            </span>\n                        </label>\n                    </div>\n                </div>\n                {!feeAmount.isEqualTo(0) &&\n                    <div>\n                        <span>Fee: {feeAmount.toFixed()} {spendToken.symbol}</span>\n                        <InfoLabel>Fees for {wrap ? \"wrapping BTC\" : \"unwrapping WBTC\"} are set to {wrappingFeePercent.times(100).toFixed()}% of the order volume.</InfoLabel>\n                    </div>\n                }\n                <div className=\"order--footer\">\n                    <button className={`order--button ${isSubmitting ? \"submitting\" : \"\"}`} type=\"submit\" disabled={this.checkDisable()}>\n                        <span>\n                            {isSubmitting ?\n                                <Loading />\n                                : (\n                                    wrap ? \"Wrap BTC\" : \"Unwrap WBTC\"\n                                )\n                            }\n                        </span>\n                    </button>\n                </div>\n                {error && error !== \"User rejected the swap\" &&\n                    <div>\n                        <p className=\"order--warning\">{error}</p>\n                    </div>\n                }\n            </form>\n        </div >;\n    }\n\n    private checkDisable = (): boolean => {\n        const { usableAtomicBalances } = this.props;\n        const { wrap, isSubmitting } = this.state;\n        const value = new BigNumber(this.state.inputValue);\n        const spendToken = wrap ? \"BTC\" : \"WBTC\";\n        const usable: BigNumber = usableAtomicBalances.get(spendToken) || new BigNumber(0);\n        const valid = value.gt(0) && value.lte(usable);\n        return !valid || isSubmitting;\n    }\n\n    private handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n        const { wrap } = this.state;\n        this.setState({ isSubmitting: true, error: null });\n        event.preventDefault();\n        // Buying WBTC means wrapping Bitcoin\n        const swap = (wrap) ? this.wrap() : this.unwrap();\n        return swap.then((res) => {\n            console.log(res);\n            this.setState({ isSubmitting: false });\n        }).catch((err: Error) => {\n            console.error(err);\n            this.setState({ error: err.message, isSubmitting: false });\n        });\n    }\n\n    // tslint:disable-next-line:no-any\n    private wrap = async (): Promise<any> => {\n        const { sdk } = this.props;\n        return sdk.atom.wrap(this.state.inputValue, \"BTC\");\n    }\n\n    // tslint:disable-next-line:no-any\n    private unwrap = async (): Promise<any> => {\n        const { sdk } = this.props;\n        return sdk.atom.unwrap(this.state.inputValue, \"WBTC\");\n    }\n\n    private handleChange = async (event: React.ChangeEvent<HTMLInputElement>) => {\n        let inputValue;\n        inputValue = (event.target as HTMLInputElement).value;\n        if (inputValue.indexOf(\"e\") >= 0) {\n            inputValue = new BigNumber(inputValue).toFixed();\n        }\n        this.setState({ inputValue });\n    }\n}\n\nfunction mapStateToProps(state: ApplicationData): StoreProps {\n    return {\n        sdk: state.sdk.sdk,\n        atomConnectionStatus: state.trader.atomConnectionStatus,\n        usableAtomicBalances: state.trader.usableAtomicBalances,\n        wrappingFeePercent: state.sdk.wrappingFeePercent,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch): { actions: WrapBitcoinProps[\"actions\"] } {\n    return {\n        actions: bindActionCreators({\n            updateAtomConnectionStatus,\n        }, dispatch)\n    };\n}\n\nexport const WrapBitcoin = connect(mapStateToProps, mapDispatchToProps)(InnerWrapBitcoin);\n","import * as React from \"react\";\n\nimport BigNumber from \"bignumber.js\";\n\nimport BN from \"bn.js\";\nimport { OrderedMap } from \"immutable\";\nimport { connect } from \"react-redux\";\n\nimport RenExSDK, { AtomicConnectionStatus, OrderSettlement } from \"@renex/renex\";\n\nimport Heading from \"./Heading\";\nimport SelectMarket from \"./SelectMarket\";\n\nimport { Pair, Pairs } from \"../lib/market\";\nimport { ApplicationData, MarketPrice, UnknownMarketPrice } from \"../reducers/types\";\nimport { AtomicNotice } from \"./AtomicNotice\";\nimport { NewOrderInputs } from \"./NewOrderInputs\";\nimport { WrapBitcoin } from \"./WrapBitcoin\";\n\ninterface StoreProps {\n    market: Pair;\n    marketPrices: OrderedMap<Pair, MarketPrice>;\n    sdk: RenExSDK;\n    atomConnectionStatus: AtomicConnectionStatus;\n}\n\ninterface NewOrderProps extends StoreProps {\n}\n\n// There are some issues with storing prices and volumes as BigNumbers/numbers\n// regarding rerendering, e.g. 0.0 being converted to 0 before the user has the\n// chance to finish typing a decimal number. Hence they are stored as strings.\n\ninterface NewOrderState {\n}\n\n/**\n * NewOrder is a visual component for allowing users to open new orders\n */\nclass NewOrder extends React.Component<NewOrderProps, NewOrderState> {\n    private mounted: boolean;\n\n    constructor(props: NewOrderProps) {\n        super(props);\n        this.mounted = false;\n    }\n\n    public render(): JSX.Element {\n        const { sdk, market, marketPrices } = this.props;\n        const pairDetails = Pairs.get(market, undefined);\n\n        let newOrder;\n        if (pairDetails === undefined) {\n            newOrder = <div className=\"order--wrapper\">\n                <p>Invalid market pair: {market}</p>\n            </div>;\n        } else {\n            const settlement = pairDetails.orderSettlement;\n            const marketPrice = pairDetails.fixedPrice ? pairDetails.fixedPrice.toNumber() : marketPrices.get(market, UnknownMarketPrice).price;\n\n            if (!this.atomConnected() && settlement === OrderSettlement.RenExAtomic) {\n                newOrder = <AtomicNotice />;\n            } else if (market === Pair.BTC_WBTC) {\n                newOrder = <WrapBitcoin />;\n            } else {\n                newOrder = <NewOrderInputs\n                    market={market}\n                    marketPrice={marketPrice}\n                    settlementType={settlement}\n                />;\n            }\n        }\n\n        return (\n            <div className=\"section order\">\n                <div className=\"container\">\n                    <Heading title=\"Submit an order\" />\n                    <SelectMarket />\n                    {newOrder}\n                </div>\n            </div >\n        );\n    }\n\n    private atomConnected(): boolean {\n        const { atomConnectionStatus } = this.props;\n        return (\n            atomConnectionStatus === AtomicConnectionStatus.ConnectedLocked ||\n            atomConnectionStatus === AtomicConnectionStatus.ConnectedUnlocked\n        );\n    }\n\n}\n\nfunction mapStateToProps(state: ApplicationData): StoreProps {\n    return {\n        market: state.inputs.market,\n        marketPrices: state.marketPrices.marketPrices,\n        sdk: state.sdk.sdk,\n        atomConnectionStatus: state.trader.atomConnectionStatus,\n    };\n}\n\nexport default connect(mapStateToProps, null)(NewOrder);\n","import * as React from \"react\";\n\nimport { connect } from \"react-redux\";\nimport { bindActionCreators, Dispatch } from \"redux\";\n\nimport BalanceBanner from \"../../components/BalanceBanner\";\nimport ExecutedTrades from \"../../components/ExecutedTrades\";\nimport Header from \"../../components/Header\";\nimport HiddenOrderbook from \"../../components/HiddenOrderbook\";\nimport MarketBanner from \"../../components/MarketBanner\";\nimport NewOrder from \"../../components/NewOrder\";\nimport SubmittedTrades from \"../../components/SubmittedTrades\";\n\nimport { setMarket, SetMarketAction } from \"../../actions/inputs/inputsActions\";\nimport { Pair, Pairs } from \"../../lib/market\";\n\ninterface ExchangeProps {\n    actions: {\n        setMarket: SetMarketAction;\n    };\n}\n\ninterface ExchangeState {\n}\n\n/**\n * Home is a page whose principal component allows users to open orders. The\n * page also displays the hidden orderbook.\n */\nclass Exchange extends React.Component<ExchangeProps, ExchangeState> {\n    public componentDidMount(): void {\n        // Set market pair based on URL\n        const params = window.location.href.split(\"/\");\n        const fstCode = params[4];\n        const sndCode = params[5];\n        if (fstCode && sndCode) {\n            for (const pair of Pairs.toArray()) {\n                if (fstCode.toUpperCase() === pair.quoteToken) {\n                    if (sndCode.toUpperCase() === pair.baseToken) {\n                        this.props.actions.setMarket({ market: pair.code });\n                        break;\n                    }\n                }\n            }\n        }\n    }\n\n    public render(): JSX.Element {\n        return (\n            <div className=\"exchange\">\n                <MarketBanner />\n                <Header withMenu={true} />\n                <BalanceBanner />\n                <div className=\"content\">\n                    <NewOrder />\n                    <SubmittedTrades recent />\n                    <ExecutedTrades recent />\n                    <HiddenOrderbook />\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch): { actions: ExchangeProps[\"actions\"] } {\n    return {\n        actions: bindActionCreators({\n            setMarket,\n        }, dispatch)\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(Exchange);\n","import { createStandardAction } from \"typesafe-actions\";\n\ninterface AgreeToTermsPayload { agreedToTerms: boolean; }\nexport type AgreeToTermsAction = (payload: AgreeToTermsPayload) => void;\nexport const agreeToTerms = createStandardAction(\"AGREE_TO_TERMS\")<AgreeToTermsPayload>();\n","import * as React from \"react\";\n\nimport { connect } from \"react-redux\";\nimport { bindActionCreators, Dispatch } from \"redux\";\n\nimport { clearPopup, ClearPopupAction, SetPopupPayload } from \"../../actions/popup/popupActions\";\nimport { agreeToTerms, AgreeToTermsAction } from \"../../actions/trader/termsActions\";\n\ninterface TermsPopupProps {\n    actions: {\n        agreeToTerms: AgreeToTermsAction;\n        clearPopup: ClearPopupAction;\n    };\n}\n\ninterface TermsPopupState {\n    scrollBottom: boolean;\n}\n\n/**\n * TermsPopup is a popup component for displaying terms and conditions\n */\nclass TermsPopup extends React.Component<TermsPopupProps, TermsPopupState> {\n    public constructor(props: TermsPopupProps, context: object) {\n        super(props, context);\n        this.state = {\n            scrollBottom: false,\n        };\n        this.handleScroll = this.handleScroll.bind(this);\n        this.handleAgreement = this.handleAgreement.bind(this);\n    }\n\n    public render(): JSX.Element {\n        const { scrollBottom } = this.state;\n        return (\n            <div className=\"popup terms\">\n                <h2>End User License Agreement</h2>\n                <div className=\"terms--content\" onScroll={this.handleScroll}>\n                    <p>Please read this EULA carefully, as it sets out the basis upon which we license the Software for use. Before you download the Software from our website, we will ask you to give your express agreement to the provisions of this EULA. By agreeing to be bound by this EULA, you further agree that any person you authorise to use the Software will comply with the provisions of this EULA.</p>\n                    <p><b>AGREEMENT</b></p>\n                    <ol>\n                        <li>\n                            Definitions\n                            <ol>\n                                <li>\n                                    Except to the extent expressly provided otherwise, in this EULA:<br />\n                                    &ldquo;Dappbase Ventures Limited&rdquo; means the company incorporated in the British Virgin Islands (company number 1959524), with its registered office at Vistra Corporate Services Centre, Wickhams Cay II, Road Town, Tortola, VG 1110, British Virgin Islands;<br />\n                                    &ldquo;Documentation&rdquo; means the documentation for the Software produced by the Licensor and delivered or made available by the Licensor to the User;<br />\n                                    &ldquo;Effective Date&rdquo; means the date upon which the User gives the User&apos;s express consent to this EULA, following the issue of this EULA by the Licensor;<br />\n                                    &ldquo;EULA&rdquo; means this end user licence agreement, including any amendments to this end user licence agreement from time to time;<br />\n                                    &ldquo;Fees&rdquo; means the fees imposed on the User by the Licensor as specified on the Licensor’s website at <a href=\"https://republicprotocol.com/\" target=\"_blank\">https://republicprotocol.com/</a>;<br />\n                                    &ldquo;Force Majeure Event&rdquo; means an event, or a series of related events, that is outside the reasonable control of the party affected (including failures of the internet or any public telecommunications network, hacker attacks, denial of service attacks, virus or other malicious software attacks or infections, power failures, industrial disputes affecting any third party, changes to the law, disasters, explosions, fires, floods, riots, terrorist attacks and wars);<br />\n                                    &ldquo;Intellectual Property Rights&rdquo; means all intellectual property rights wherever in the world, whether registrable or unregistrable, registered or unregistered, including any application or right of application for such rights (and these &ldquo;intellectual property rights&rdquo; include copyright and related rights, database rights, confidential information, trade secrets, know-how, business names, trade names, trademarks, service marks, passing off rights, unfair competition rights, patents, petty patents, utility models, semi-conductor topography rights and rights in designs);<br />\n                                    &ldquo;Licensor&rdquo; means Dappbase Ventures Limited (the company that owns the businesses associated with &ldquo;RenEx&rdquo;, and the &ldquo;Republic Protocol&rdquo; trademark name), a company incorporated in the British Virgin Islands (company number 1959524), with its registered office at Vistra Corporate Services Centre, Wickhams Cay II, Road Town, Tortola, VG 1110, British Virgin Islands;<br />\n                                    &ldquo;Maintenance Services&rdquo; means the supply to the User and application to the Software of Updates and Upgrades;<br />\n                                    &ldquo;Minimum Term&rdquo; means, in respect of this EULA, the period of 12 months beginning on the Effective Date;<br />\n                                    &ldquo;Payments&rdquo; means the method for payment of fees imposed on the User by the Licensor as specified on the Licensor’s website at <a href=\"https://republicprotocol.com/\" target=\"_blank\">https://republicprotocol.com/</a>;<br />\n                                    &ldquo;RenEx&rdquo; means the software platform provided by the Licensor that facilitates a decentralized dark pool exchange under the &ldquo;Republic Protocol&rdquo; trademark for the trading of digital assets;<br />\n                                    &ldquo;Republic Protocol&rdquo; means the trademark name under which the Licensor operates the its platform protocol for the building and operating of decentralized dark pool exchanges, including the RenEx dark pool exchange platform, including all related research, development and commercial activities;<br />\n                                    &ldquo;Services&rdquo; means any services that the Licensor provides to the User, or has an obligation to provide to the User, under this EULA;<br />\n                                    &ldquo;Software&rdquo; means software relating to the RenEx dark pool platform operated under the Republic Protocol trademark by the Licensor;<br />\n                                    &ldquo;Software Defect&rdquo; means a defect, error or bug in the Software having a material adverse effect on the appearance, operation, functionality or performance of the Software, but excluding any defect, error or bug caused by or arising as a result of:\n                                    <ol type=\"a\">\n                                        <li>any act or omission of the User or any person authorised by the User to use the Software;</li>\n                                        <li>any use of the Software contrary to the Documentation by the User or any person authorised by the User to use the Software;</li>\n                                        <li>a failure of the User to perform or observe any of its obligations in this EULA; and/or</li>\n                                        <li>an incompatibility between the Software and any other system, network, application, program, hardware or software not specified as compatible in the Software Specification;</li>\n                                    </ol>\n                                    &ldquo;Software Specification&rdquo; means the specification for the Software set out in the Documentation;<br />\n                                    &ldquo;Source Code&rdquo; means the Software code in human-readable form or any part of the Software code in human-readable form, including code compiled to create the Software or decompiled from the Software, but excluding interpreted code comprised in the Software;<br />\n                                    &ldquo;Support Services&rdquo; means support in relation to the use of the Software and the identification and resolution of errors in the Software, but shall not include the provision of training services whether in relation to the Software or otherwise;<br />\n                                    &ldquo;Term&rdquo; means the term of this EULA, commencing in accordance with Clause 3.1 and ending in accordance with Clause 3.2;<br />\n                                    &ldquo;Update&rdquo; means a hotfix, patch or minor version update to the Software;<br />\n                                    &ldquo;Upgrade&rdquo; means a major version upgrade of the Software;<br />\n                                    &ldquo;User&rdquo; means the person to whom the Licensor grants a right to use the Software under this EULA; and<br />\n                                    &ldquo;User Indemnity Event&rdquo; has the meaning given to it in Clause 13.1.\n                                </li>\n                            </ol>\n                        </li>\n                        <li>\n                            Credit\n                            <ol>\n                                <li>This document was created using a template from SEQ Legal (<a href=\"https://seqlegal.com\" target=\"_blank\">https://seqlegal.com</a>).</li>\n                            </ol>\n                        </li>\n                        <li>\n                            Term\n                            <ol>\n                                <li>This EULA shall come into force upon the Effective Date.</li>\n                                <li>This EULA shall continue in force indefinitely, subject to termination in accordance with Clause 15 or any other provision of this EULA.</li>\n                            </ol>\n                        </li>\n                        <li>\n                            Licence\n                            <ol>\n                                <li>\n                                    The Licensor hereby grants to the User from the date of supply of the Software to the User until the end of the Term a worldwide, non-exclusive licence to:\n                                    <ol type=\"a\">\n                                        <li>install the Software; and</li>\n                                        <li>use the Software in accordance with the Documentation.</li>\n                                    </ol>\n                                    subject to the limitations and prohibitions set out and referred to in this Clause 4.\n                                </li>\n                                <li>The User may not sub-license and must not purport to sub-license any rights granted under Clause 4.1.</li>\n                                <li>\n                                    Save to the extent expressly permitted by this EULA or required by applicable law on a non-excludable basis, any licence granted under this Clause 4 shall be subject to the following prohibitions:\n                                    <ol type=\"a\">\n                                        <li>the User must not sell, resell, rent, lease, loan, supply, publish, distribute or redistribute the Software;</li>\n                                        <li>the User must not alter, edit or adapt the Software; and</li>\n                                        <li>the User must not decompile, de-obfuscate or reverse engineer, or attempt to decompile, de-obfuscate or reverse engineer, the Software.</li>\n                                    </ol>\n                                </li>\n                                <li>The User shall be responsible for the security of copies of the Software supplied to the User under this EULA (or created from such copies) and shall use all reasonable endeavours (including all reasonable security measures) to ensure that access to such copies is restricted to persons authorised to use them under this EULA.</li>\n                            </ol>\n                        </li>\n                        <li>\n                            Source Code\n                            <ol>\n                                <li>Nothing in this EULA shall give to the User or any other person any right to access or use the Source Code or constitute any licence of the Source Code.</li>\n                            </ol>\n                        </li>\n                        <li>\n                            Maintenance Services\n                            <ol>\n                                <li>The Licensor may provide Maintenance Services to the User at its absolute own discretion. The Licensor is under no obligation to the User to provide such Maintenance Services, except as it determines from time to time in line with any technical and/or operational needs it may identify.</li>\n                            </ol>\n                        </li>\n                        <li>\n                            Support Services\n                            <ol>\n                                <li>The Licensor may provide Support Services to the User at its absolute own discretion. The Licensor is under no obligation to the User to provide such Support Services, except as it determines from time to time in line with any technical and/or operational needs it may identify.</li>\n                            </ol>\n                        </li>\n                        <li>\n                            No assignment of Intellectual Property Rights\n                            <ol>\n                                <li>Nothing in this EULA shall operate to assign or transfer any Intellectual Property Rights from the Licensor to the User, or from the User to the Licensor.</li>\n                            </ol>\n                        </li>\n                        <li>\n                            Fees\n                            <ol>\n                                <li>The User shall pay any relevant Fees that may be imposed by the Licensor for the use of its software, as specified on its website at <a href=\"https://republicprotocol.com/\" target=\"_blank\">https://republicprotocol.com/</a></li>\n                                <li>All amounts stated in or in relation to this EULA are, unless the context requires otherwise, stated on its website at <a href=\"https://republicprotocol.com/\" target=\"_blank\">https://republicprotocol.com/</a></li>\n                            </ol>\n                        </li>\n                        <li>\n                            Payments\n                            <ol>\n                                <li>Any relevant Payments will be deducted by the Licensor from the User for the use of its Software in accordance with the processes outlined on its website at <a href=\"https://republicprotocol.com/\" target=\"_blank\">https://republicprotocol.com/</a></li>\n                            </ol>\n                        </li>\n                        <li>\n                            Warranties\n                            <ol>\n                                <li>The Licensor warrants to the User that it has the legal right and authority to enter into this EULA and to perform its obligations under this EULA.</li>\n                                <li>The User warrants to the Licensor that it has the legal right and authority to enter into this EULA and to perform its obligations under this EULA.</li>\n                                <li>All of the parties' warranties and representations in respect of the subject matter of this EULA are expressly set out in this EULA. To the maximum extent permitted by applicable law, no other warranties or representations concerning the subject matter of this EULA will be implied into this EULA or any related contract.</li>\n                            </ol>\n                        </li>\n                        <li>\n                            Acknowledgements and warranty limitations\n                            <ol>\n                                <li>The User acknowledges that complex software is never wholly free from defects, errors and bugs; and subject to the other provisions of this EULA, the Licensor gives no warranty or representation that the Software will be wholly free from defects, errors and bugs.</li>\n                                <li>The User acknowledges that complex software is never entirely free from security vulnerabilities; and subject to the other provisions of this EULA, the Licensor gives no warranty or representation that the Software will be entirely secure.</li>\n                                <li>The User acknowledges that the Software is only designed to be compatible with that software specified as compatible in the Software Specification; and the Licensor does not warrant or represent that the Software will be compatible with any other software.</li>\n                                <li>The User acknowledges that the Licensor will not provide any legal, financial, accounting or taxation advice under this EULA or in relation to the Software; and, except to the extent expressly provided otherwise in this EULA, the Licensor does not warrant or represent that the Software or the use of the Software by the User will not give rise to any legal liability on the part of the User or any other person.</li>\n                            </ol>\n                        </li>\n                        <li>\n                            Indemnities\n                            <ol>\n                                <li>The User shall indemnify and shall keep indemnified the Licensor against any and all liabilities, damages, losses, costs and expenses (including legal expenses and amounts reasonably paid in settlement of legal claims) suffered or incurred by the Licensor and arising directly or indirectly as a result of any breach by the User of this EULA (a \"User Indemnity Event\").</li>\n                                <li>\n                                    The Licensor must:\n                                    <ol type=\"a\">\n                                        <li>upon becoming aware of an actual or potential User Indemnity Event, notify the User;</li>\n                                        <li>provide to the User all such assistance as may be reasonably requested by the User in relation to the User Indemnity Event;</li>\n                                        <li>allow the User the exclusive conduct of all disputes, proceedings, negotiations and settlements with third parties relating to the User Indemnity Event; and</li>\n                                        <li>not admit liability to any third party in connection with the User Indemnity Event or settle any disputes or proceedings involving a third party and relating to the User Indemnity Event without the prior written consent of the User,</li>\n                                    </ol>\n                                    without prejudice to the User's obligations under Clause 13.1.\n                                </li>\n                                <li>The indemnity protection set out in this Clause 13 shall not be subject to the limitations and exclusions of liability set out in this EULA.</li>\n                            </ol>\n                        </li>\n                        <li>\n                            Limitations and exclusions of liability\n                            <ol>\n                                <li>\n                                    Nothing in this EULA will:\n                                    <ol type=\"a\">\n                                        <li>limit or exclude any liability for death or personal injury resulting from negligence;</li>\n                                        <li>limit or exclude any liability for fraud or fraudulent misrepresentation;</li>\n                                        <li>limit any liabilities in any way that is not permitted under applicable law; or</li>\n                                        <li>exclude any liabilities that may not be excluded under applicable law,</li>\n                                    </ol>\n                                    and, if a party is a consumer, that party's statutory rights will not be excluded or limited by this EULA, except to the extent permitted by law.\n                                </li>\n                                <li>\n                                    The limitations and exclusions of liability set out in this Clause 14 and elsewhere in this EULA:\n                                    <ol type=\"a\">\n                                        <li>are subject to Clause 14.1; and</li>\n                                        <li>govern all liabilities arising under this EULA or relating to the subject matter of this EULA, including liabilities arising in contract, in tort (including negligence) and for breach of statutory duty, except to the extent expressly provided otherwise in this EULA.</li>\n                                    </ol>\n                                </li>\n                                <li>The Licensor will not be liable to the User in respect of any losses arising out of a Force Majeure Event.</li>\n                                <li>The Licensor will not be liable to the User in respect of any loss of profits or anticipated savings.</li>\n                                <li>The Licensor will not be liable to the User in respect of any loss of revenue or income.</li>\n                                <li>The Licensor will not be liable to the User in respect of any loss of business, contracts or opportunities.</li>\n                                <li>The Licensor will not be liable to the User in respect of any loss or corruption of any data, database or software.</li>\n                                <li>The Licensor will not be liable to the User in respect of any special, indirect or consequential loss or damage.</li>\n                                <li>\n                                    The liability of the Licensor to the User under this EULA in respect of any event or series of related events shall not exceed the greater of:\n                                    <ol type=\"a\">\n                                        <li>the total amount paid and payable by the User to the Licensor under this EULA.</li>\n                                    </ol>\n                                </li>\n                                <li>\n                                    The aggregate liability of the Licensor to the User under this EULA shall not exceed the greater of:\n                                    <ol type=\"a\">\n                                        <li>the total amount paid and payable by the User to the Licensor under this EULA.</li>\n                                    </ol>\n                                </li>\n                            </ol>\n                        </li>\n                        <li>\n                            Termination\n                            <ol>\n                                <li>The Licensor may terminate this EULA at its absolute own discretion by giving to the User written notice of termination.</li>\n                                <li>The User may terminate this EULA by giving to the Licensor not less than 30 days' written notice of termination, expiring at the end of any calendar month.</li>\n                                <li>\n                                    Either party may terminate this EULA immediately by giving written notice of termination to the other party if:\n                                    <ol type=\"a\">\n                                        <li>the other party commits any material breach of this EULA, and the breach is not remediable;</li>\n                                        <li>the other party commits a material breach of this EULA, and the breach is remediable but the other party fails to remedy the breach within the period of 30 days following the giving of a written notice to the other party requiring the breach to be remedied; or</li>\n                                        <li>the other party persistently breaches this EULA (irrespective of whether such breaches collectively constitute a material breach).</li>\n                                    </ol>\n                                </li>\n                                <li>\n                                    Either party may terminate this EULA immediately by giving written notice of termination to the other party if:\n                                    <ol type=\"a\">\n                                        <li>\n                                            the other party:\n                                            <ol type=\"i\">\n                                                <li>is dissolved;</li>\n                                                <li>ceases to conduct all (or substantially all) of its business;</li>\n                                                <li>is or becomes unable to pay its debts as they fall due;</li>\n                                                <li>is or becomes insolvent or is declared insolvent; or</li>\n                                                <li>convenes a meeting or makes or proposes to make any arrangement or composition with its creditors;</li>\n                                            </ol>\n                                        </li>\n                                        <li>an administrator, administrative receiver, liquidator, receiver, trustee, manager or similar is appointed over any of the assets of the other party;</li>\n                                        <li>an order is made for the winding up of the other party, or the other party passes a resolution for its winding up (other than for the purpose of a solvent company reorganisation where the resulting entity will assume all the obligations of the other party under this EULA); or</li>\n                                        <li>\n                                            if that other party is an individual:\n                                            <ol type=\"i\">\n                                                <li>that other party dies;</li>\n                                                <li>as a result of illness or incapacity, that other party becomes incapable of managing his or her own affairs; or</li>\n                                                <li>that other party is the subject of a bankruptcy petition or order.</li>\n                                            </ol>\n                                        </li>\n                                    </ol>\n                                </li>\n                            </ol>\n                        </li>\n                        <li>\n                            Effects of termination\n                            <ol>\n                                <li>Upon the termination of this EULA, all of the provisions of this EULA shall cease to have effect, save that the following provisions of this EULA shall survive and continue to have effect (in accordance with their express terms or otherwise indefinitely): Clauses 1, 4.1, 10.1, 13, 14, 16, 17 and 18.</li>\n                                <li>Except to the extent that this EULA expressly provides otherwise, the termination of this EULA shall not affect the accrued rights of either party.</li>\n                                <li>\n                                    Within 30 days following the termination of this EULA for any reason:\n                                    <ol type=\"a\">\n                                        <li>the User must pay to the Licensor any Charges in respect of Services provided to the User before the termination of this EULA and in respect of licences in effect before the termination of this EULA; and</li>\n                                        <li>the Licensor must refund to the User any Charges paid by the User to the Licensor in respect of Services that were to be (but are not) provided to the User after the termination of this EULA and in respect of licences that were to be (but are not) in effect after the termination of this EULA,</li>\n                                    </ol>\n                                    without prejudice to the parties' other legal rights.\n                                </li>\n                                <li>For the avoidance of doubt, the licences of the Software in this EULA shall terminate upon the termination of this EULA; and, accordingly, the User must immediately cease to use the Software upon the termination of this EULA.</li>\n                                <li>\n                                    Within 10 Business Days following the termination of this EULA, the User must:\n                                    <ol type=\"a\">\n                                        <li>return to the Licensor or dispose of as the Licensor may instruct all media in its possession or control containing the Software; and</li>\n                                        <li>irrevocably delete from all computer systems in its possession or control all copies of the Software.</li>\n                                    </ol>\n                                </li>\n                            </ol>\n                        </li>\n                        <li>\n                            General\n                            <ol>\n                                <li>No breach of any provision of this EULA shall be waived except with the express written consent of the party not in breach.</li>\n                                <li>If any provision of this EULA is determined by any court or other competent authority to be unlawful and/or unenforceable, the other provisions of this EULA will continue in effect. If any unlawful and/or unenforceable provision would be lawful or enforceable if part of it were deleted, that part will be deemed to be deleted, and the rest of the provision will continue in effect (unless that would contradict the clear intention of the parties, in which case the entirety of the relevant provision will be deemed to be deleted).</li>\n                                <li>This EULA may not be varied except by a written document signed by or on behalf of each of the parties.</li>\n                                <li>The User hereby agrees that the Licensor may assign the Licensor's contractual rights and obligations under this EULA to any successor to all or a substantial part of the business of the Licensor from time to time. The User must not without the prior written consent of the Licensor assign, transfer or otherwise deal with any of the User's contractual rights or obligations under this EULA.</li>\n                                <li>This EULA is made for the benefit of the parties, and is not intended to benefit any third party or be enforceable by any third party. The rights of the parties to terminate, rescind, or agree any amendment, waiver, variation or settlement under or relating to this EULA are not subject to the consent of any third party.</li>\n                                <li>Subject to Clause 14.1, this EULA shall constitute the entire agreement between the parties in relation to the subject matter of this EULA, and shall supersede all previous agreements, arrangements and understandings between the parties in respect of that subject matter.</li>\n                                <li>This EULA shall be governed by and construed in accordance with the laws of the British Virgin Isles.</li>\n                                <li>The courts of the British Virgin Isles shall have exclusive jurisdiction to adjudicate any dispute arising under or in connection with this EULA.</li>\n                            </ol>\n                        </li>\n                        <li>\n                            <ol>\n                                <li>\n                                    In this EULA, a reference to a statute or statutory provision includes a reference to:\n                                    <ol type=\"a\">\n                                        <li>that statute or statutory provision as modified, consolidated and/or re-enacted from time to time; and</li>\n                                        <li>any subordinate legislation made under that statute or statutory provision.</li>\n                                    </ol>\n                                </li>\n                                <li>The Clause headings do not affect the interpretation of this EULA.</li>\n                                <li>References in this EULA to \"calendar months\" are to the 12 named periods (January, February and so on) into which a year is divided.</li>\n                                <li>In this EULA, general words shall not be given a restrictive interpretation by reason of being preceded or followed by words indicating a particular class of acts, matters or things.</li>\n                            </ol>\n                        </li>\n                    </ol>\n                </div>\n                <p>By proceeding, you accept the above EULA agreement as well as the <a href=\"/terms-and-conditions.pdf\" target=\"_blank\">Terms &amp; Conditions</a> and <a href=\"/privacy-policy.pdf\" target=\"_blank\">Privacy Policy</a>.</p>\n                <button disabled={!scrollBottom} onClick={this.handleAgreement}>\n                    <p>Accept &amp; Continue</p>\n                </button>\n            </div>\n        );\n    }\n\n    private handleScroll(e: React.UIEvent<HTMLDivElement>): void {\n        const bottom = e.currentTarget.scrollHeight - e.currentTarget.scrollTop <= e.currentTarget.clientHeight + 30;\n        if (bottom) {\n            this.setState({ scrollBottom: true });\n        }\n    }\n\n    private handleAgreement(): void {\n        this.props.actions.agreeToTerms({ agreedToTerms: true });\n        this.props.actions.clearPopup();\n    }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch): { actions: TermsPopupProps[\"actions\"] } {\n    return {\n        actions: bindActionCreators({\n            agreeToTerms,\n            clearPopup,\n        }, dispatch)\n    };\n}\n\nconst TermsPopupConnect = connect(null, mapDispatchToProps)(TermsPopup);\nexport default TermsPopupConnect;\n\nexport const newTermsPopup = (onCancelAction: () => void): SetPopupPayload => ({\n    popup: <TermsPopupConnect />,\n    dismissible: false,\n    onCancel: onCancelAction,\n});\n","import * as Sentry from \"@sentry/browser\";\nimport * as React from \"react\";\n\nimport axios, { AxiosPromise, AxiosResponse } from \"axios\";\n\nimport BN from \"bn.js\";\nimport { connect } from \"react-redux\";\n\nimport RenExSDK from \"@renex/renex\";\n\nimport Blocky from \"../../components/Blocky\";\nimport Loading from \"../../components/Loading\";\n\nimport { ErrorVerificationFailed } from \"../../lib/wallets/wallet\";\nimport { ApplicationData } from \"../../reducers/types\";\n\ninterface StoreProps {\n    sdk: RenExSDK;\n    url: string | null;\n}\n\ninterface SelectWeb3AccountProps extends StoreProps {\n    message: string;\n    referrer: string;\n    getAccounts(): Promise<string[]>;\n    resolve(address: string, url: string | null): void;\n    reject(address: string, reason: string): void;\n}\n\ninterface SelectWeb3AccountState {\n    accounts: string[] | null;\n    error: string | null;\n}\n\nexport const WyreVerification = 0;\nexport const KyberVerification = 1;\n\n/**\n * SelectWeb3Account is a popup component for prompting a user to select an\n * Ethereum account\n */\nclass SelectWeb3Account extends React.Component<SelectWeb3AccountProps, SelectWeb3AccountState> {\n    constructor(props: SelectWeb3AccountProps) {\n        super(props);\n        this.state = {\n            accounts: null,\n            error: null,\n        };\n    }\n\n    public async componentDidMount() {\n        await this.getAccounts();\n    }\n\n    public render(): JSX.Element {\n        const { accounts, error } = this.state;\n\n        if (error) {\n            return (\n                <div className=\"popup ledger\">\n                    <h2>Unable to retrieve accounts</h2>\n                    <p>{error}</p>\n                    <button onClick={this.getAccounts}>Retry</button>\n                </div>\n            );\n        }\n\n        return (\n            <div className=\"popup accounts\">\n                {accounts !== null ?\n                    <>\n                        <h2>Select an account:</h2>\n                        {accounts.map((account, i) =>\n                            <button key={i} data-item={i} className=\"account--button\" onClick={this.onSelectAccount}>\n                                <div className=\"account--left\">\n                                    <Blocky address={account} />\n                                </div>\n                                <div className=\"account--right\">\n                                    <span className=\"monospace\">{account}</span>\n                                </div>\n                            </button>\n                        )}\n                    </>\n                    :\n                    <Loading />\n                }\n            </div>\n        );\n    }\n\n    private getAccounts = async () => {\n        const { referrer } = this.props;\n        this.setState({ error: null });\n        let accounts;\n        try {\n            accounts = await this.props.getAccounts();\n        } catch (error) {\n            this.setState({ error: (error as Error).message || error.toString() });\n            return;\n        }\n        if (accounts.length === 1) {\n            await this.attemptVerification(accounts[0], referrer);\n            return;\n        }\n        this.setState({ accounts });\n    }\n\n    private onSelectAccount = async (event: React.MouseEvent<HTMLButtonElement>): Promise<void> => {\n        const { referrer } = this.props;\n        const { accounts } = this.state;\n        const selectedAccountIndex = parseInt(event.currentTarget.getAttribute(\"data-item\") || \"0\", 10);\n\n        if (selectedAccountIndex === null || accounts === null || accounts.length < selectedAccountIndex) {\n            console.error(\"No account selected\");\n            return;\n        }\n        const address = accounts[selectedAccountIndex];\n        await this.attemptVerification(address, referrer);\n    }\n\n    private attemptVerification = async (address: string, referrer: string): Promise<void> => {\n        const { url } = this.props;\n        const data = { address, referrer };\n        try {\n            // This request stores the trader login details (address and\n            // referrer) in the Ingress database and performs a check to find\n            // whether the trader is verified.\n            const response = await axios.post(window.NETWORK.ingress + \"/login\", JSON.stringify(data));\n            if (response.data.verified) {\n                this.props.resolve(address, url);\n                return;\n            }\n        } catch (error) {\n            console.error(error);\n            Sentry.captureException(error);\n        }\n\n        this.props.reject(address, ErrorVerificationFailed);\n    }\n}\n\nfunction mapStateToProps(state: ApplicationData): StoreProps {\n    return {\n        sdk: state.sdk.sdk,\n        url: state.trader.url,\n    };\n}\n\nexport default connect(mapStateToProps)(SelectWeb3Account);\n","import * as React from \"react\";\n\nimport { connect } from \"react-redux\";\nimport { bindActionCreators, Dispatch } from \"redux\";\n\nimport { setAlert, SetAlertAction } from \"../../actions/alert/alertActions\";\nimport { Wallet } from \"../../lib/wallets/wallet\";\nimport { Alert, AlertType } from \"../../reducers/types\";\n\ninterface VerificationPopupProps {\n    address: string;\n    wallet: Wallet;\n    closePopup: () => void;\n    actions: {\n        setAlert: SetAlertAction;\n    };\n}\n\ninterface VerificationPopupState {\n}\n\n/**\n * VerificationPopup is a popup component for submitting KYC applications\n */\nclass VerificationPopup extends React.Component<VerificationPopupProps, VerificationPopupState> {\n    // tslint:disable-next-line:no-any\n    private handler: any;\n\n    public componentDidMount(): void {\n        const { closePopup } = this.props;\n\n        // tslint:disable-next-line:no-any\n        this.handler = new (window as any).Wyre.Widget({\n            accountId: window.WYRE_KEY,\n            auth: { type: \"metamask\" },\n            operation: {\n                type: \"none\"\n            },\n            onSuccess: () => {\n                closePopup();\n                this.props.actions.setAlert({\n                    alert: new Alert({ message: \"Your application was successfully submitted. Check back later to view the status of your application\", alertType: AlertType.Success })\n                });\n            },\n            // tslint:disable-next-line:no-any\n            onExit: (err: any) => {\n                if (err != null) {\n                    console.error(err);\n                    closePopup();\n                    this.props.actions.setAlert({\n                        alert: new Alert({ message: \"There was an error submitting your application. Please try again later\", alertType: AlertType.Error })\n                    });\n                }\n            }\n        });\n    }\n\n    public render(): JSX.Element {\n        const callbackURL = location.protocol + \"//\" + location.host + location.pathname;\n        return <div className=\"popup kyc content\">\n            <h2>Verify your account</h2>\n            <p>Please submit a KYC application, or check back later to see if your application has been approved.</p>\n            <div className=\"popup--buttons\">\n                <a href={`https://kyber.network/oauth/authorize?client_id=${window.KYBER_KEY}&redirect_uri=${callbackURL}&response_type=code&state=${this.props.address},${this.props.wallet}`}>\n                    <button className=\"kyber--button\"><span>Login with Kyber</span></button>\n                </a>\n                <button className=\"wyre--button\" onClick={this.openWyreHandler}><span>Verify with Wyre</span></button>\n            </div>\n            <p>Note: Wyre currently supports US residents only.</p>\n        </div>;\n    }\n\n    public openWyreHandler = () => {\n        this.handler.open();\n    }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch): { actions: VerificationPopupProps[\"actions\"] } {\n    return {\n        actions: bindActionCreators({\n            setAlert,\n        }, dispatch)\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(VerificationPopup);\n","import * as React from \"react\";\n\nimport RenExSDK from \"@renex/renex\";\nimport Web3 from \"web3\";\n\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { bindActionCreators } from \"redux\";\nimport { Provider } from \"web3/providers\";\n\nimport SelectWeb3Account from \"./popups/SelectWeb3Account\";\nimport VerificationPopup from \"./popups/VerificationPopup\";\n\nimport { setAlert, SetAlertAction } from \"../actions/alert/alertActions\";\nimport { clearPopup, ClearPopupAction, setPopup, SetPopupAction } from \"../actions/popup/popupActions\";\nimport { login, LoginAction } from \"../actions/trader/accountActions\";\nimport { storeWallet, StoreWalletAction } from \"../actions/trader/walletActions\";\nimport { networkData } from \"../lib/network\";\nimport { ErrorCanceledByUser, ErrorVerificationFailed, Wallet, WalletDetails } from \"../lib/wallets/wallet\";\nimport { Alert, AlertType, ApplicationData } from \"../reducers/types\";\nimport { getParameterByName } from \"./pages/Home\";\n\ninterface StoreProps {\n    sdk: RenExSDK;\n    url: string | null;\n}\n\ninterface WalletItemProps extends StoreProps {\n    wallet: Wallet;\n    actions: {\n        setAlert: SetAlertAction;\n        storeWallet: StoreWalletAction;\n        setPopup: SetPopupAction;\n        clearPopup: ClearPopupAction;\n        login: LoginAction;\n    };\n}\n\ninterface WalletItemState {\n    referrer: string;\n    canceled: boolean;\n}\n\n/**\n * WalletItem is a visual component representing an individual wallet selection\n */\nclass WalletItem extends React.Component<WalletItemProps, WalletItemState> {\n    public constructor(props: WalletItemProps, context: object) {\n        super(props, context);\n        this.state = {\n            referrer: \"\",\n            canceled: false\n        };\n    }\n\n    public componentDidMount(): void {\n        if (window.location.href.indexOf(\"?ref=\") !== -1) {\n            const referrer = getParameterByName(\"ref\");\n            if (referrer != null && referrer !== \"\" && this.state.referrer === \"\") {\n                this.setState({ referrer });\n            }\n        }\n    }\n\n    public render(): JSX.Element {\n        const { wallet } = this.props;\n        const walletDetails = WalletDetails.get(wallet, undefined);\n\n        if (walletDetails === undefined) {\n            return <></>;\n        }\n\n        const { slug, enabled, description, name } = walletDetails;\n\n        return (\n            <div className={`wallets--container ${slug} ${enabled ? \"\" : \"disabled\"}`}>\n                <div\n                    className=\"wallets--item\"\n                    role=\"button\"\n                    onClick={this.handleSelectWallet}\n                >\n                    <span className=\"wallets--title\">{name}</span>\n                    <p className=\"wallets--description\">\n                        {!enabled ?\n                            \"Coming soon\" : null\n                        }\n                        {enabled && description !== \"\" ?\n                            description : null\n                        }\n                    </p>\n                </div>\n            </div>\n        );\n    }\n\n    private handleSelectWallet = async (): Promise<void> => {\n        const { sdk, wallet } = this.props;\n        const { referrer } = this.state;\n\n        const walletDetails = WalletDetails.get(wallet, undefined);\n        if (!walletDetails) {\n            return;\n        }\n        const { getWeb3Provider } = walletDetails;\n\n        this.setState({ canceled: false });\n        this.props.actions.storeWallet({ wallet });\n\n        // Retrieve web3.\n        let provider: Provider;\n        let providerAccounts: string[] | null;\n        try {\n            [provider, providerAccounts] = await getWeb3Provider();\n        } catch (err) {\n            if (err.message !== ErrorCanceledByUser) {\n                this.props.actions.setAlert({\n                    alert: new Alert({ message: err.message })\n                });\n            }\n            this.props.actions.storeWallet({ wallet: null });\n            return;\n        }\n\n        const resolve = async (address: string, url: string | null) => {\n            await this.props.actions.login(sdk, provider, address, { redirect: true, url });\n            this.props.actions.clearPopup();\n            this.props.actions.setAlert({\n                alert: new Alert({\n                    message: \"You have been successfully logged in\",\n                    alertType: AlertType.Success\n                })\n            });\n        };\n\n        const reject = (address: string, reason: string) => {\n            if (reason === ErrorVerificationFailed) {\n                if (this.state.canceled) {\n                    return;\n                }\n                this.props.actions.setPopup({ popup: <VerificationPopup address={address} wallet={wallet} closePopup={cancel} />, onCancel: cancel });\n            } else {\n                cancel();\n            }\n        };\n\n        const cancel = () => {\n            this.props.actions.clearPopup();\n\n            // Set the state to canceled, so any pending verification is\n            // halted.\n            this.setState({ canceled: true });\n        };\n\n        const getAccounts = async () => {\n            const web3 = new Web3(provider);\n\n            let accounts;\n            try {\n                accounts = providerAccounts ? providerAccounts : await web3.eth.getAccounts();\n            } catch (err) {\n                if (wallet === Wallet.Ledger && err.message.match(/invalid transport instance/)) {\n                    throw new Error(\"Unable to connect to Ledger.\");\n                } else {\n                    throw err;\n                }\n            }\n\n            if (accounts.length === 0) {\n                if (wallet === Wallet.MetaMask) {\n                    throw new Error(\"Please unlock your Metamask.\");\n                } else {\n                    throw new Error(\"No accounts found. Your wallet may be locked.\");\n                }\n            }\n\n            // Check that wallet is on correct network (except for Ledger and\n            // Keystore, for which we have already set the network)\n            if (wallet !== Wallet.Ledger && wallet !== Wallet.Keystore) {\n                // tslint:disable-next-line:no-any\n                const network = await (web3.eth.net as any).getNetworkType();\n\n                if (network !== networkData.ethNetwork) {\n                    throw new Error(`Please ensure you are on the ${networkData.ethNetworkLabel} network`);\n                }\n            }\n\n            return accounts;\n        };\n\n        const popup = {\n            popup: <SelectWeb3Account referrer={referrer} getAccounts={getAccounts} resolve={resolve} reject={reject} message={\"Select account\"} />,\n            onCancel: cancel,\n        };\n\n        this.props.actions.setPopup(popup);\n    }\n}\n\nfunction mapStateToProps(state: ApplicationData): StoreProps {\n    return {\n        sdk: state.sdk.sdk,\n        url: state.trader.url,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch): { actions: WalletItemProps[\"actions\"] } {\n    return {\n        actions: bindActionCreators({\n            setAlert,\n            storeWallet,\n            setPopup,\n            clearPopup,\n            login,\n        }, dispatch)\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WalletItem);\n","import * as React from \"react\";\n\nimport { Iterable } from \"immutable\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { bindActionCreators } from \"redux\";\n\nimport TermsPopup from \"../components/popups/TermsPopup\";\nimport WalletItem from \"../components/WalletItem\";\n\nimport { clearPopup, ClearPopupAction, setPopup, SetPopupAction } from \"../actions/popup/popupActions\";\nimport { Wallet, WalletList } from \"../lib/wallets/wallet\";\n\ninterface WalletsProps {\n    actions: {\n        clearPopup: ClearPopupAction;\n        setPopup: SetPopupAction;\n    };\n}\n\n/**\n * Wallets displays a selection of wallets (MetaMask, Ledger, etc.)\n */\nclass Wallets extends React.Component<WalletsProps> {\n    public constructor(props: WalletsProps, context: object) {\n        super(props, context);\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    public render(): JSX.Element {\n        return (\n            <div className=\"section wallets\">\n                <div className=\"container\">\n                    <div className=\"wallets--wrapper\">\n                        {this.listWallets()}\n                    </div>\n                    <p className=\"wallets--disclaimer\">\n                        Your trades and transactions are stored locally within your browser.\n                        {/*By proceeding, you agree to the <span onClick={this.handleClick}>Terms &amp; Conditions</span>.*/}\n                    </p>\n                </div>\n            </div>\n        );\n    }\n\n    private listWallets(): Iterable<number, JSX.Element> {\n        return WalletList.map((wallet: Wallet, i: number) => {\n            return (\n                <WalletItem key={i} wallet={wallet} />\n            );\n        });\n    }\n\n    private handleClick(): void {\n        this.props.actions.setPopup({\n            popup: <TermsPopup />,\n            onCancel: () => { this.props.actions.clearPopup(); }\n        });\n    }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch): { actions: WalletsProps[\"actions\"] } {\n    return {\n        actions: bindActionCreators({\n            clearPopup,\n            setPopup,\n        }, dispatch)\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(Wallets);\n","import * as Sentry from \"@sentry/browser\";\nimport * as React from \"react\";\n\nimport axios from \"axios\";\nimport Web3 from \"web3\";\n\nimport { connect } from \"react-redux\";\nimport { bindActionCreators, Dispatch } from \"redux\";\n\nimport RenExSDK from \"@renex/renex\";\n\nimport Header from \"../../components/Header\";\nimport HiddenOrderbook from \"../../components/HiddenOrderbook\";\nimport Loading from \"../../components/Loading\";\nimport MarketBanner from \"../../components/MarketBanner\";\nimport Wallets from \"../../components/Wallets\";\n\nimport { setAlert, SetAlertAction } from \"../../actions/alert/alertActions\";\nimport { login, LoginAction } from \"../../actions/trader/accountActions\";\nimport { storeWallet, StoreWalletAction } from \"../../actions/trader/walletActions\";\nimport { Wallet, WalletDetails } from \"../../lib/wallets/wallet\";\nimport { includesAddress } from \"../../lib/web3\";\nimport { Alert, AlertType, ApplicationData } from \"../../reducers/types\";\n\n\ninterface HomeProps {\n    sdk: RenExSDK;\n    url: string | null;\n    actions: {\n        login: LoginAction;\n        storeWallet: StoreWalletAction;\n        setAlert: SetAlertAction;\n    };\n}\n\ninterface HomeState {\n    checkingVerification: boolean;\n}\n\n/**\n * Home is a page whose principal components are wallet selection to allow users\n * to log-in, and the hidden orderbook\n */\nclass Home extends React.Component<HomeProps, HomeState> {\n    public constructor(props: HomeProps, context: object) {\n        super(props, context);\n        this.state = {\n            checkingVerification: false,\n        };\n    }\n\n    public async componentDidMount(): Promise<void> {\n        this.props.actions.storeWallet({ wallet: null });\n\n        if (window.location.href.indexOf(\"?code=\") !== -1) {\n            // Show loading state between verification checks\n            this.setState({ checkingVerification: true });\n\n            // Check verification\n            const { verified, address, kyberUID, wallet, alert } = await this.kyberVerification();\n            if (verified && address !== undefined && kyberUID !== undefined && wallet !== undefined) {\n                await this.handleForwardLogin(address, wallet);\n            } else if (!verified && alert) {\n                this.props.actions.setAlert({ alert });\n            }\n            this.setState({ checkingVerification: false });\n        }\n    }\n\n    public render(): JSX.Element {\n        const { checkingVerification } = this.state;\n        return (\n            <div className=\"home\">\n                {checkingVerification &&\n                    <>\n                        <div className=\"popup\">\n                            <Loading />\n                        </div>\n                        <div className=\"overlay\" />\n                    </>\n                }\n                <MarketBanner />\n                <Header withMenu={false} />\n                <Wallets />\n                <div className=\"content\">\n                    <HiddenOrderbook />\n                </div>\n            </div>\n        );\n    }\n\n    private async kyberVerification(): Promise<{ verified: boolean, address?: string, kyberUID?: string, wallet?: Wallet, alert?: Alert }> {\n        const authCode = getParameterByName(\"code\");\n        const state = getParameterByName(\"state\");\n        if (state) {\n            const address = state.split(\",\")[0];\n            const wallet: Wallet = parseInt(state.split(\",\")[1], undefined);\n            const redirectURL = location.protocol + \"//\" + location.host + location.pathname;\n            const data = {\n                address,\n                request: {\n                    grant_type: \"authorization_code\",\n                    code: authCode,\n                    redirect_uri: redirectURL,\n                    client_id: window.KYBER_KEY\n                }\n            };\n            try {\n                const response = await axios.post(window.NETWORK.ingress + \"/kyber\", JSON.stringify(data));\n                const kyberUID = response.data.uid;\n                const lowerCaseAddresses = response.data.active_wallets.map((value: string) => value.toLowerCase());\n                if (!address) {\n                    throw new Error(\"Unable to retrieve address from Kyber response\");\n                }\n                if (response.data.kyc_status !== \"approved\") {\n                    throw new Error(`Received unexpected Kyber status: ${response.data.kyc_status}`);\n                }\n                if (lowerCaseAddresses.indexOf(address.toLowerCase()) === -1) {\n                    throw new Error(`Address ${address} not authorized with Kyber`);\n                }\n                return { verified: true, address, kyberUID, wallet };\n            } catch (error) {\n                let alert: Alert;\n                if (error.response && error.response.status === 401) {\n                    alert = new Alert({\n                        message: `Your Kyber account has not been verified with address ${address}. Please verify and check back later`\n                    });\n                } else {\n                    console.error(error);\n                    Sentry.captureException(error);\n                    alert = new Alert({\n                        message: `Unable to retrieve account verification details. Please try again later`\n                    });\n                }\n                return { verified: false, alert };\n            }\n        } else {\n            console.error(\"Not enough information for Kyber KYC\");\n            return { verified: false };\n        }\n    }\n\n    private async handleForwardLogin(address: string, wallet: Wallet): Promise<void> {\n        const { actions, sdk, url } = this.props;\n        const walletDetails = WalletDetails.get(wallet, undefined);\n        const [provider,] = await walletDetails.getWeb3Provider(address);\n\n        if (await includesAddress(new Web3(provider), address)) {\n            actions.login(sdk, provider, address, { redirect: true, url });\n            actions.setAlert({\n                alert: new Alert({\n                    message: \"Successfully logged in via Kyber verification\",\n                    alertType: AlertType.Success\n                })\n            });\n            return;\n        }\n\n        throw new Error(\"Logged in to a non-verified address.\");\n    }\n}\n\n// Adapted from https://stackoverflow.com/a/901144\nexport function getParameterByName(name: string) {\n    name = name.replace(/[\\[\\]]/g, \"\\\\$&\");\n    const regex = new RegExp(\"[?&]\" + name + \"(=([^&#]*)|&|#|$)\");\n    const results = regex.exec(window.location.href);\n    if (!results) {\n        return null;\n    }\n    if (!results[2]) {\n        return \"\";\n    }\n    return decodeURIComponent(results[2].replace(/\\+/g, \" \"));\n}\n\nfunction mapStateToProps(state: ApplicationData) {\n    return {\n        sdk: state.sdk.sdk,\n        url: state.trader.url,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch): { actions: HomeProps[\"actions\"] } {\n    return {\n        actions: bindActionCreators({\n            login,\n            storeWallet,\n            setAlert,\n        }, dispatch)\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\n","import * as React from \"react\";\n\nimport Loading from \"../../components/Loading\";\n\ninterface LoggingOutProps {\n}\n\ninterface LoggingOutState {\n}\n\n/**\n * LoggingOut is a page which shows a single loading spinner. This page is\n * displayed while the page is being refreshed on log-out.\n */\nclass LoggingOut extends React.Component<LoggingOutProps, LoggingOutState> {\n    public render(): JSX.Element {\n        return (\n            <div className=\"logging-out\">\n                <Loading />\n            </div>\n        );\n    }\n}\n\nexport default LoggingOut;\n","import * as React from \"react\";\n\nimport BalanceBanner from \"../../components/BalanceBanner\";\nimport ExecutedTrades from \"../../components/ExecutedTrades\";\nimport Header from \"../../components/Header\";\nimport MarketBanner from \"../../components/MarketBanner\";\nimport SubmittedTrades from \"../../components/SubmittedTrades\";\n\ninterface OrdersProps {\n}\n\ninterface OrdersState {\n}\n\n/**\n * Orders is a page whose principal component is a list of the trader's orders\n * and a list of execution details\n */\nclass Orders extends React.Component<OrdersProps, OrdersState> {\n    public render(): JSX.Element {\n        return (\n            <div className=\"orders\">\n                <MarketBanner />\n                <Header withMenu={true} />\n                <BalanceBanner />\n                <div className=\"content\">\n                    <SubmittedTrades />\n                    <ExecutedTrades />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Orders;\n","import * as React from \"react\";\n\nimport { connect } from \"react-redux\";\n\nimport { ApplicationData, PopupData } from \"../reducers/types\";\n\ninterface StoreProps {\n    popup: PopupData;\n}\n\ninterface PopupProps extends StoreProps {\n}\n\n/**\n * Popup is a visual component for displaying an arbitrary component in the\n * foreground with the rest of the page in the background\n */\nclass Popup extends React.Component<PopupProps> {\n    constructor(props: PopupProps) {\n        super(props);\n        this.onClickHandler = this.onClickHandler.bind(this);\n    }\n\n    public render(): JSX.Element | null {\n        const { popup } = this.props.popup;\n        if (!popup) {\n            return null;\n        }\n\n        return (\n            <div className=\"popup--outer\">\n                {popup}\n                <div role=\"none\" className=\"overlay\" onClick={this.onClickHandler} />\n\n            </div>\n        );\n    }\n\n    public onClickHandler = () => {\n        const { dismissible, onCancel } = this.props.popup;\n        if (dismissible) {\n            onCancel();\n        }\n    }\n}\n\nfunction mapStateToProps(state: ApplicationData): StoreProps {\n    return {\n        popup: state.popup\n    };\n}\n\nexport default connect(mapStateToProps)(Popup);\n","import { createStandardAction } from \"typesafe-actions\";\n\nimport { Pair } from \"../../lib/market\";\n\n/**\n * Updates the market price for a specific token\n * @param  {{ price: number, pair: Pair }} payload\n */\ninterface UpdatePricesPayload { price: number; percentChange: number; pair: Pair; }\nexport type UpdatePricesAction = (payload: UpdatePricesPayload) => void;\nexport const updatePrices = createStandardAction(\"UPDATE_PRICES\")<UpdatePricesPayload>();\n","\nimport RenExSDK, { MarketDetails, TokenCode } from \"@renex/renex\";\nimport BigNumber from \"bignumber.js\";\n\nimport { List } from \"immutable\";\n\nimport { createStandardAction } from \"typesafe-actions\";\n\ninterface StoreSDKPayload { sdk: RenExSDK; }\nexport type StoreSDKAction = (payload: StoreSDKPayload) => void;\nexport const storeSDK = createStandardAction(\"STORE_SDK\")<StoreSDKPayload>();\n\ninterface StoreSDKDataPayload {\n    supportedTokens: List<TokenCode>;\n    supportedAtomicTokens: List<TokenCode>;\n    supportedMarkets: List<MarketDetails>;\n    minEthTradeVolume: BigNumber;\n    darknodeFeePercent: BigNumber;\n    wrappingFeePercent: BigNumber;\n}\nexport type StoreSDKDataAction = (payload: StoreSDKDataPayload) => void;\nexport const storeSDKData = createStandardAction(\"STORE_SDK_DATA\")<StoreSDKDataPayload>();\n","import * as React from \"react\";\n\nimport BigNumber from \"bignumber.js\";\nimport Web3 from \"web3\";\n\nimport { List, OrderedMap } from \"immutable\";\nimport { connect } from \"react-redux\";\nimport { Redirect, Route, RouteComponentProps, Router, withRouter } from \"react-router-dom\";\nimport { Dispatch } from \"redux\";\nimport { bindActionCreators } from \"redux\";\n\nimport RenExSDK, { BalanceAction, TokenCode, TraderOrder } from \"@renex/renex\";\n\nimport history from \"../lib/history\";\nimport Alerts from \"./Alerts\";\nimport Balances from \"./pages/Balances\";\nimport Exchange from \"./pages/Exchange\";\nimport Home from \"./pages/Home\";\nimport LoggingOut from \"./pages/LoggingOut\";\nimport Orders from \"./pages/Orders\";\nimport Popup from \"./Popup\";\n\nimport { setAlert, SetAlertAction } from \"../actions/alert/alertActions\";\nimport { GetAtomicBalanceAction, getAtomicBalances, GetBalanceAction, getBalances } from \"../actions/balances/balancesActions\";\nimport { updateBalancesHistory, UpdateBalancesHistoryAction } from \"../actions/balances/balancesActions\";\nimport { updatePrices, UpdatePricesAction } from \"../actions/market/marketActions\";\nimport { getHiddenOrders, GetHiddenOrdersAction } from \"../actions/orderbook/hiddenBookActions\";\nimport { checkOrderStatuses, CheckOrderStatusesAction } from \"../actions/orderbook/traderBookActions\";\nimport { clearPopup, ClearPopupAction, setPopup, SetPopupAction } from \"../actions/popup/popupActions\";\nimport { storeSDKData, StoreSDKDataAction } from \"../actions/sdk/sdkActions\";\nimport { refreshAtomConnectionStatus, RefreshAtomConnectionStatusAction } from \"../actions/settlement/atomicActions\";\nimport { login, LoginAction, logout, LogoutAction, lookForLogout, LookForLogoutAction, storeURL, StoreURLAction } from \"../actions/trader/accountActions\";\nimport { getPrice, Pairs } from \"../lib/market\";\nimport { Wallet } from \"../lib/wallets/wallet\";\nimport { getInjectedWeb3Provider } from \"../lib/wallets/web3browser\";\nimport { includesAddress } from \"../lib/web3\";\nimport { Alert, AlertData, AlertType, ApplicationData } from \"../reducers/types\";\nimport { BalanceActionRecord, TraderOrderRecord } from \"../reducers/typesSdk\";\nimport { newTermsPopup } from \"./popups/TermsPopup\";\n\ninterface StoreProps {\n    address: string | null;\n    agreedToTerms: boolean;\n    balanceHistory: OrderedMap<string, BalanceActionRecord>;\n    pendingAlerts: AlertData[\"pendingAlerts\"];\n    sdk: RenExSDK;\n    traderOrders: OrderedMap<string, TraderOrderRecord>;\n    usableAtomicBalances: OrderedMap<TokenCode, BigNumber | null>;\n    usableBalances: OrderedMap<TokenCode, BigNumber | null>;\n    wallet: Wallet | null;\n    url: string | null;\n}\n\ninterface AppProps extends StoreProps {\n    actions: {\n        checkOrderStatuses: CheckOrderStatusesAction;\n        clearPopup: ClearPopupAction;\n        getAtomicBalances: GetAtomicBalanceAction;\n        getBalances: GetBalanceAction;\n        getHiddenOrders: GetHiddenOrdersAction;\n        login: LoginAction;\n        logout: LogoutAction;\n        lookForLogout: LookForLogoutAction;\n        refreshAtomConnectionStatus: RefreshAtomConnectionStatusAction;\n        setAlert: SetAlertAction;\n        setPopup: SetPopupAction;\n        storeSDKData: StoreSDKDataAction;\n        storeURL: StoreURLAction;\n        updateBalancesHistory: UpdateBalancesHistoryAction;\n        updatePrices: UpdatePricesAction;\n    };\n}\n\ninterface AppState {\n    checkingReLogin: boolean;\n}\n\n// Scroll restoration based on https://reacttraining.com/react-router/web/guides/scroll-restoration\nconst ScrollToTop = withRouter(\n    // tslint:disable-next-line:no-any\n    class ScrollToTopWithoutRouter extends React.Component<RouteComponentProps<any>> {\n        // tslint:disable-next-line:no-any\n        public componentDidUpdate(prevProps: Readonly<RouteComponentProps<any>>): void {\n            if (this.props.location !== prevProps.location) {\n                window.scrollTo(0, 0);\n            }\n        }\n\n        public render(): JSX.Element | null {\n            return null;\n        }\n    }\n);\n\n/**\n * App is the main visual component responsible for displaying different routes\n * and running background app loops\n */\nclass App extends React.Component<AppProps, AppState> {\n    private setupLoopsTimeout: NodeJS.Timer | undefined;\n    private callGetBalancesTimeout: NodeJS.Timer | undefined;\n    private callHiddenOrdersTimeout: NodeJS.Timer | undefined;\n    private callUpdatePricesTimeout: NodeJS.Timer | undefined;\n    private callLookForLogoutTimeout: NodeJS.Timer | undefined;\n    private callConnectToAtomTimeout: NodeJS.Timer | undefined;\n    private callUpdateAtomStatusTimeout: NodeJS.Timer | undefined;\n    private callGetAtomicBalancesTimeout: NodeJS.Timer | undefined;\n    private callCheckOrderStatusesTimeout: NodeJS.Timer | undefined;\n    private callCheckRenExExecutionTimeout: NodeJS.Timer | undefined;\n    private callUpdateBalancesHistoryTimeout: NodeJS.Timer | undefined;\n\n    public constructor(props: AppProps, context: object) {\n        super(props, context);\n        this.state = {\n            checkingReLogin: false,\n        };\n    }\n\n    public async componentDidMount(): Promise<void> {\n        const { agreedToTerms, sdk } = this.props;\n\n        await this.storeSDKData();\n\n        if (!agreedToTerms) {\n            this.props.actions.setPopup(newTermsPopup(this.props.actions.clearPopup));\n        }\n\n        // Check if user was logged-in already\n        this.setState({ checkingReLogin: true });\n        const loggedIn = await this.handleReLogin();\n        if (!loggedIn) {\n            this.props.actions.logout(sdk, { reload: false });\n        }\n        this.setState({ checkingReLogin: false });\n\n        this.setupLoops();\n    }\n\n    public componentWillUnmount() {\n        // Clear timeouts\n        if (this.setupLoopsTimeout) { clearTimeout(this.setupLoopsTimeout); }\n        if (this.callGetBalancesTimeout) { clearTimeout(this.callGetBalancesTimeout); }\n        if (this.callHiddenOrdersTimeout) { clearTimeout(this.callHiddenOrdersTimeout); }\n        if (this.callUpdatePricesTimeout) { clearTimeout(this.callUpdatePricesTimeout); }\n        if (this.callLookForLogoutTimeout) { clearTimeout(this.callLookForLogoutTimeout); }\n        if (this.callConnectToAtomTimeout) { clearTimeout(this.callConnectToAtomTimeout); }\n        if (this.callUpdateAtomStatusTimeout) { clearTimeout(this.callUpdateAtomStatusTimeout); }\n        if (this.callGetAtomicBalancesTimeout) { clearTimeout(this.callGetAtomicBalancesTimeout); }\n        if (this.callCheckOrderStatusesTimeout) { clearTimeout(this.callCheckOrderStatusesTimeout); }\n        if (this.callCheckRenExExecutionTimeout) { clearTimeout(this.callCheckRenExExecutionTimeout); }\n        if (this.callUpdateBalancesHistoryTimeout) { clearTimeout(this.callUpdateBalancesHistoryTimeout); }\n    }\n\n    public setupLoops() {\n        // See if the user has logged out every 5 seconds\n        const callLookForLogout = async () => {\n            const { sdk, wallet } = this.props;\n            if (sdk.getAddress() && wallet === Wallet.MetaMask) {\n                try {\n                    await this.props.actions.lookForLogout(sdk);\n                } catch (err) {\n                    console.error(err);\n                }\n            }\n            this.callLookForLogoutTimeout = setTimeout(callLookForLogout, 5 * 1000);\n        };\n        callLookForLogout().catch(console.error);\n\n        // // Update the user's balances every 5 seconds\n        // const callConnectToAtom = async () => {\n        //     const { web3, address } = this.props;\n        //     try {\n        //         await this.props.actions.connectToAtom(web3, address);\n        //     } catch (err) {\n        //         // Couldn't connect\n        //     }\n        //     this.callConnectToAtomTimeout = setTimeout(callConnectToAtom, 60 * 1000);\n        // };\n        // callConnectToAtom().catch(console.error);\n\n        // Update the user's balances every 5 seconds\n        const callGetBalances = async () => {\n            const { sdk, pendingAlerts } = this.props;\n            if (sdk.getAddress()) {\n                await this.props.actions.getBalances(sdk, pendingAlerts);\n            }\n            this.callGetBalancesTimeout = setTimeout(callGetBalances, 5 * 1000);\n        };\n        callGetBalances().catch(console.error);\n\n        // Update the atom connection status every 60 seconds\n        const callUpdateAtomStatus = async () => {\n            const { sdk } = this.props;\n            if (sdk !== null && sdk.getAddress() !== \"\") {\n                try {\n                    await this.props.actions.refreshAtomConnectionStatus(sdk);\n                } catch (err) {\n                    console.error(err);\n                }\n            }\n            this.callUpdateAtomStatusTimeout = setTimeout(callUpdateAtomStatus, 60 * 1000);\n        };\n        callUpdateAtomStatus().catch(console.error);\n\n        // Update the user's atomic balances every 5 seconds\n        const callGetAtomicBalances = async () => {\n            const { sdk } = this.props;\n            if (sdk.getAddress() && sdk.atom.isConnected()) {\n                try {\n                    await this.props.actions.getAtomicBalances(sdk);\n                } catch (err) {\n                    console.error(err);\n                }\n            }\n            this.callGetAtomicBalancesTimeout = setTimeout(callGetAtomicBalances, 5 * 1000);\n        };\n        callGetAtomicBalances().catch(console.error);\n\n        // Retrieve new hidden orders from the Orderbook every 30 seconds\n        const callHiddenOrders = async () => {\n            const { sdk } = this.props;\n            try {\n                await this.props.actions.getHiddenOrders(sdk);\n            } catch (err) {\n                console.error(err);\n            }\n            this.callHiddenOrdersTimeout = setTimeout(callHiddenOrders, 30 * 1000);\n        };\n        callHiddenOrders().catch(console.error);\n\n        // Update balance history every 10 seconds\n        const callUpdateBalancesHistory = async (count: number) => {\n            const { sdk, balanceHistory } = this.props;\n            if (sdk.getAddress()) {\n                try {\n                    // See comment in `callCheckOrderStatuses` on count\n                    await this.props.actions.updateBalancesHistory(sdk, balanceHistory, (count % 60 === 1));\n                    count++;\n                } catch (err) {\n                    console.error(err);\n                }\n            }\n            this.callUpdateBalancesHistoryTimeout = setTimeout(() => callUpdateBalancesHistory(count), 10 * 1000);\n        };\n        callUpdateBalancesHistory(0).catch(console.error);\n\n        // Retrieve market prices every minute\n        const callUpdatePrices = async () => {\n            try {\n                await this.updatePrices();\n            } catch (err) {\n                console.error(err);\n            }\n            this.callUpdatePricesTimeout = setTimeout(callUpdatePrices, 60 * 1000);\n        };\n        callUpdatePrices().catch(console.error);\n\n        // Check for status updates every 5 seconds\n        const callCheckOrderStatuses = async (count: number) => {\n            const { sdk, traderOrders } = this.props;\n            if (sdk.getAddress()) {\n                try {\n                    // Every 120 times (10 minutes) including the second time,\n                    // check all orders. The full check is done on the second\n                    // call so that statuses likely to change are checked\n                    // sooner (in the first call) but the full check is still\n                    // run early on (in the second call).\n                    // Successive full checks are called every 10 minutes in\n                    // case the window is not being refreshed.\n                    await this.props.actions.checkOrderStatuses(sdk, traderOrders, (count % 120 === 1));\n                    count += 1;\n                } catch (err) {\n                    console.error(err);\n                }\n            }\n            this.callCheckOrderStatusesTimeout = setTimeout(() => callCheckOrderStatuses(count), 5 * 1000);\n        };\n        callCheckOrderStatuses(0).catch(console.error);\n    }\n\n    public withAccount<T extends React.ComponentClass>(component: T): React.ComponentClass | React.StatelessComponent {\n        const { address } = this.props;\n        const { checkingReLogin } = this.state;\n\n        // Show a loading spinner if retrieving the web3 instance is taking a\n        // while (for example, when requesting MetaMask access)\n        if (checkingReLogin) {\n            return () => <LoggingOut />;\n        }\n\n        if (!address) {\n            const pathname = window.location.pathname;\n            if (pathname !== \"/\" && pathname !== \"/loading\") {\n                this.props.actions.setAlert({\n                    alert: new Alert({ message: \"You are not logged in. Please select your wallet to continue\", alertType: AlertType.Warning })\n                });\n                this.props.actions.storeURL(pathname);\n            }\n            return () => <Redirect to=\"/\" />;\n        }\n        return component;\n    }\n\n    public render(): JSX.Element {\n        return (\n            <Router history={history}>\n                <div className=\"app\">\n                    <ScrollToTop />\n                    <Route path=\"/\" exact component={Home} />\n                    <Route path=\"/exchange\" component={this.withAccount(Exchange)} />\n                    <Route path=\"/orders\" component={this.withAccount(Orders)} />\n                    <Route path=\"/balances\" component={this.withAccount(Balances)} />\n                    <Route path=\"/loading\" component={LoggingOut} />\n                    <Alerts />\n                    <Popup />\n                </div>\n            </Router>\n        );\n    }\n\n    private async updatePrices(): Promise<void> {\n        for (const pair of Pairs.toArray()) {\n            const [price, percentChange] = await getPrice(pair.quoteToken, pair.baseToken);\n            this.props.actions.updatePrices({ price, percentChange, pair: pair.code });\n        }\n    }\n\n    private async storeSDKData(): Promise<void> {\n        const { sdk } = this.props;\n        return Promise.all([\n            sdk.fetchSupportedTokens(),\n            sdk.fetchSupportedAtomicTokens(),\n            sdk.fetchDarknodeFeePercent(),\n            sdk.fetchWrappingFeePercent(),\n            sdk.fetchMinEthTradeVolume(),\n            sdk.fetchMarkets(),\n        ]).then(([supportedTokens, supportedAtomicTokens, darknodeFeePercent, wrappingFeePercent, minEthTradeVolume, supportedMarkets]) => {\n            this.props.actions.storeSDKData({\n                supportedTokens: List(supportedTokens),\n                supportedAtomicTokens: List(supportedAtomicTokens),\n                darknodeFeePercent,\n                wrappingFeePercent,\n                minEthTradeVolume,\n                supportedMarkets: List(supportedMarkets),\n            });\n        });\n    }\n\n    private async handleReLogin(): Promise<boolean> {\n        const { address, actions, sdk, url } = this.props;\n        if (address) {\n            let provider;\n            try {\n                provider = await getInjectedWeb3Provider();\n            } catch (error) {\n                // Injected Web3 request was denied\n                return false;\n            }\n\n            const included = await includesAddress(new Web3(provider), address);\n            if (included) {\n                // These are repeated in login, but the page will log-out if the\n                // address is not available immediately\n                sdk.updateProvider(provider);\n                sdk.setAddress(address);\n                actions.login(sdk, provider, address, { redirect: false, url });\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\nfunction mapStateToProps(state: ApplicationData): StoreProps {\n    return {\n        address: state.trader.address,\n        agreedToTerms: state.trader.agreedToTerms,\n        balanceHistory: state.balanceHistory.balanceHistory,\n        pendingAlerts: state.alert.pendingAlerts,\n        sdk: state.sdk.sdk,\n        traderOrders: state.traderBook.traderOrders,\n        usableAtomicBalances: state.trader.usableAtomicBalances,\n        usableBalances: state.trader.usableBalances,\n        wallet: state.trader.wallet,\n        url: state.trader.url,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch): { actions: AppProps[\"actions\"] } {\n    return {\n        actions: bindActionCreators({\n            checkOrderStatuses,\n            clearPopup,\n            getAtomicBalances,\n            getBalances,\n            getHiddenOrders,\n            login,\n            logout,\n            lookForLogout,\n            refreshAtomConnectionStatus,\n            setAlert,\n            setPopup,\n            storeSDKData,\n            storeURL,\n            updateBalancesHistory,\n            updatePrices,\n        }, dispatch)\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { combineReducers } from \"redux\";\n\nimport alert from \"./alert/alertReducer\";\nimport balanceHistory from \"./balances/balancesReducer\";\nimport inputs from \"./inputs/inputsReducer\";\nimport marketPrices from \"./market/marketReducer\";\nimport hiddenBook from \"./orderbook/hiddenBookReducer\";\nimport traderBook from \"./orderbook/traderBookReducer\";\nimport popup from \"./popup/popupReducer\";\nimport sdk from \"./sdk/sdkReducer\";\nimport trader from \"./trader/traderReducer\";\n\nimport { ApplicationData } from \"./types\";\n\nconst rootReducer = combineReducers<ApplicationData>({\n    alert,\n    balanceHistory,\n    hiddenBook,\n    inputs,\n    marketPrices,\n    popup,\n    traderBook,\n    trader,\n    sdk,\n});\n\nexport default rootReducer;\n","import { ActionType, getType } from \"typesafe-actions\";\n\nimport * as alertActions from \"../../actions/alert/alertActions\";\nimport * as pendingAlertActions from \"../../actions/alert/pendingAlertActions\";\n\nimport { Alert, AlertData } from \"../../reducers/types\";\n\nexport type AlertAction = ActionType<typeof alertActions>;\nexport type PendingAlertAction = ActionType<typeof pendingAlertActions>;\n\nexport default function alertReducer(state: AlertData = new AlertData(), action: AlertAction | PendingAlertAction) {\n    switch (action.type) {\n        case getType(alertActions.setAlert):\n            return state.set(\"alert\", action.payload.alert);\n        case getType(alertActions.clearAlert):\n            return state.set(\"alert\", new Alert({ message: \"\" }));\n        case getType(pendingAlertActions.addPendingAlert):\n            const { id, method } = action.payload;\n            return state.set(\"pendingAlerts\", state.pendingAlerts.set(id, method));\n        case getType(pendingAlertActions.removePendingAlerts):\n            const { ids } = action.payload;\n            let pendingAlerts = state.pendingAlerts;\n            for (const alertID of ids) {\n                pendingAlerts = pendingAlerts.delete(alertID);\n            }\n\n            return state.set(\"pendingAlerts\", pendingAlerts);\n\n        default:\n            return state;\n    }\n}\n","import { ActionType, getType } from \"typesafe-actions\";\n\nimport * as balancesActions from \"../../actions/balances/balancesActions\";\n\nimport { BalanceHistory } from \"../../reducers/types\";\n\ntype BalancesAction = ActionType<typeof balancesActions>;\n\nexport default function balancesReducer(state: BalanceHistory = new BalanceHistory(), action: BalancesAction) {\n    switch (action.type) {\n        case getType(balancesActions.storeBalanceActions):\n            let balanceHistory = state.balanceHistory;\n\n            action.payload.map((balanceAction) => {\n                balanceHistory = balanceHistory.set(balanceAction.txHash, balanceAction);\n            });\n\n            // updateIndex is incremented to ensure that the BalanceHistory is\n            // re-rendered.\n            return state\n                .set(\"balanceHistory\", balanceHistory)\n                .set(\"updateIndex\", state.updateIndex + 1);\n        default:\n            return state;\n    }\n}\n","import { ActionType, getType } from \"typesafe-actions\";\n\nimport * as inputsActions from \"../../actions/inputs/inputsActions\";\n\nimport { InputsData } from \"../../reducers/types\";\n\nexport type InputsAction = ActionType<typeof inputsActions>;\n\nexport default function inputsReducer(state: InputsData = new InputsData(), action: InputsAction) {\n    switch (action.type) {\n        case getType(inputsActions.setMarket):\n            return state.set(\"market\", action.payload.market);\n        case getType(inputsActions.setOrder):\n            return state.set(\"orderInputs\", action.payload.orderInputs);\n        case getType(inputsActions.setBalance):\n            return state.set(\"balanceInputs\", action.payload.balanceInputs);\n        default:\n            return state;\n    }\n}\n","import { ActionType, getType } from \"typesafe-actions\";\n\nimport * as marketActions from \"../../actions/market/marketActions\";\n\nimport { MarketPrice, MarketPriceData } from \"../../reducers/types\";\n\nexport type MarketAction = ActionType<typeof marketActions>;\n\nexport default function marketReducer(state: MarketPriceData = new MarketPriceData(), action: MarketAction) {\n    switch (action.type) {\n        case getType(marketActions.updatePrices):\n            const { price, percentChange } = action.payload;\n            const marketPrice: MarketPrice = { price, percentChange };\n            return state.set(\"marketPrices\", state.marketPrices.set(action.payload.pair, marketPrice));\n        default:\n            return state;\n    }\n}\n","import { ActionType, getType } from \"typesafe-actions\";\n\nimport * as popupActions from \"../../actions/popup/popupActions\";\n\nimport { PopupData } from \"../../reducers/types\";\n\ntype PopupAction = ActionType<typeof popupActions>;\n\nexport default function popupReducer(state: PopupData = new PopupData(), action: PopupAction) {\n    switch (action.type) {\n        case getType(popupActions.setPopup):\n            document.documentElement.classList.add(\"noscroll\");\n            return state\n                .set(\"popup\", action.payload.popup)\n                .set(\"dismissible\", action.payload.dismissible !== false)\n                .set(\"onCancel\", action.payload.onCancel);\n        case getType(popupActions.clearPopup):\n            document.documentElement.classList.remove(\"noscroll\");\n            return state.set(\"popup\", null);\n        default:\n            return state;\n    }\n}\n","import { TraderOrder } from \"@renex/renex\";\nimport { ActionType, getType } from \"typesafe-actions\";\n\nimport * as traderBookActions from \"../../actions/orderbook/traderBookActions\";\n\nimport { TraderBookData } from \"../../reducers/types\";\nimport { TraderOrderRecord } from \"../../reducers/typesSdk\";\n\nexport type TraderBookAction = ActionType<typeof traderBookActions>;\n\nexport default function traderBookReducer(state: TraderBookData = new TraderBookData(), action: TraderBookAction) {\n    switch (action.type) {\n        case getType(traderBookActions.addOrders):\n            const toAdd = action.payload;\n            let traderOrders = state.traderOrders;\n            toAdd.map((traderOrder: TraderOrderRecord) => {\n                traderOrders = traderOrders.set(traderOrder.id, traderOrder);\n            });\n            return state.set(\"traderOrders\", traderOrders);\n        case getType(traderBookActions.updateOrderStatus):\n            let order = state.traderOrders.get(action.payload.orderID, undefined);\n            if (!order) {\n                return state;\n            }\n            order = order.set(\"status\", action.payload.orderStatus);\n            return state.set(\"traderOrders\", state.traderOrders.set(order.id, order));\n        case getType(traderBookActions.updateOrderCancelling):\n            return state.set(\"cancelling\", state.cancelling.set(action.payload.orderID, action.payload.orderCancelling));\n        default:\n            return state;\n    }\n}\n","import { ActionType, getType } from \"typesafe-actions\";\n\nimport * as atomicActions from \"../../actions/settlement/atomicActions\";\nimport * as accountActions from \"../../actions/trader/accountActions\";\nimport * as balanceActions from \"../../actions/trader/balanceActions\";\nimport * as termsActions from \"../../actions/trader/termsActions\";\nimport * as walletActions from \"../../actions/trader/walletActions\";\n\nimport { TraderData } from \"../../reducers/types\";\n\ntype AccountAction = ActionType<typeof accountActions>;\ntype TermsAction = ActionType<typeof termsActions>;\ntype BalanceAction = ActionType<typeof balanceActions>;\ntype WalletAction = ActionType<typeof walletActions>;\ntype AtomicAction = ActionType<typeof atomicActions>;\n\nexport default function traderReducer(state: TraderData = new TraderData(), action: AccountAction | TermsAction | BalanceAction | WalletAction | AtomicAction) {\n    switch (action.type) {\n        case getType(accountActions.storeAddress):\n            return state.set(\"address\", action.payload);\n        case getType(accountActions.storeURL):\n            return state.set(\"url\", action.payload);\n\n        // Balance\n        case getType(balanceActions.updateBalance):\n            return state.set(\"balances\", state.balances.set(action.payload.token, action.payload.balance));\n        case getType(balanceActions.updateBalances):\n            return state.set(\"balances\", action.payload.balances);\n\n        // Usable Balance\n        case getType(balanceActions.updateUsableBalance):\n            return state.set(\"usableBalances\", state.usableBalances.set(action.payload.token, action.payload.usableBalance));\n        case getType(balanceActions.updateUsableBalances):\n            return state.set(\"usableBalances\", action.payload.usableBalances);\n\n        // Usable Atomic Action\n        case getType(balanceActions.updateUsableAtomicBalances):\n            return state.set(\"usableAtomicBalances\", action.payload.usableAtomicBalances);\n\n        // Account balance\n        case getType(balanceActions.updateAccountBalance):\n            return state.set(\"accountBalances\", state.accountBalances.set(action.payload.token, action.payload.accountBalance));\n        case getType(balanceActions.updateAccountBalances):\n            return state.set(\"accountBalances\", action.payload.accountBalances);\n\n        // Atomic Balance\n        case getType(balanceActions.updateAtomicBalances):\n            return state.set(\"atomicBalances\", action.payload.atomicBalances);\n        case getType(balanceActions.updateAtomicAddresses):\n            return state.set(\"atomicAddresses\", action.payload.atomicAddresses);\n        case getType(atomicActions.updateAtomConnectionStatus):\n            return state.set(\"atomConnectionStatus\", action.payload.atomConnectionStatus);\n\n        // Terms\n        case getType(termsActions.agreeToTerms):\n            return state.set(\"agreedToTerms\", action.payload.agreedToTerms);\n\n        // Wallet\n        case getType(walletActions.storeWallet):\n            return state.set(\"wallet\", action.payload.wallet);\n\n        default:\n            return state;\n    }\n}\n","import { ActionType, getType } from \"typesafe-actions\";\n\nimport * as sdkActions from \"../../actions/sdk/sdkActions\";\n\nimport { SDKData } from \"../../reducers/types\";\n\nexport type SDKAction = ActionType<typeof sdkActions>;\n\nexport default function sdkReducer(state: SDKData = new SDKData(), action: SDKAction) {\n    switch (action.type) {\n        case getType(sdkActions.storeSDK):\n            console.assert(action.payload.sdk !== undefined);\n            window.sdk = action.payload.sdk;\n            return state.set(\"sdk\", action.payload.sdk);\n        case getType(sdkActions.storeSDKData):\n            return state\n                .set(\"supportedTokens\", action.payload.supportedTokens)\n                .set(\"supportedAtomicTokens\", action.payload.supportedAtomicTokens)\n                .set(\"darknodeFeePercent\", action.payload.darknodeFeePercent)\n                .set(\"wrappingFeePercent\", action.payload.wrappingFeePercent)\n                .set(\"minEthTradeVolume\", action.payload.minEthTradeVolume)\n                .set(\"supportedMarkets\", action.payload.supportedMarkets);\n        default:\n            return state;\n    }\n}\n","import storage from \"redux-persist/lib/storage\";\n\nimport { createTransform, PersistConfig } from \"redux-persist\";\n\nimport { ApplicationData, TraderData } from \"../reducers/types\";\n\n// Local Storage:\n\nconst traderTransform = createTransform<TraderData, string>(\n    (inboundState: TraderData, key: string): string => {\n        try {\n            return inboundState.serialize();\n        } catch (err) {\n            console.error(`Error serializing ${key} (${JSON.stringify(inboundState)}): ${err}`);\n            throw err;\n        }\n    },\n    (outboundState: string, key: string): TraderData => {\n        try {\n            return new TraderData().deserialize(outboundState);\n        } catch (err) {\n            console.error(`Error deserializing ${key} (${JSON.stringify(outboundState)}): ${err}`);\n            throw err;\n        }\n    },\n    { whitelist: [\"trader\"] as Array<keyof ApplicationData>, },\n);\n\nexport const persistConfig: PersistConfig = {\n    storage,\n    key: \"root\",\n    whitelist: [\"trader\"] as Array<keyof ApplicationData>,\n    transforms: [traderTransform],\n};\n","import thunk from \"redux-thunk\";\n\nimport { Action, applyMiddleware, createStore, Middleware, Reducer } from \"redux\";\nimport { PersistConfig, persistReducer, persistStore } from \"redux-persist\";\n\nimport rootReducer from \"../reducers/rootReducer\";\nimport { persistConfig } from \"./persistConfig\";\n\nconst middlewares: Middleware[] = [\n    thunk,\n];\n\n// Log Redux actions (only in development)\nif (process.env.NODE_ENV === \"development\") {\n    // middlewares.push(createLogger({ collapsed: true }));\n}\n\n// Workaround createStore not liking type of persistReducer\nexport function typedPersistReducer<S, A extends Action>(config: PersistConfig, reducer: Reducer<S, A>) {\n    return persistReducer<S | undefined, A>(\n        config,\n        reducer\n    );\n}\n\nconst persistedReducer = typedPersistReducer(persistConfig, rootReducer);\n\nexport default () => {\n    const store = createStore(persistedReducer,\n        applyMiddleware(...middlewares),\n    );\n    const persistor = persistStore(store);\n    return { store, persistor };\n};\n","import * as Sentry from \"@sentry/browser\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\n\nimport Web3 from \"web3\";\nimport { HttpProvider } from \"web3/providers\";\n\nimport RenExSDK, { NetworkData } from \"@renex/renex\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\n\nimport App from \"./components/App\";\nimport configureStore from \"./store/configureStore\";\n\nimport \"./index.scss\";\n\nexport const { store, persistor } = configureStore();\n\ninterface EthereumProvider extends HttpProvider {\n    enable(): Promise<void>;\n}\n\ndeclare global {\n    interface Window {\n        web3: Web3 | undefined;\n        ethereum: EthereumProvider | undefined;\n        API: string;\n        NETWORK: NetworkData;\n        INFURA_KEY: string;\n        WYRE_KEY: string;\n        KYBER_KEY: string;\n        SENTRY_DSN: string;\n        sdk: RenExSDK;\n    }\n}\n\n// Initialize Sentry error logging\nSentry.init({\n    dsn: window.SENTRY_DSN,\n    environment: (process.env.NODE_ENV === \"development\") ? \"local\" : window.NETWORK.network,\n});\n\nReactDOM.render(\n    <Provider store={store}>\n        <PersistGate loading={null} persistor={persistor}>\n            <App />\n        </PersistGate>\n    </Provider>,\n    document.getElementById(\"root\") as HTMLElement\n);\n","module.exports = __webpack_public_path__ + \"static/media/btc.dd58cd55.svg\";","module.exports = __webpack_public_path__ + \"static/media/dgx.09966c0f.svg\";","module.exports = __webpack_public_path__ + \"static/media/eth.ac24c334.svg\";","module.exports = __webpack_public_path__ + \"static/media/omg.cbd0e5e9.svg\";","module.exports = __webpack_public_path__ + \"static/media/ren.05a00b3b.svg\";","module.exports = __webpack_public_path__ + \"static/media/tusd.c377a1ca.svg\";","module.exports = __webpack_public_path__ + \"static/media/wbtc.a81a823b.png\";","module.exports = __webpack_public_path__ + \"static/media/wbtc.8122efc9.svg\";","module.exports = __webpack_public_path__ + \"static/media/zrx.7ede344d.svg\";","var map = {\n\t\"./btc.svg\": 620,\n\t\"./dgx.svg\": 621,\n\t\"./eth.svg\": 622,\n\t\"./omg.svg\": 623,\n\t\"./ren.svg\": 624,\n\t\"./tusd.svg\": 625,\n\t\"./wbtc.png\": 626,\n\t\"./wbtc.svg\": 627,\n\t\"./zrx.svg\": 628\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 70;"],"sourceRoot":""}